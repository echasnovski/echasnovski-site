<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Evgeni Chasnovski</title>
<link>https://echasnovski.com/blog.html</link>
<atom:link href="https://echasnovski.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>Personal website of Evgeni Chasnovski</description>
<generator>quarto-1.7.33</generator>
<lastBuildDate>Sun, 10 May 2020 21:00:00 GMT</lastBuildDate>
<item>
  <title>Count bounces in table tennis world record</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2020-05-11-count-bounces-in-table-tennis-world-record.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Dan Ives is no stranger to participating in “prolonged” table tennis activities and capturing it on camera. He once <a href="https://www.youtube.com/watch?v=6mt4_8Rd5tg">said “table tennis” 100,000 times</a>, which took him about 15 hours. With his father Peter he also set a <a href="https://www.youtube.com/watch?v=cfp5SEV3Bns">world record for the longest table tennis rally</a> which lasted for 8 hours, 40 minutes, and 10 seconds (8h40m10s as a shorter description of time period).</p>
<p>On May 7th 2020 Dan made a successful attempt to beat a world record for the <a href="https://www.guinnessworldrecords.com/world-records/table-tennis-bat-and-ball-control-duration?fb_comment_id=784092958310554_1433556316697545">longest duration to control a table tennis ball with a bat</a>. He surpassed current record duration of 5h2m37s by 18 minutes and 27 seconds for a total of 5h21m4s. He also live streamed the event on his <a href="https://www.youtube.com/channel/UC_368FANcHhkhZ7oVqkW86A">“TableTennisDaily” YouTube channel</a>, which later <a href="https://www.youtube.com/watch?v=nkgzLeNocb0">was uploaded</a> (important note for the future: this video is a result of live stream and not a “shot and uploaded” one). During cheering for Dan in real time I got curious about actual number of bounces he made.</p>
<p><strong>And thus the quest begins</strong>.</p>
<p>As counting manually is error-prone and extremely boring, I decided to do this programmatically. The idea of solution is straightforward: somehow extract audio from the world record video, detect bounces (as they have distinctive sound) and count them.</p>
<p>This post consists from two parts (if you just want to know a total count, skip right to Epilogue):</p>
<ul>
<li><strong>Detecting</strong> section describes technical details about how I approached the task of detecting bounces.</li>
<li><strong>Counting</strong> section describes difficulties I had to overcome to produce a (reasonably accurate) count of bounces.</li>
</ul>
<p>For more technical details you can look at <a href="https://github.com/echasnovski/curiosity-projects/tree/master/ttd-world-record">this project’s Git repository</a>.</p>
</section>
<section id="detecting" class="level1">
<h1>Detecting</h1>
<p>Detecting was done in two steps: get audio of world record and detect bounces.</p>
<p>I used the following tools on Ubuntu 18.04 (in order of their usage; Python packages probably best to be installed in a separate environment):</p>
<ul>
<li><a href="https://github.com/soimort/you-get">you-get</a> to download video with the lowest video quality.</li>
<li><a href="https://www.ffmpeg.org/">ffmpeg</a> to extract audio from downloaded video and split it into 1 hour chunks (except the last one). Splitting was done because of insufficient amount of RAM I have in order to analyze the whole audio file. <strong>Note</strong> that having these splits means that some bounces on the joints between consecutive audio-chunks won’t be detected.</li>
<li><a href="https://github.com/librosa/librosa">librosa</a> to detect beats that were in the period from 00:01:14 to 05:20:15 (times of first and last bounces). Timestamps of those beats were considered to be timestamps of bounces.</li>
</ul>
</section>
<section id="counting" class="level1">
<h1>Counting</h1>
<p>So the total number of <strong>detected</strong> bounces is 49923 with an average tempo of ~156.5 bounces per minute. Ant <strong>note</strong> that this doesn’t include possibly missing bounces due to splitting audio in 1 hour chunks, which introduced 5 joints between them.</p>
<p>However, YouTube footage is not a “preshot and uploaded” one, but is a direct output of live stream. This resulted into some missing footage. Total time of record based on video footage is 5h19m1s (from 00:01:14 to 05:20:15 video timestamps). On the other hand, tablet, responsible for time tracking, shows total time of 5h21m4s (from 00:00:03 to 05:21:07 at corresponding video timestamps). So there is missing 2m3s of actual bouncing. They were results of video jumps due to, most probably, internet connection issues (I encourage everyone to believe in Dan’s honesty):</p>
<ul>
<li><a href="https://youtu.be/nkgzLeNocb0?t=9144">From 02:32:24 to 02:32:25</a> in footage time there is a jump in “tablet time” from 02:31:13 to 02:31:24. This is a gap of 10 seconds.</li>
<li><a href="https://youtu.be/nkgzLeNocb0?t=9161">From 02:32:41 to 02:32:42</a> - tablet jumps from 02:31:41 to 02:32:12. Gap of 30 seconds.</li>
<li><a href="https://youtu.be/nkgzLeNocb0?t=10157">From 02:49:17 to 02:49:18</a> - tablet jumps from 02:48:48 to 02:48:59. Gap of 10 seconds.</li>
<li><a href="https://youtu.be/nkgzLeNocb0?t=10169">From 02:49:29 to 02:49:30</a> - tablet jumps from 02:49:10 to 02:49:41. Gap of 30 seconds.</li>
<li><a href="https://youtu.be/nkgzLeNocb0?t=10529">From 02:55:29 to 02:55:30</a> - tablet jumps from 02:55:41 to 02:55:52. Gap of 10 seconds.</li>
<li><a href="https://youtu.be/nkgzLeNocb0?t=10537">From 02:55:37 to 02:55:38</a> - tablet jumps from 02:55:59 to 02:56:30. Gap of 30 seconds.</li>
<li>The rest 3 seconds seems to be the result of my rounding and possibly some very small jumps.</li>
</ul>
<p>Close video timestamps and systematic length of jumps are another indicators of internet connection issues.</p>
<p>Knowing that there is 2m3s of footage missing and that average tempo was ~156.5 bounces per minute, we can add 321 bounces to detected ones.</p>
<p>Finally, the <strong>total number of bounces in Dan Ives world record can be estimated as 50244 bounces</strong> (error should be less than 100 bounces for sure).</p>
<p><strong>And thus the quest ends</strong>.</p>
</section>
<section id="epilogue" class="level1">
<h1>Epilogue</h1>
<ul>
<li>Tools such as ‘you-get’, ‘ffmpeg’, and ‘librosa’ (and Python language in general) make a task as abstract as “count number of table tennis ball bounces in 5 and a half hour long YouTube video” reasonably easy.</li>
<li>During his 5 hours, 21 minutes, and 4 seconds of world record, Dan Ives made around 50244 bounces (with error less than 100 bounces in either side).</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 4.0.0 (2020-04-24)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.4 LTS
##
## Matrix products: default
## BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
## LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base
##
## loaded via a namespace (and not attached):
##  [1] compiler_4.0.0  magrittr_1.5    bookdown_0.18   tools_4.0.0
##  [5] htmltools_0.4.0 yaml_2.2.1      Rcpp_1.0.4.6    stringi_1.4.6
##  [9] rmarkdown_2.1   blogdown_0.18   knitr_1.28      stringr_1.4.0
## [13] digest_0.6.25   xfun_0.13       rlang_0.4.6     evaluate_0.14</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>curiosity-project</category>
  <guid>https://echasnovski.com/blog/2020-05-11-count-bounces-in-table-tennis-world-record.html</guid>
  <pubDate>Sun, 10 May 2020 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Statistical uncertainty with R and pdqr</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2019-11-11-statistical-uncertainty-with-pdqr.html</link>
  <description><![CDATA[ 





<!-- ```{r setup, include = FALSE} -->
<!-- # Helper data -->
<!-- n_aut_cars <- sum(mtcars$am == 0) -->
<!-- n_man_cars <- sum(mtcars$am == 1) -->
<!-- ``` -->
<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>I am glad to announce that my latest, long written R package <a href="https://echasnovski.github.io/pdqr/">‘pdqr’</a> is <a href="https://CRAN.R-project.org/package=pdqr">accepted to CRAN</a>. It provides tools for creating, transforming and summarizing custom random variables with distribution functions (as base R ‘p*()’, ‘d*()’, ‘q*()’, and ‘r*()’ functions). You can read a brief overview in <a href="http://www.questionflow.org/2019/08/01/announcing-pdqr/#package-overview">one of my previous posts</a>.</p>
<p>We will need the following setup:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pdqr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(magrittr)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For the sake of reproducibility</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20191111</span>)</span></code></pre></div>
</section>
<section id="statistical-uncertainty" class="level1">
<h1>Statistical uncertainty</h1>
<section id="general-description" class="level2">
<h2 class="anchored" data-anchor-id="general-description">General description</h2>
<p>Statistical estimation usually has the following setup. There is a sample (<em>observed, usually randomly chosen, set</em> of values of measurable quantities) from some general population (<em>whole set</em> of values of the same measurable quantities). <em>We need to make conclusions about the general population based on a sample</em>. This is done by computing summary values (called <strong>statistics</strong>) of a sample, and making reasonable assumptions (with process usually called <strong>inference</strong>) about how these values are close to values that <em>potentially can be computed based on whole general population</em>. Thus, summary value based on a sample (<strong>sample statistic</strong>) is an <em>estimation</em> of potential summary value based on a general population (true value).</p>
<p>How can we make inference about quality of this estimation? This question itself describes <strong>statistical uncertainty</strong> and can be unfolded into a deep philosophical question about probability, nature, and life in general. Basically, the answer depends on assumptions about the relation between sample, general population, and statistic.</p>
<p>For me, the most beautiful inferential approach is <strong><a href="https://en.wikipedia.org/wiki/Bootstrapping_(statistics)">bootstrap</a></strong>. It has the following key assumption: <em>process of producing samples from general population can be simulated by doing random sampling with replacement from present sample</em>. In other words, we agree (and practice often agrees with us) that random sampling with replacement from current sample (sometimes called <em>bootstrap sampling</em>) has a “close enough” behavior to the “true nature” of how initial sample was created. Numerical estimation of “how close” is also an interesting problem, but it is a more complicated topic.</p>
</section>
<section id="computation-with-pdqr" class="level2">
<h2 class="anchored" data-anchor-id="computation-with-pdqr">Computation with pdqr</h2>
<p>Natural way of computing bootstrap quantities is straightforward: produce <img src="https://latex.codecogs.com/png.latex?B"> random bootstrap samples, for each one compute value of statistic under question, and summarize <em>sample of statistic values</em> with numerical quantity (usually with some center and spread values).</p>
<p>There are many ways of performing bootstrap in R, like <a href="https://rdrr.io/cran/boot/man/boot.html">boot::boot()</a>, <a href="https://tidymodels.github.io/rsample/reference/bootstraps.html">rsample::bootstraps()</a>, and others. In turn, ‘pdqr’ offers its own way of describing and doing bootstrap inference for one-dimensional numeric sample(s):</p>
<ul>
<li><strong>Create</strong> a random variable (in the form of pdqr-function with <code>new_*()</code> family) based on initial sample. This random variable already describes a general population with “bootstrap assumption”: it will produce values based on initial sample. <a href="https://echasnovski.github.io/pdqr/reference/meta.html#pdqr-type">Type</a> of this variable determines the type of bootstrap:
<ul>
<li>Type <code>"discrete"</code> describes ordinary bootstrap. Only values from initial sample can be produced.</li>
<li>Type <code>"continuous"</code> describes <a href="https://en.wikipedia.org/wiki/Bootstrapping_(statistics)#Smooth_bootstrap">smooth bootstrap</a>. Initial sample is smoothed by doing kernel density estimation with <a href="https://rdrr.io/r/stats/density.html">density()</a> function and random variable produces values from distribution with that density.</li>
</ul></li>
<li><strong>Transform</strong> created random variable into one that produces statistic values obtained with bootstrap. Sometimes this can be done with basic mathematical operations like <code>+</code>, <code>min</code>, etc. But usually this is done with <a href="https://echasnovski.github.io/pdqr/reference/form_estimate.html">form_estimate()</a> function: it creates many (10000 by default) bootstrap samples, for each computes statistic value, and creates its own random variable in the form of pdqr-function (<a href="https://echasnovski.github.io/pdqr/reference/meta.html#pdqr-class">class</a> and type are preserved from supplied random variable, but this can be adjusted). It needs at least three arguments:
<ul>
<li><code>f</code>: pdqr-function representing random variable. In described setup it is created as a result of “Create” step.</li>
<li><code>stat</code>: statistic function that accepts numeric vector of size <code>sample_size</code> and returns single numeric or logical output.</li>
<li><code>sample_size</code>: Size of a sample that each bootstrap draw should produce. In described setup it <em>should be equal</em> to number of elements in initial sample.</li>
</ul></li>
<li><strong>Summarize</strong> distribution of statistic. Usually this is point measure of center or spread, or interval.</li>
</ul>
<section id="example-1-single-numerical-estimate" class="level3">
<h3 class="anchored" data-anchor-id="example-1-single-numerical-estimate">Example 1: single numerical estimate</h3>
<p>Mean value of ‘mpg’ variable in <code>mtcars</code> dataset is 20.090625. However, having in mind statistical uncertainty, we can ask how precise is this estimation? This can, and should, be reformulated in the following question: <strong>if we repeat sampling sets of 32 cars from general population of all cars, how close their ‘mpg’ sample means will be to each other?</strong> This can be answered by computing bootstrap distribution of sample means (pipe <a href="https://magrittr.tidyverse.org/reference/pipe.html">%&gt;%</a> function from ‘magrittr’ package is used to simplify notation):</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using ordinary bootstrap</span></span>
<span id="cb2-2">d_mpg_dis_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"discrete"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_estimate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mtcars))</span>
<span id="cb2-5"></span>
<span id="cb2-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Spread of this bootstrap distribution describes the precision of estimation:</span></span>
<span id="cb2-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bigger values indicate lower precision</span></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_sd</span>(d_mpg_dis_mean)</span>
<span id="cb2-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1.04067</span></span>
<span id="cb2-10"></span>
<span id="cb2-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This discrete distribution has the following d-function</span></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb2-13">  d_mpg_dis_mean,</span>
<span id="cb2-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ordinary bootstrap distribution of 'mpg' sample mean"</span></span>
<span id="cb2-15">)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-11-11-statistical-uncertainty-with-pdqr/example-1_discrete-1.png" class="img-fluid"></p>
<p>If modeling assumption about continuous nature of ‘mpg’ variable is reasonable (which it seems so), you can use “smooth bootstrap” by changing type of initial pdqr-function:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using smooth bootstrap with `type = "continuous"`</span></span>
<span id="cb3-2">d_mpg_con_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_estimate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mtcars))</span>
<span id="cb3-5"></span>
<span id="cb3-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Spread is higher in this case because kernel density estimation with</span></span>
<span id="cb3-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `density()` function extends support during creation of pdqr-function on the</span></span>
<span id="cb3-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bootstrap step</span></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_sd</span>(d_mpg_con_mean)</span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1.153957</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb3-13">  d_mpg_con_mean,</span>
<span id="cb3-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smooth bootstrap distribution of 'mpg' sample mean"</span></span>
<span id="cb3-15">)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-11-11-statistical-uncertainty-with-pdqr/example-1_continuous-1.png" class="img-fluid"></p>
<p>One can also do ordinary bootstrap but represent bootstrap distribution of sample mean with continuous random variable:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using ordinary bootstrap, but treating sample mean as continuous</span></span>
<span id="cb4-2">d_mpg_con_mean_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"discrete"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_estimate</span>(</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mtcars),</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create continuous pdqr-function from bootstrap sample means</span></span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args_new =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>)</span>
<span id="cb4-8">  )</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_sd</span>(d_mpg_con_mean_2)</span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1.063524</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb4-14">  d_mpg_con_mean_2,</span>
<span id="cb4-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ordinary bootstrap distribution of 'mpg' continuous sample mean"</span></span>
<span id="cb4-16">)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-11-11-statistical-uncertainty-with-pdqr/example-1_both-1.png" class="img-fluid"></p>
<p>In this case, sample mean has standard deviation from 1.04067 to 1.1539572 (depends on assumptions about data generating process).</p>
</section>
<section id="example-2-single-logical-estimate" class="level3">
<h3 class="anchored" data-anchor-id="example-2-single-logical-estimate">Example 2: single logical estimate</h3>
<p>Share of 4-cylinder cars in <code>mtcars</code> is equal to 0.34375. However, it might happen that we don’t care about actual value, but only if it is bigger 0.3 or not. In present data it is bigger, but how sure we can be about that? In other words: <strong>if we repeat sampling sets of 32 cars from general population of all cars, which part of it will have share of 4-cylinder cars bigger than 0.3?</strong>. Here is the way of computing that with ‘pdqr’:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If statistic returns logical value (indicating presence of some feature in</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample), output estimate pdqr-function is "boolean": "discrete" type function</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with elements being exactly 0 (indicating `FALSE`) and 1 (indicating `TRUE`).</span></span>
<span id="cb5-4">d_cyl_lgl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"discrete"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_estimate</span>(</span>
<span id="cb5-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>},</span>
<span id="cb5-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mtcars)</span>
<span id="cb5-9">  )</span>
<span id="cb5-10"></span>
<span id="cb5-11">d_cyl_lgl</span>
<span id="cb5-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Probability mass function of discrete type</span></span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Support: [0, 1] (2 elements, probability of 1: 0.7113)</span></span>
<span id="cb5-14"></span>
<span id="cb5-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To extract certain probability from boolean pdqr-function, use</span></span>
<span id="cb5-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `summ_prob_*()` functions</span></span>
<span id="cb5-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_prob_true</span>(d_cyl_lgl)</span>
<span id="cb5-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.7113</span></span>
<span id="cb5-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_prob_false</span>(d_cyl_lgl)</span>
<span id="cb5-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.2887</span></span></code></pre></div>
<p>In this case, estimated probability that share of 4-cylinder cars in general population is more than 0.3 is 0.7113.</p>
</section>
<section id="example-3-comparison-of-estimates" class="level3">
<h3 class="anchored" data-anchor-id="example-3-comparison-of-estimates">Example 3: comparison of estimates</h3>
<p>In <code>mtcars</code> there are 19 cars with automatic transmission (‘am’ variable is 0) and 13 with manual (‘am’ variable is 1). We might be concerned with the following question: <strong>are cars with automatic transmission heavier than cars with manual transmission?</strong> This is an example of question where reformulating is very crucial, because it leads to completely different methodologies. Basically, it is all about dealing with statistical uncertainty and how to measure that one numerical set is bigger than the other.</p>
<p>First, rather verbose, way of expanding this question is this one: <strong>if we randomly choose a car with automatic transmission (uniformly on set of all cars with automatic transmission) and a car with manual (uniformly on set of all cars with manual transmission), what is the probability that weight of the first one is bigger than the second one?</strong>. With ‘pdqr’ this can be computed straightforwardly by comparing two random variables (which is implemented exactly like the question above; read more <a href="https://echasnovski.github.io/pdqr/reference/methods-group-generic.html#ops">here</a>):</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seems reasonable to treat weight as continuous random variable. Note that this</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># means use of kernel density estimation, which can lead to random variable that</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns negative values. As weight can be only positive, it is a good idea to</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ensure that. Package 'pdqr' has `form_resupport()` function for that.</span></span>
<span id="cb6-5">d_wt_am0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wt[mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure that returned values are only positive</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_resupport</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb6-9">d_wt_am1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wt[mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_resupport</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comparing two pdqr-functions with `&gt;=` results into boolean pdqr-function</span></span>
<span id="cb6-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_prob_true</span>(d_wt_am0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> d_wt_am1)</span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.9209063</span></span></code></pre></div>
<p>So in this case the answer is that probability of “automatic” cars being heavier than “manual” ones is around 0.921.</p>
<p>Second way of understanding question about comparing is the following: <strong>is average weight of “automatic” cars bigger than of “manual”?</strong>. This type of questions are more widespread in statistical practice. Having to deal with statistical uncertainty, this should be reformulated: <strong>if we repeat sampling (in parallel pairs) sets of 19 “automatic” cars and of 13 “manual” cars, which part of the set pairs will have mean weight of “automatic” cars bigger?</strong> This question implies creating bootstrap distribution of sample means for “automatic” and “manual” cars with the following comparing:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">d_wt_am0_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> d_wt_am0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_estimate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure "positiveness" of random variable</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_resupport</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb7-5">d_wt_am1_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> d_wt_am1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_estimate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_resupport</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comparing two random variables representing sample means</span></span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_prob_true</span>(d_wt_am0_mean <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> d_wt_am1_mean)</span>
<span id="cb7-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span></code></pre></div>
<p>So in this case the answer is that probability of “automatic” cars being heavier than “manual” ones is 1.</p>
<p>Computed results can have decisively different outcomes. If researcher sets a standard 0.95 rule, first variant would imply that conclusion ‘“automatic” cars are heavier than “manual”’ isn’t significant, while the second would imply otherwise.</p>
</section>
</section>
</section>
<section id="epilogue" class="level1">
<h1>Epilogue</h1>
<ul>
<li>Basic knowledge about statistical uncertainty is crucial to understand the process of statistical inference.</li>
<li>One of the most popular methodologies for doing statistical inference is bootstrap. There are at least two kinds of it: ordinary and smooth.</li>
<li>Package ‘pdqr’ offers extensive functionality for describing and estimating statistical uncertainty. Core functions here are <a href="https://echasnovski.github.io/pdqr/reference/new-pdqr.html"><code>new_*()</code> family</a>, <a href="https://echasnovski.github.io/pdqr/reference/form_estimate.html"><code>form_estimate()</code></a>, and <a href="https://echasnovski.github.io/pdqr/reference/methods-group-generic.html#ops">comparison operators</a>.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.6.1 (2019-07-05)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.3 LTS
## 
## Matrix products: default
## BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
## LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
## 
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8    
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8   
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C       
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] magrittr_1.5 pdqr_0.2.0  
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_1.0.2      bookdown_0.13   crayon_1.3.4    digest_0.6.21  
##  [5] evaluate_0.14   blogdown_0.15   pillar_1.4.2    rlang_0.4.0    
##  [9] stringi_1.4.3   rmarkdown_1.15  tools_3.6.1     stringr_1.4.0  
## [13] xfun_0.9        yaml_2.2.0      compiler_3.6.1  htmltools_0.3.6
## [17] knitr_1.25</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>pdqr</category>
  <guid>https://echasnovski.com/blog/2019-11-11-statistical-uncertainty-with-pdqr.html</guid>
  <pubDate>Sun, 10 Nov 2019 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Local randomness in R</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2019-08-13-local-randomness-in-r.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Let’s say we have a deterministic (non-random) problem for which one of the solutions involves randomness. One very common example of such problem is a function minimization on certain interval: it can be solved non-randomly (like in most methods of <a href="https://rdrr.io/r/stats/optim.html">optim()</a>), or randomly (the simplest approach being to generate random set of points on interval and to choose the one with the lowest function value).</p>
<p>What is a “clean” way of writing a function to solve the problem? The issue with direct usage of randomness inside a function is that it affects the state of outer random number generation:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Demo problem solving function</span></span>
<span id="cb1-2">minimize_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(f, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>) {</span>
<span id="cb1-3">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> from, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> to)</span>
<span id="cb1-4"></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(points)))</span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reference random number output</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.3721984</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test random number output is different from reference one. But we want it to</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be the same.</span></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minimize_f</span>(sin)</span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.1016229</span></span></code></pre></div>
<p>So how can we get “more clean” implementation which does not affect outer state? This short post is inspired by the following sources: <a href="https://stackoverflow.com/questions/23090958/isolate-randomness-of-a-local-environment-from-the-global-r-process">this StackOverflow question</a> by Yihui Xie and <a href="http://www.cookbook-r.com/Numbers/Saving_the_state_of_the_random_number_generator/">this cookbook advice</a>.</p>
</section>
<section id="local-randomness" class="level1">
<h1>Local randomness</h1>
<p>The state of random number generation is stored in <a href="https://rdrr.io/r/base/Random.html">.Random.seed</a> variable, which is “an integer vector” and it “can be saved and restored, but should not be altered by the user”. This gives us a very big hint about how to implement “local randomness”: capture state at the start of the function, make necessary computations, and restore state at the end. Bad news is, this also means that we enter here the dark realm of variables and their environments.</p>
<p><strong>How to “save state”?</strong> In help page there is a note: “The object <code>.Random.seed</code> is only looked for in the user’s workspace”. Here “user’s workspace” seems to mean global environment, which should be addressed with variable <code>.GlobalEnv</code>. So, to “save state” we need to get a value of <code>.Random.seed</code> variable inside global environment. This is a job for <a href="https://rdrr.io/r/base/exists.html">get0()</a>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">get_rand_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using `get0()` here to have `NULL` output in case object doesn't exist.</span></span>
<span id="cb2-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Also using `inherits = FALSE` to get value exactly from global environment</span></span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and not from one of its parent.</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-6">}</span></code></pre></div>
<p><strong>How to “restore state”?</strong> We need to assign certain value (of previously saved state) to a <code>.Random.seed</code> variable in global environment. This is a job for <a href="https://rdrr.io/r/base/assign.html">assign()</a>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">set_rand_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(state) {</span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assigning `NULL` state might lead to unwanted consequences</span></span>
<span id="cb3-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(state)) {</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, state, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-5">  }</span>
<span id="cb3-6">}</span></code></pre></div>
<p><strong>How to make “local randomness”?</strong> We can now save and restore random state. The final peace of a puzzle is to make restoration at the end of computations inside a function. This is a job for <a href="https://rdrr.io/r/base/on.exit.html">on.exit()</a>: call for <code>set_rand_state()</code> should be wrapped in <code>on.exit()</code> to perform restoration exactly at the moment when function ends all operations it is supposed to do.</p>
<p><strong>Notes</strong> about positioning of calls inside a function:</p>
<ul>
<li>Call to <code>get_rand_state()</code> should be done right at the beginning of a function body to capture the state just before the function was called.</li>
<li>Simply positioning call to <code>set_rand_state()</code> inside function body right before returning result might be not enough, because previous lines of code can terminate earlier (for example, with error). Function <code>on.exit()</code> guarantees execution of expression.</li>
</ul>
<p>Giving all that, the “clean” way of implementing “local randomness” is the following:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">my_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb4-2">  old_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_rand_state</span>()</span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_rand_state</span>(old_state))</span>
<span id="cb4-4"></span>
<span id="cb4-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The rest of the code</span></span>
<span id="cb4-6">}</span></code></pre></div>
<p>Let’s check this solution on practice:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">minimize_f_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(f, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>) {</span>
<span id="cb5-2">  old_state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_rand_state</span>()</span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_rand_state</span>(old_state))</span>
<span id="cb5-4"></span>
<span id="cb5-5">  points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> from, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> to)</span>
<span id="cb5-6"></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(points)))</span>
<span id="cb5-8">}</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reference random number output (repeated for reading convenience)</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.3721984</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output of `runif(1)` is the same as reference one, which was the goal</span></span>
<span id="cb5-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb5-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minimize_f_clean</span>(sin)</span>
<span id="cb5-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.3721984</span></span></code></pre></div>
</section>
<section id="epilogue" class="level1">
<h1>Epilogue</h1>
<ul>
<li>Creating a function with “local randomness” although requires some dark R magic (with <code>get0()</code>, <code>assign()</code>, and <code>on.exit()</code> usage), is pretty straightforward.</li>
<li>If you have some non-trivial R problem, there is a good chance that Yihui Xie has already posted a question on StackOverflow about it.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.6.1 (2019-07-05)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.3 LTS
##
## Matrix products: default
## BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
## LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base
##
## loaded via a namespace (and not attached):
##  [1] compiler_3.6.1  magrittr_1.5    bookdown_0.11   tools_3.6.1
##  [5] htmltools_0.3.6 yaml_2.2.0      Rcpp_1.0.1      stringi_1.4.3
##  [9] rmarkdown_1.13  blogdown_0.12   knitr_1.23      stringr_1.4.0
## [13] digest_0.6.19   xfun_0.7        evaluate_0.14</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <guid>https://echasnovski.com/blog/2019-08-13-local-randomness-in-r.html</guid>
  <pubDate>Mon, 12 Aug 2019 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Arguments of stats::density()</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>In R, one of the “go to” functions for <a href="https://en.wikipedia.org/wiki/Kernel_density_estimation">kernel density estimation</a> is <a href="https://rdrr.io/r/stats/density.html">density()</a> from base R package ‘stats’. Given numeric sample, it returns a set of x-y pairs on estimated density curve. It is also a main “workhorse” for estimating continuous distributions in my <a href="https://echasnovski.github.io/pdqr">‘pdqr’</a> package.</p>
<p>However, output of <code>density()</code> highly depends on values of its arguments. Some of them define kernel density estimation algorithm, and the others are responsible for different properties of output set of x-y pairs.</p>
<p>In this post I illustrate with animations how changing arguments of <code>density()</code> changes the output.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>The illustration workflow will be as follows:</p>
<ul>
<li>For a certain <code>density()</code> argument create a set of its values that will help to illustrate how it affects the output.</li>
<li>For every value <code>a</code> of argument <code>x</code> compute <code>density(mtcars$mpg, x = a)</code> (all other arguments having default values). This results into a set of “density curves”: piecewise-linear curves drawn through x-y points.</li>
<li>Animate evolution of density curves as argument value changes from first to last.</li>
</ul>
<p>We’ll need the following setup (including main helper function <code>density_anim()</code> for creating animations):</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn.conflicts =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gganimate)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn.conflicts =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create refernce default `density()` curve</span></span>
<span id="cb1-6">default_density_curve <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)])</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helper function to create density animation. Here `...` should be a vector</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># of argument values of interest (passed as that argument), and `duration` is a</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># total duration of animation in seconds.</span></span>
<span id="cb1-11">density_anim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">duration =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb1-12">  density_mpg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(...) {</span>
<span id="cb1-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg, ...)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)])</span>
<span id="cb1-14">  }</span>
<span id="cb1-15"></span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `...` should consist only from one input</span></span>
<span id="cb1-17">  dots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(...)</span>
<span id="cb1-18">  arg_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(dots)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-19">  vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dots[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb1-20"></span>
<span id="cb1-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take into account that input might be a list (and thus not suitable for</span></span>
<span id="cb1-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `transition_states()`)</span></span>
<span id="cb1-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(vals)) {</span>
<span id="cb1-24">    arg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(arg_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_id"</span>)</span>
<span id="cb1-25">    states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(vals)</span>
<span id="cb1-26">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb1-27">    arg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> arg_name</span>
<span id="cb1-28">    states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vals</span>
<span id="cb1-29">  }</span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to factor to preserve order of argument values in animation</span></span>
<span id="cb1-31">  states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(states, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(states))</span>
<span id="cb1-32"></span>
<span id="cb1-33">  anim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(arg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> states) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create points on density curves</span></span>
<span id="cb1-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">den_points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(dots, density_mpg)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(den_points) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define animation</span></span>
<span id="cb1-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(arg))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-39">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default curve for reference</span></span>
<span id="cb1-40">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(</span>
<span id="cb1-41">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> default_density_curve,</span>
<span id="cb1-42">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-43">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey80"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span></span>
<span id="cb1-44">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-45">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Main curves for different argument values</span></span>
<span id="cb1-46">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-47">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition_states</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(arg)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-48">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(</span>
<span id="cb1-49">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density() with `{arg} = {previous_state}`"</span>,</span>
<span id="cb1-50">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grey line is default density() output"</span></span>
<span id="cb1-51">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-52">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-53">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>))</span>
<span id="cb1-54"></span>
<span id="cb1-55">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">animate</span>(anim, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">duration =</span> duration, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fps =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_pause =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_pause =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb1-56">}</span></code></pre></div>
</section>
<section id="estimation-parameters" class="level1">
<h1>Estimation parameters</h1>
<p>Arguments that define kernel density estimation procedure are: <code>bw</code>, <code>adjust</code>, <code>kernel</code>, and <code>weights</code>. There are also <code>window</code> and <code>width</code>, but they seem to be present only for backward compatibility and shouldn’t be used directly.</p>
<section id="bandwidth-bw" class="level2">
<h2 class="anchored" data-anchor-id="bandwidth-bw">Bandwidth <code>bw</code></h2>
<p>Argument <code>bw</code> is responsible for computing <a href="https://en.wikipedia.org/wiki/Kernel_density_estimation#Bandwidth_selection">bandwith</a> of kernel density estimation: one of the main parameters that greatly affect the output. It can be specified as either algorithm of computation or directly as number. Because actual bandwidth is computed as <code>adjust*bw</code> (<code>adjust</code> is another <code>density()</code> argument, which is explored in the next section), here we will see how different algorithms compute bandwidths, and the effect of changing numeric value of bandwidth will be shown in section about <code>adjust</code>.</p>
<p>There are 5 available algorithms: “nrd0”, “nrd”, “ucv”, “bcv”, “SJ”. Here is an animation of their effect:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_anim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bw =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nrd0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nrd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ucv"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcv"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SJ"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">duration =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density/arg_bw-1.gif" class="img-fluid"></p>
<p>As you can see, density curve changes, but not drastically. At least the whole shape seems to be somewhat preserved.</p>
</section>
<section id="adjusting-bandwidth-adjust" class="level2">
<h2 class="anchored" data-anchor-id="adjusting-bandwidth-adjust">Adjusting bandwidth <code>adjust</code></h2>
<p>To easily “specify values like ‘half the default’ bandwidth”, there is an argument <code>adjust</code>. Bigger values indicate greater bandwidth that is actually used. Zero results into zero bandwidth (so never should be used), one (default) - into originally computed by chosen algorithm.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_anim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">adjust =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>))</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density/arg_adjust-1.gif" class="img-fluid"></p>
<p>Changing <code>adjust</code> leads to very noticeable changes in output shape of density curve: bigger values give smoother curves.</p>
</section>
<section id="kernel-type-kernel" class="level2">
<h2 class="anchored" data-anchor-id="kernel-type-kernel">Kernel type <code>kernel</code></h2>
<p>Argument <code>kernel</code> defines the shape of kernel which will be used. There are 7 possible kernels in total which are shown in the following animation:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_anim</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kernel =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gaussian"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epanechnikov"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rectangular"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"triangular"</span>,</span>
<span id="cb4-3">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"biweight"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"optcosine"</span>),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">duration =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb4-5">)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density/arg_kernel-1.gif" class="img-fluid"></p>
<p>Choice of kernel function also considerably affects the output shape of density curve, but not as greatly as <code>adjust</code>. Most notable difference from default “gaussian” kernel is with “rectangular” kernel: result, unsurprisingly, is “more rectangular”.</p>
</section>
<section id="observation-importance-weights" class="level2">
<h2 class="anchored" data-anchor-id="observation-importance-weights">Observation importance <code>weights</code></h2>
<p>Argument <code>weights</code> should be used if some observations are considered to be “more important” and are “more reference” than the other ones. It should be a numeric vector with the same length as input sample <code>x</code>. <strong>Note</strong> that for output to be a true density plot, sum of <code>weights</code> should be 1.</p>
<p>To illustrate its effect, lets construct a sequence of <code>weights</code> each of which makes one observation having 10 times more weight than any other (that contribute equally). Order of those observations we will choose so that they progress from the smallest to the biggest.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">weights_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg), <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(i) {</span>
<span id="cb5-2">  res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i))</span>
<span id="cb5-3"></span>
<span id="cb5-4">  res <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(res)</span>
<span id="cb5-5">})</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_anim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> weights_list)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density/arg_weights-1.gif" class="img-fluid"></p>
<p>As expected from <code>weights_list</code> construction, one can see a “spike” that “travels” from left to right, indicating the position of “most important” observation.</p>
</section>
</section>
<section id="output-value-parameters" class="level1">
<h1>Output value parameters</h1>
<p>Arguments that define structure of output are: <code>n</code>, <code>from</code>, <code>to</code>, and <code>cut</code>. There are also <code>give.Rkern</code> (can be used to return computed “canonical bandwidth”) and <code>na.rm</code> (whether to remove <code>NA</code> values from input), which are not particularly useful in showing the nature of <code>density()</code> output.</p>
<section id="number-of-points-n" class="level2">
<h2 class="anchored" data-anchor-id="number-of-points-n">Number of points <code>n</code></h2>
<p><code>n</code> is responsible for number of returned x-y points. They are equally spaced on the specified range (see next sections). Default value is 512 (taken as a power of two for performance reasons of <a href="https://rdrr.io/r/stats/fft.html">fft()</a>), but to illustrate its effect on output lets use sequence from 2 to 50.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_anim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density/arg_n-1.gif" class="img-fluid"></p>
<p>As you can see, in this case values higher than 40 already give considerably small errors (compared to “true curve” when <code>n</code> is infinity). However, if the underlying curve isn’t that smooth (for example, in case of low <code>adjust</code>) it is a good idea to use more points with default 512 being enough for most practical situations.</p>
</section>
<section id="left-edge-from" class="level2">
<h2 class="anchored" data-anchor-id="left-edge-from">Left edge <code>from</code></h2>
<p>If specified, <code>from</code> defines a left edge of sequence of “x” points, at which density curve is evaluated. For illustration, lets use sequence from minimum to maximum values of <code>mtcars$mpg</code>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">from_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_anim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(from_vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density/arg_from-1.gif" class="img-fluid"></p>
<p>Note that when <code>from</code> is equal to the smallest value of input numeric vector, it is still greater than left edge of default density curve. For explanation of this “extending property” of default curve, see section about <code>cut</code>.</p>
</section>
<section id="right-edge-to" class="level2">
<h2 class="anchored" data-anchor-id="right-edge-to">Right edge <code>to</code></h2>
<p>Argument <code>to</code> has the same nature as <code>from</code>, but defines right edge of points.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">to_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(from_vec)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_anim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(to_vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density/arg_to-1.gif" class="img-fluid"></p>
<p>Note again, that value of <code>to</code> equal to maximum of input numeric vector is not enough to see the default behavior.</p>
</section>
<section id="range-extension-cut" class="level2">
<h2 class="anchored" data-anchor-id="range-extension-cut">Range extension <code>cut</code></h2>
<p>By default, sequence of <code>n</code> x-y points is computed as follows:</p>
<ul>
<li>Equally spaced grid of <code>n</code> “x” points is computed between <code>from</code> and <code>to</code> which by default are computed as being “<code>cut*bw</code> outside of <code>range(x)</code>”. In other words, default range is extended to left and right of <code>range(x)</code> by the amount of “canonical bandwidth” (computed by <code>bw</code> algorithm) multiplied by argument <code>cut</code> (default being 3).</li>
<li>“Y” points are taken from “true curve” of kernel density estimate.</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density_anim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cut =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>))</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density/arg_cut-1.gif" class="img-fluid"></p>
<p>When <code>cut</code> changes from 3 to 0, range of computed points shrinks from default one to range of input numeric vector. Default call to <code>density()</code> computes set of points outside of original range. I call this behavior an “extending property” of <code>density()</code>. <strong>Note</strong> that <code>cut</code> can also be negative, which means reduced input range.</p>
<p>So by default, <code>density()</code> extends range of input vector. The problem is that it can contradict natural constraints on input. For example, what if you want to estimate density for probability distribution of <em>value that can only be positive</em>? Dealing with boundary values during kernel density estimation is an important topic and it is called a boundary correction problem. One of possible solutions is to use <a href="https://echasnovski.github.io/pdqr/reference/form_resupport.html">form_resupport()</a> function from ‘pdqr’ package.</p>
</section>
</section>
<section id="epilogue" class="level1">
<h1>Epilogue</h1>
<ul>
<li><code>density()</code> provides reach possibilities for doing kernel density estimation, which should be carefully studied to use them wisely.</li>
<li>Using <a href="https://gganimate.com/">‘gganimate’</a> for creating animated illustrations is fun.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.6.1 (2019-07-05)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.2 LTS
##
## Matrix products: default
## BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
## LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base
##
## other attached packages:
##  [1] rlang_0.3.4     gganimate_1.0.3 forcats_0.4.0   stringr_1.4.0
##  [5] dplyr_0.8.1     purrr_0.3.2     readr_1.3.1     tidyr_0.8.3
##  [9] tibble_2.1.3    ggplot2_3.1.1   tidyverse_1.2.1
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_1.0.1         lubridate_1.7.4    lattice_0.20-38
##  [4] prettyunits_1.0.2  png_0.1-7          class_7.3-15
##  [7] assertthat_0.2.1   digest_0.6.19      R6_2.4.0
## [10] cellranger_1.1.0   plyr_1.8.4         backports_1.1.4
## [13] evaluate_0.14      e1071_1.7-2        httr_1.4.0
## [16] blogdown_0.12      pillar_1.4.1       progress_1.2.2
## [19] lazyeval_0.2.2     readxl_1.3.1       rstudioapi_0.10
## [22] gifski_0.8.6       rmarkdown_1.13     labeling_0.3
## [25] munsell_0.5.0      broom_0.5.2        compiler_3.6.1
## [28] modelr_0.1.4       xfun_0.7           pkgconfig_2.0.2
## [31] htmltools_0.3.6    tidyselect_0.2.5   lpSolve_5.6.13.2
## [34] bookdown_0.11      codetools_0.2-16   crayon_1.3.4
## [37] withr_2.1.2        sf_0.7-7           grid_3.6.1
## [40] nlme_3.1-140       jsonlite_1.6       gtable_0.3.0
## [43] DBI_1.0.0          magrittr_1.5       units_0.6-3
## [46] scales_1.0.0       KernSmooth_2.23-15 cli_1.1.0
## [49] stringi_1.4.3      farver_1.1.0       xml2_1.2.0
## [52] generics_0.0.2     transformr_0.1.1   tools_3.6.1
## [55] glue_1.3.1         tweenr_1.0.1       hms_0.4.2
## [58] yaml_2.2.0         colorspace_1.4-1   classInt_0.3-3
## [61] rvest_0.3.4        knitr_1.23         haven_2.1.0</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>pdqr</category>
  <guid>https://echasnovski.com/blog/2019-08-08-arguments-of-stats-density.html</guid>
  <pubDate>Mon, 05 Aug 2019 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Announcing pdqr</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2019-08-01-announcing-pdqr.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>I have been working on <a href="https://echasnovski.github.io/pdqr">‘pdqr’</a> package for quite some time now. Initially it was intended only for creating custom distribution functions (analogues of base “p”, “d”, “q”, and “r” functions) from numeric sample. However, after couple of breakthrough ideas, it also became a set of tools for transforming and summarizing distributions.</p>
<p>Now I would like to <strong>make it public with hope to get any feedback about the package</strong>: its general design, function and argument names, numerical issues, etc. Please, feel free to <a href="https://twitter.com/echasnovski">tweet</a> your thoughts (preferably with <em>#pdqr</em> hashtag). If you have any suggestions or found a bug, don’t hesitate to <a href="https://github.com/echasnovski/pdqr/issues">create an issue</a>.</p>
<p>This announcement post will be in form of a short cookbook for most common distribution problems, preceding with a little intro to package core structure. For more details go to these resources:</p>
<ul>
<li>Package <a href="https://echasnovski.github.io/pdqr/index.html">README</a> contains more thorough overview of package structure.</li>
<li><a href="https://echasnovski.github.io/pdqr/articles/">Vignettes</a> represent deeper dive into package’s main families of functions.</li>
</ul>
<p>We’ll need the following setup:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Currently can only be installed from Github</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pdqr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(magrittr)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make reproducible randomness</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span></code></pre></div>
</section>
<section id="package-overview" class="level1">
<h1>Package overview</h1>
<p>The main structure unit of the package is <strong>pdqr-function</strong>: an actual function which represents distribution with finite support and finite values of probability/density. Distributions with infinite support and/or density are approximated.</p>
<p>Two types of distributions are supported, which will be called <a href="https://echasnovski.github.io/pdqr/reference/meta.html#pdqr-type"><strong>pdqr types</strong></a>:</p>
<ul>
<li><strong>Type “discrete”</strong>: random variable has <em>finite number of output values</em>. Pdqr-function is explicitly defined by the collection of its values with their corresponding probabilities. Usually used when underlying distribution is discrete (even if in theory there are infinite number of output values).</li>
<li><strong>Type “continuous”</strong>: random variable has <em>infinite number of output values in the form of continuous random variable</em>. It is explicitly defined by piecewise-linear density function with finite support and values. Usually used when underlying distribution is continuous (even if in theory it has infinite support and/or density values).</li>
</ul>
<p>Pdqr-function can represent distribution in 4 different ways which resemble base R design. These ways are determined by its <a href="https://echasnovski.github.io/pdqr/reference/meta.html#pdqr-class"><strong>pdqr class</strong></a>:</p>
<ul>
<li><em>P-function</em> (pdqr-functions of class “p”) returns value of cumulative distribution function (probability of random variable being not more than certain value) at points <code>q</code> (its numeric vector input).</li>
<li><em>D-function</em> returns value of probability mass or density function (depending on pdqr type) at points <code>x</code> (its numeric vector input).</li>
<li><em>Q-function</em> returns value of quantile function at points <code>p</code> (its numeric vector input).</li>
<li><em>R-function</em> generates random sample of size <code>n</code> (its single number input) from distribution.</li>
</ul>
<p>Package ‘pdqr’ has the following main families of functions:</p>
<ul>
<li><a href="https://echasnovski.github.io/pdqr/reference/new-pdqr.html">new_*()</a> functions for creating pdqr-functions of specific class.</li>
<li><a href="https://echasnovski.github.io/pdqr/reference/as-pdqr.html">as_*()</a> functions for changing class of pdqr-functions.</li>
<li><a href="https://echasnovski.github.io/pdqr/reference/index.html#section-transform">form_*()</a> functions for transforming pdqr-functions and underlying distributions. Transformations also can be done with common base mathematical operations, like <code>+</code>, <code>*</code>, <code>exp</code>, <code>&gt;</code> etc.</li>
<li><a href="https://echasnovski.github.io/pdqr/reference/index.html#section-summarize">summ_*()</a> functions for summarizing distributions.
<ul>
<li><a href="https://echasnovski.github.io/pdqr/reference/index.html#section-regions">region_*()</a> functions to work with special type of summary called “region”.</li>
</ul></li>
</ul>
<p><strong>Note</strong> that implemented approaches often emphasize approximate and numerical solutions:</p>
<ul>
<li>All distributions assume <strong>finite support</strong> (output values are bounded from below and above) and <strong>finite values of density function</strong> (density function in case of “continuous” type can’t go to infinity).</li>
<li>Some methods implemented with <strong>simulation techniques</strong>.</li>
</ul>
</section>
<section id="custom-distributions" class="level1">
<h1>Custom distributions</h1>
<section id="estimate-distribution-from-sample" class="level2">
<h2 class="anchored" data-anchor-id="estimate-distribution-from-sample">Estimate distribution from sample</h2>
<p><strong>Problem</strong> Create a pdqr-function representing an estimation of sample’s distribution.</p>
<p><strong>Solution</strong> The most important decision here is about distribution’s type: discrete or continuous. In first case, any <code>new_*()</code> function will use unique values of sample as distribution’s outcomes, and probabilities will be estimated by tabulating and normalizing:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Any pdqr class can be used to represent distribution</span></span>
<span id="cb2-2">mpg_dis <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"discrete"</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pdqr-functions have `print()` methods with concise summary</span></span>
<span id="cb2-5">mpg_dis</span>
<span id="cb2-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Probability mass function of discrete type</span></span>
<span id="cb2-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Support: [10.4, 33.9] (25 elements)</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To visually inspect pdqr-function, use `plot()`</span></span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(mpg_dis)</span></code></pre></div>
<p>For continuous type, <a href="https://rdrr.io/r/stats/density.html">density()</a> function will be used to estimate distribution’s density (if sample has 2 or more elements). <strong>Note</strong> that arguments of <code>density()</code> will affect greatly the output distribution (as always with kernel density estimation).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">mpg_con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>)</span>
<span id="cb3-2">mpg_con</span>
<span id="cb3-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Density function of continuous type</span></span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Support: ~[2.96996, 41.33004] (511 intervals)</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(mpg_con)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-01-announcing-pdqr/new_discrete-1.png" class="img-fluid"></p>
<p>These newly created functions can be used to obtain probability or density of any point:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probabilities</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mpg_dis</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.0000 0.0625 0.0000 0.0000 0.0000 0.0000</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Density values</span></span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mpg_con</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.06469730 0.06040205 0.05394401 0.04591992 0.03759639 0.03029240</span></span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-01-announcing-pdqr/new_continuous-1.png" class="img-fluid"></p>
</section>
<section id="estimate-distribution-of-positive-values" class="level2">
<h2 class="anchored" data-anchor-id="estimate-distribution-of-positive-values">Estimate distribution of positive values</h2>
<p><strong>Problem</strong> Create a pdqr-function representing an estimation of sample’s distribution with assumption that it can produce only positive values.</p>
<p><strong>Solution</strong> This common task is done in two steps:</p>
<ul>
<li>Estimate sample distribution, as in previous step. It can result into unwanted distribution properties, like producing negative values. This is a known issue of boundary problem in kernel density estimation.</li>
<li>Modify distribution to have only positive support with <a href="https://echasnovski.github.io/pdqr/reference/form_resupport.html">form_resupport()</a>. It has several methods with default one (<code>"reflect"</code>) recommended to deal with boundary correction. It “reflects” density tails “inside” of a desired support interval. Its output for bounded distributions is usually a closer estimation of “true distribution”.</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exponential distribution can have only positive values</span></span>
<span id="cb5-2">exp_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rexp</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb5-3">d_exp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(exp_sample, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use `NA` to indicate that certain edge of support should remain unchanged</span></span>
<span id="cb5-6">d_exp_corr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_resupport</span>(d_exp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">support =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb5-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original kernel density estimation</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb5-9">  d_exp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Different estimations of exponential distribution"</span>,</span>
<span id="cb5-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-11">)</span>
<span id="cb5-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Corrected density</span></span>
<span id="cb5-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(d_exp_corr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb5-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reference distribution</span></span>
<span id="cb5-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dexp</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-01-announcing-pdqr/estimate-positive-1.png" class="img-fluid"></p>
</section>
<section id="generate-sample-similar-to-input" class="level2">
<h2 class="anchored" data-anchor-id="generate-sample-similar-to-input">Generate sample similar to input</h2>
<p><strong>Problem</strong> Generate sample of certain size from distribution that is an estimate to original sample’s distribution.</p>
<p><strong>Solution</strong> R-functions are used for generating samples. There are two ways of creating them:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create new r-function from sample</span></span>
<span id="cb6-2">r_mpg_dis <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_r</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"discrete"</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r_mpg_dis</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] 15.2 15.2 10.4 16.4 15.5 30.4 18.1 21.5 30.4 15.2</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert existing pdqr-function to be r-function</span></span>
<span id="cb6-7">r_mpg_con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_r</span>(mpg_con)</span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r_mpg_con</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] 18.68990 20.91834 20.22863 15.94346 15.12797 35.04418 12.48795</span></span>
<span id="cb6-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [8] 28.79146 15.24957 24.35035</span></span></code></pre></div>
</section>
</section>
<section id="common-distributions" class="level1">
<h1>Common distributions</h1>
<section id="compute-sum-of-random-variables" class="level2">
<h2 class="anchored" data-anchor-id="compute-sum-of-random-variables">Compute sum of random variables</h2>
<p><strong>Problem</strong> Compute pdqr-function representing sum of two independent random variables (for example, both being standard normal distributions).</p>
<p><strong>Solution</strong> First, you need to create pdqr-functions for random variables. Here standard normal distribution will be used. This can be done by converting base R distribution functions to be pdqr-functions. After that, using <code>+</code> gives distribution of sum of two random variables:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">(d_norm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_d</span>(dnorm))</span>
<span id="cb7-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Density function of continuous type</span></span>
<span id="cb7-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Support: ~[-4.75342, 4.75342] (10000 intervals)</span></span>
<span id="cb7-4">(d_norm_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> d_norm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d_norm)</span>
<span id="cb7-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Density function of continuous type</span></span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Support: ~[-5.69484, 6.37105] (511 intervals)</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(d_norm_sum, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sum of two standard normal distributions"</span>)</span>
<span id="cb7-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "True" sum of two independent normal random variables</span></span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_d</span>(dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-01-announcing-pdqr/sum-norm-1.png" class="img-fluid"></p>
<p>Here you can see two very important features of ‘pdqr’:</p>
<ul>
<li>Normal distribution is approximated with piecewise-linear density on finite support (10000 intervals are used by default).</li>
<li>Distribution of sum of random variables is computed with simulation: large samples are drawn from both distributions, sums of their values are computed (resulting in a sample from sum of random variables), and target distribution is created using one of <code>new_*()</code> functions.</li>
</ul>
</section>
<section id="compute-mixture" class="level2">
<h2 class="anchored" data-anchor-id="compute-mixture">Compute mixture</h2>
<p><strong>Problem</strong> Compute mixture of distributions with different weights.</p>
<p><strong>Solution</strong> Specifically for this task, there is a <a href="https://echasnovski.github.io/pdqr/reference/form_mix.html">form_mix()</a> function. It takes a list of pdqr-functions with, possibly, a vector of their weights in mixture:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">d_norm_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_d</span>(dnorm), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_d</span>(dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>))</span>
<span id="cb8-2">(d_norm_mix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_mix</span>(d_norm_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)))</span>
<span id="cb8-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Density function of continuous type</span></span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Support: ~[-4.75342, 6.3274] (20003 intervals)</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(d_norm_mix)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-01-announcing-pdqr/mixture-1.png" class="img-fluid"></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># As with other pdqr-functions, it can be used for obtaining values</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">d_norm_mix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>))</span>
<span id="cb9-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] 0.04839424 0.05793842 0.06664505 0.07365417 0.07822190 0.07983544</span></span>
<span id="cb9-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [7] 0.07836164 0.07411459 0.06792242 0.06120445 0.05609038</span></span></code></pre></div>
</section>
</section>
<section id="summaries" class="level1">
<h1>Summaries</h1>
<p>Usual workflow for computing summaries is as follows:</p>
<ul>
<li>Estimate all necessary distributions by creating pdqr-functions.</li>
<li>Make transformations appropriate for summary, which will result into one distribution.</li>
<li>Compute summary of distribution.</li>
</ul>
<p><strong>Notes</strong>:</p>
<ul>
<li>Although this approach is very flexible in terms of computed summaries, it doesn’t take care of possible bias when estimating from a sample.</li>
<li>When initially dealing with one distribution, this task can be conveniently written with <a href="https://magrittr.tidyverse.org/">magrittr</a>’s pipe operator <code>%&gt;%</code>.</li>
</ul>
<section id="compute-winsorized-sample-mean" class="level2">
<h2 class="anchored" data-anchor-id="compute-winsorized-sample-mean">Compute winsorized sample mean</h2>
<p><strong>Problem</strong> Compute 10% <a href="https://en.wikipedia.org/wiki/Winsorized_mean">winsorized sample mean</a>.</p>
<p><strong>Solution</strong> This can be done by purposefully separating task into three steps:</p>
<ul>
<li>Estimate sample distribution. It can have any type, depending on problem. Type “discrete” is better suited to emulate traditional sample estimates.</li>
<li>Transform distribution by winsorizing tails. There is a <a href="https://echasnovski.github.io/pdqr/reference/form_tails.html">form_tails()</a> functions, which takes pdqr-function and returns pdqr-function for distribution with modified tails (based on supplied method).</li>
<li>Compute mean of winsorized distribution. <strong>Note</strong> that in case of other statistic (like variance, skewness, etc.) no bias correction is done: output is a summary of distribution created on previous step(s).</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"discrete"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_tails</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"winsor"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">direction =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_mean</span>()</span>
<span id="cb10-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 20.19375</span></span></code></pre></div>
</section>
<section id="compute-mode" class="level2">
<h2 class="anchored" data-anchor-id="compute-mode">Compute mode</h2>
<p><strong>Problem</strong> Compute mode of distribution based on its sample.</p>
<p><strong>Solution</strong> Use <a href="https://echasnovski.github.io/pdqr/reference/summ_center.html">summ_mode()</a>:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using "continuous" type will smooth input to get mode of density curve.</span></span>
<span id="cb11-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With type "discrete" the most frequent input value is returned.</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_mode</span>()</span>
<span id="cb11-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 17.90862</span></span></code></pre></div>
</section>
<section id="compute-highest-density-region" class="level2">
<h2 class="anchored" data-anchor-id="compute-highest-density-region">Compute highest density region</h2>
<p><strong>Problem</strong> Compute 90% <a href="https://stats.stackexchange.com/a/148475">highest density region</a> (HDR) of a distribution.</p>
<p><strong>Solution</strong> There is a <a href="https://echasnovski.github.io/pdqr/reference/summ_hdr.html">summ_hdr()</a> function for this task. On a one dimensional line, HDR can only be a union of disjoint intervals. So the output of <code>summ_hdr()</code> is a <em>region</em> - data frame with rows representing different intervals of the union and two columns “left” and “right” for left and right ends of intervals.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">norm_mix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">form_mix</span>(</span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_d</span>(dnorm), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_d</span>(dnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)),</span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb12-4">)</span>
<span id="cb12-5">(norm_mix_hdr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_hdr</span>(norm_mix, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>))</span>
<span id="cb12-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        left    right</span></span>
<span id="cb12-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 -1.342624 1.348071</span></span>
<span id="cb12-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  3.119697 6.870090</span></span></code></pre></div>
<p>There is a <a href="https://echasnovski.github.io/pdqr/reference/region.html">region_*()</a> family of functions to work with regions. Here are several examples:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test if number is inside region</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">region_is_in</span>(norm_mix_hdr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb13-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] FALSE  TRUE FALSE FALSE</span></span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute region width (sum of widths of all disjoint intervals)</span></span>
<span id="cb13-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">region_width</span>(norm_mix_hdr)</span>
<span id="cb13-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 6.441087</span></span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw regions</span></span>
<span id="cb13-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(norm_mix)</span>
<span id="cb13-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">region_draw</span>(norm_mix_hdr)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2019-08-01-announcing-pdqr/regions-1.png" class="img-fluid"></p>
</section>
<section id="compute-separation-threshold" class="level2">
<h2 class="anchored" data-anchor-id="compute-separation-threshold">Compute separation threshold</h2>
<p><strong>Problem</strong> Compute a numerical threshold that optimally separates two distributions.</p>
<p><strong>Solution</strong> There is a <a href="https://echasnovski.github.io/pdqr/reference/summ_separation.html">summ_separation()</a> function designed specifically for this type of problem. It has several methods with default one being “KS” (short for “Kolmogorov-Smirnov”): optimal separation is done at point where two CDFs differ the most.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb14-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here "true optimal" is 1</span></span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_separation</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">g =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_d</span>(y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>))</span>
<span id="cb14-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.9763479</span></span></code></pre></div>
</section>
<section id="compute-probability-of-being-greater" class="level2">
<h2 class="anchored" data-anchor-id="compute-probability-of-being-greater">Compute probability of being greater</h2>
<p><strong>Problem</strong> Compute a probability that random draw from one distribution is greater than random draw from another distribution.</p>
<p><strong>Solution</strong> These type of summaries are usually done in two steps:</p>
<ul>
<li>Compute a <strong>boolean pdqr-function</strong> that represents a result of comparison between mentioned two random draws. It is a special kind of discrete distribution: it only has values 0 and 1 representing estimated relation being false and true respectively. Usually, they are the output of base R comparison operators: <a href="https://echasnovski.github.io/pdqr/reference/methods-group-generic.html#ops">&gt;, &lt;, ==</a>, etc.</li>
<li>Extract a probability of a relation being true.</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">d_norm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_d</span>(dnorm)</span>
<span id="cb15-2">d_unif <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_d</span>(dunif)</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The output of `&gt;` is a boolean pdqr-function. For convenience, printing</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># displays also a probability of 1, which is a probability of relation being</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># true. In this case, it should be read as "probability that random draw from</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first distribution is greater than a random draw from second one".</span></span>
<span id="cb15-8">(norm_geq_unif <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> d_norm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> d_unif)</span>
<span id="cb15-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Probability mass function of discrete type</span></span>
<span id="cb15-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Support: [0, 1] (2 elements, probability of 1: ~0.31563)</span></span>
<span id="cb15-11"></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract desired probability</span></span>
<span id="cb15-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_prob_true</span>(norm_geq_unif)</span>
<span id="cb15-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.3156265</span></span></code></pre></div>
</section>
<section id="compute-distance-between-distributions" class="level2">
<h2 class="anchored" data-anchor-id="compute-distance-between-distributions">Compute distance between distributions</h2>
<p><strong>Problem</strong> Compute distance between two distributions: positive value indicating “how far” two distributions are from each other. This is usually needed when comparing random outcomes of two (or more) options.</p>
<p><strong>Solution</strong> There is a <a href="https://echasnovski.github.io/pdqr/reference/summ_distance.html">summ_distance()</a> function with many methods.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default method is "KS" (short for "Kolmogorov-Smirnov"): the biggest</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># absolute difference between two CDFs</span></span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_distance</span>(d_norm, d_unif, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KS"</span>)</span>
<span id="cb16-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.5</span></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There is also "wass" method (short for "Wasserstein"): average path density</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># point should go while transforming from one into another</span></span>
<span id="cb16-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summ_distance</span>(d_norm, d_unif, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wass"</span>)</span>
<span id="cb16-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.7006094</span></span></code></pre></div>
</section>
</section>
<section id="epilogue" class="level1">
<h1>Epilogue</h1>
<ul>
<li>Package ‘pdqr’ provides many tools for working with custom distribution functions.</li>
<li>Consider using this package for solving your practical problems. Please feel free to share your feedback, ideas, and suggestions.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.6.1 (2019-07-05)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 18.04.2 LTS
##
## Matrix products: default
## BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
## LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base
##
## other attached packages:
## [1] magrittr_1.5    pdqr_0.1.0.9000
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_1.0.1      bookdown_0.11   crayon_1.3.4    digest_0.6.19
##  [5] evaluate_0.14   blogdown_0.12   pillar_1.4.1    rlang_0.3.4
##  [9] stringi_1.4.3   rmarkdown_1.13  tools_3.6.1     stringr_1.4.0
## [13] xfun_0.7        yaml_2.2.0      compiler_3.6.1  htmltools_0.3.6
## [17] knitr_1.23</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>pdqr</category>
  <guid>https://echasnovski.com/blog/2019-08-01-announcing-pdqr.html</guid>
  <pubDate>Wed, 31 Jul 2019 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Transformers, glue!</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2018-08-21-transformers-glue.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Package {<a href="https://glue.tidyverse.org/index.html">glue</a>} is designed as “small, fast, dependency free” tools to “glue strings to data in R”. To put simply, it provides concise and flexible alternatives for <code>paste()</code> with some additional features:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb1-2"></span>
<span id="cb1-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have"</span>, x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apples."</span>)</span>
<span id="cb1-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "I have 10 apples."</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have {x} apples."</span>)</span>
<span id="cb1-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## I have 10 apples.</span></span></code></pre></div>
<p>Recently, fate lead me to try using {glue} in a package. I was very pleased to how it makes code more readable, which I believe is a very important during package development. However, I stumbled upon this pretty unexpected behavior:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have"</span>, x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apples and"</span>, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oranges."</span>)</span>
<span id="cb2-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "I have 10 apples and  oranges."</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have {x} apples and {y} oranges."</span>))</span>
<span id="cb2-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Classes 'glue', 'character'  chr(0)</span></span></code></pre></div>
<p>If one of the expressions is evaluated into <code>NULL</code> then the output becomes empty string. This was unintuitive result and for a while I thought about stop using {glue} because <code>NULL</code> is expected to be a valid input. However, if <a href="https://github.com/jimhester">Jim Hester</a> is package author, you should expect some sort of designed solution to <em>any</em> problem. This time wasn’t an exception: there is a <a href="https://glue.tidyverse.org/articles/transformers.html">transformers</a> functionality.</p>
<p>Basically, transformer is a function that changes the output of R expressions the way you want. As I wanted to make <code>NULL</code> visible, this is a perfect way to do it.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>This post describes an easy way to create {glue} wrappers with custom transformers. It also lists some examples that can be helpful in common tasks:</p>
<ul>
<li><strong>Transformers</strong> uses a little bit of functional programming magic to create a potentially useful transformers.</li>
</ul>
<p>Setup is very simple this time:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># {glue} was loaded in examples</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For functional programming magic</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For string manipulation in one of the examples</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</section>
<section id="transformers" class="level1">
<h1>Transformers</h1>
<p>The task of creating wrapper for <code>glue()</code> essentially consists from two parts:</p>
<ul>
<li>Evaluate properly a supplied R expressions.</li>
<li>Modify them to show intended behavior.</li>
</ul>
<p>The <code>transforming_glue()</code> wrapper does exactly this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">transforming_glue <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(transformer) {</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.open =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.close =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"}"</span>,</span>
<span id="cb4-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.na =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>) {</span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(</span>
<span id="cb4-5">      ..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sep =</span> .sep, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.envir =</span> .envir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.open =</span> .open, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.close =</span> .close,</span>
<span id="cb4-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.na =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>,</span>
<span id="cb4-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.transformer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(transformer, identity_transformer)</span>
<span id="cb4-8">    )</span>
<span id="cb4-9">  }</span>
<span id="cb4-10">}</span></code></pre></div>
<p>Breakdown of this code:</p>
<ul>
<li>Input is a <code>transformer</code> - function that takes an already evaluated R object and modifies it the way you want.</li>
<li>Output is a function that is a wrapper for <code>glue()</code>. Its transformer is a function composition that first evaluates R expression with <code>identity_transformer</code> (function from {glue}) and then applies supplied <code>transformer</code>. Composition here is done with <a href="https://purrr.tidyverse.org/reference/compose.html">compose()</a> - an element of functional programming magic from {<a href="https://purrr.tidyverse.org/">purrr</a>}.</li>
</ul>
<section id="show-null" class="level2">
<h2 class="anchored" data-anchor-id="show-null">Show NULL</h2>
<p>Back to initial problem. We want <code>NULL</code> to be a valid R value for a <code>glue()</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">show_null <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">val =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NULL"</span>) {</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(x)) {</span>
<span id="cb5-3">    val</span>
<span id="cb5-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb5-5">    x</span>
<span id="cb5-6">  }</span>
<span id="cb5-7">}</span>
<span id="cb5-8"></span>
<span id="cb5-9">glue_null <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transforming_glue</span>(show_null)</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example from Prologue</span></span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue_null</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have {x} apples and {y} oranges."</span>)</span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## I have 10 apples and NULL oranges.</span></span></code></pre></div>
</section>
<section id="fixed-width-output" class="level2">
<h2 class="anchored" data-anchor-id="fixed-width-output">Fixed width output</h2>
<p>With {<a href="https://stringr.tidyverse.org/">stringr</a>} package you can force an output to be fixed width:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">str_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, width) {</span>
<span id="cb6-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> width) {</span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_trunc</span>(x, width, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>)</span>
<span id="cb6-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(x, width, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">side =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>)</span>
<span id="cb6-6">  }</span>
<span id="cb6-7">}</span>
<span id="cb6-8"></span>
<span id="cb6-9">glue_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transforming_glue</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(str_width, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb6-10"></span>
<span id="cb6-11">short_oh <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ooh!"</span></span>
<span id="cb6-12">long_oh <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oooooooooooh!"</span></span>
<span id="cb6-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue_width</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This puzzles ({short_oh}) and surprises ({long_oh}) me."</span>)</span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This puzzles (Ooh!      ) and surprises (Ooooooo...) me.</span></span></code></pre></div>
<p><strong>Note</strong> usage of <a href="https://purrr.tidyverse.org/reference/partial.html">partial()</a> here: it takes function along with its arguments’ values and modifies it by “pre-filling” those arguments.</p>
</section>
<section id="enclose-output" class="level2">
<h2 class="anchored" data-anchor-id="enclose-output">Enclose output</h2>
<p>In some situation you might want to explicitly show which strings represent R objects in the output. You can do that by enclosing the output in some sort of braces:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">enclose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;"</span>) {</span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(start, x, end)</span>
<span id="cb7-3">}</span>
<span id="cb7-4"></span>
<span id="cb7-5">glue_enclose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transforming_glue</span>(enclose)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue_enclose</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What if I had {x} oranges?"</span>)</span>
<span id="cb7-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## What if I had &lt;10&gt; oranges?</span></span></code></pre></div>
</section>
<section id="bizarro-encryption" class="level2">
<h2 class="anchored" data-anchor-id="bizarro-encryption">Bizarro encryption</h2>
<p>One possibly useful pattern is to encrypt the used data to prevent it from seeing by untrustworthy eyes. Here we will use simplified <code>bizarro()</code> example from <a href="https://www.youtube.com/watch?v=7oyiPBjLAWY">this insightful UseR 2018 talk</a> by the amazing <a href="https://github.com/jennybc">Jennifer (Jenny) Bryan</a>. Here <code>glue_bizarro()</code> “reverts” R objects based on their type.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">str_reverse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(</span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(z) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(z), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN.VALUE =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb8-6">  )</span>
<span id="cb8-7">}</span>
<span id="cb8-8"></span>
<span id="cb8-9">bizarro <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb8-10">  cls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb8-11"></span>
<span id="cb8-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span>(</span>
<span id="cb8-13">    cls,</span>
<span id="cb8-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">logical =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>x,</span>
<span id="cb8-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">integer =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x,</span>
<span id="cb8-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">numeric =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x,</span>
<span id="cb8-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">character =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_reverse</span>(x),</span>
<span id="cb8-18">    x</span>
<span id="cb8-19">  )</span>
<span id="cb8-20">}</span>
<span id="cb8-21"></span>
<span id="cb8-22">glue_bizarro <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transforming_glue</span>(bizarro)</span>
<span id="cb8-23"></span>
<span id="cb8-24">new_fruit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pomegranate"</span></span>
<span id="cb8-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue_bizarro</span>(</span>
<span id="cb8-26">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Then I might have {x + 10} apples. Is that {TRUE}?</span></span>
<span id="cb8-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   Maybe I want {new_fruit}?"</span></span>
<span id="cb8-28">)</span>
<span id="cb8-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Then I might have -20 apples. Is that FALSE?</span></span>
<span id="cb8-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Maybe I want etanargemop?</span></span></code></pre></div>
</section>
<section id="ultimate-example" class="level2">
<h2 class="anchored" data-anchor-id="ultimate-example">Ultimate example</h2>
<p>Using already familiar functional programming technique, we can create an ultimate <code>glue()</code> wrapper as a combination, or rather <code>compose()</code>-ition, of all previous examples. The most important part is supply them in correct order:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">glue_ultimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transforming_glue</span>(</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(</span>
<span id="cb9-3">    enclose,</span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(str_width, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To ensure that input of `str_width()` is character</span></span>
<span id="cb9-6">    as.character,</span>
<span id="cb9-7">    show_null,</span>
<span id="cb9-8">    bizarro</span>
<span id="cb9-9">  )</span>
<span id="cb9-10">)</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue_ultimate</span>(</span>
<span id="cb9-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have {x} apples and {y} oranges.</span></span>
<span id="cb9-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   This puzzles ({short_oh}) and surprises ({long_oh}) me.</span></span>
<span id="cb9-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   What if I had {x} oranges?</span></span>
<span id="cb9-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   Then I might have {x + 10} apples. Is that {TRUE}?</span></span>
<span id="cb9-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   Maybe I want {new_fruit}?"</span></span>
<span id="cb9-18">)</span>
<span id="cb9-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## I have &lt;-10       &gt; apples and &lt;NULL      &gt; oranges.</span></span>
<span id="cb9-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This puzzles (&lt;!hoO      &gt;) and surprises (&lt;!hooooo...&gt;) me.</span></span>
<span id="cb9-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## What if I had &lt;-10       &gt; oranges?</span></span>
<span id="cb9-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Then I might have &lt;-20       &gt; apples. Is that &lt;FALSE     &gt;?</span></span>
<span id="cb9-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Maybe I want &lt;etanarg...&gt;?</span></span></code></pre></div>
</section>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>Package {glue} is a very useful and flexible way of creating strings based on evaluation of R expressions.</li>
<li>Its “transformer” functionality is an interesting way to manipulate string output by supplying custom modification function.</li>
<li>Functional programming with {purrr} can be very helpful in creating concise and extensible code.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.4 (2018-03-15)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.5 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] stringr_1.3.1 purrr_0.2.5   glue_1.3.0
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.18     bookdown_0.7     crayon_1.3.4     digest_0.6.15
##  [5] rprojroot_1.3-2  backports_1.1.2  magrittr_1.5     evaluate_0.11
##  [9] blogdown_0.8     rlang_0.2.1.9000 stringi_1.2.4    rmarkdown_1.10
## [13] tools_3.4.4      xfun_0.3         yaml_2.2.0       compiler_3.4.4
## [17] htmltools_0.3.6  knitr_1.20</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>glue</category>
  <guid>https://echasnovski.com/blog/2018-08-21-transformers-glue.html</guid>
  <pubDate>Mon, 20 Aug 2018 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Elo and EloBeta models in snooker</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2018-07-03-elo-and-elobeta-models-in-snooker.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>For many years I’ve been following snooker as a sport. It has it all: hypnotic beauty of smart play, elegance of cue strikes and psychological tension of competition. The one thing I don’t like that much is its <em>ranking system</em>.</p>
<p>Generally speaking, <strong>current snooker ranking is based on player accomplishments in tournaments (events)</strong> with different “weights” for different tournaments. Long time ago, it just used World Championships. Then, after more events had emerged, there was a table of points player could earn for winning at certain stage of tournament. Now it has the form of “rolling” sum of prize money player won during (roughly) past two calendar years.</p>
<p>This system has two main advantages: it is <strong>simple</strong> (win more money -&gt; rise in rankings) and <strong>predictabile</strong> (want to get certain ranking -&gt; win certain amount of money, other things being equal). The problem is that <strong>this type of rankings doesn’t account the strength (skill, form) of player’s opponents</strong>. The usual counter-argument for this is that if player reached high stage of tournament then he/she is “strong” at this moment of time (“weak players don’t win tournaments”). Well, it does sound quite convincing. However, in snooker, as in any sport, the role of chance should be taken into account: if player is “weaker” it doesn’t mean that he can’t ever win in a match with “stronger” player. It means that this happens less often then the other way around. Here where <a href="https://en.wikipedia.org/wiki/Elo_rating_system">Elo model</a> comes into play.</p>
<p>The idea behind Elo model is that each player is associated with numerical rating. The assumption is that a result of a game between two players can be predicted based on difference of their ratings: more value indicates more probability of “stronger” (with higher rating) player to win. <strong>Elo ranking is based on current player “strength”</strong> derived by wins against other players. This eliminates main disadvantage of current official ranking system. It is also capable of updating player rating during tournament to numerically react to player’s strong tournament performance.</p>
<p>Having some practical experience with Elo ratings, I think it can do well in snooker too. However, there is one obstacle: <em>it is devised for competitions with uniform type of games</em>. Yes, there are some variations to account for <a href="https://medium.com/@mattbarger/soccer-elo-the-rebuild-df6b58bd8b94">home field advantage</a> in football or <a href="https://arxiv.org/pdf/1012.4571.pdf">first move advantage</a> in chess (both by adding fixed amount of rating points to “less advantageous” player). In snooker, however, matches are played in the “best of <img src="https://latex.codecogs.com/png.latex?N">” format: the first one to win <img src="https://latex.codecogs.com/png.latex?n%20=%20%5Cfrac%7BN%20+%201%7D%7B2%7D"> frames wins a match. We will also call this format “<img src="https://latex.codecogs.com/png.latex?n"> to win”.</p>
<p>Intuitively, winning a “10 to win” match (final of major tournament) should be harder for “weaker” player then “4 to win” match (first rounds of current Home Nations tournaments). This is taken into account by my proposed <strong>EloBeta model</strong>.</p>
<p>To celebrate actual start of 2018/19 snooker season I decided to write this post in which <strong>I explore adequacy of both Elo and EloBeta models on snooker match results</strong>. Note that the goal is not to build models for forecasting and gambling purposes but for assessing players “strength” and creating “fair” ranking.</p>
<p>The idea of using Elo rating in snooker is not new at all. There are works on this topic, for example:</p>
<ul>
<li><a href="http://www.snookeranalyst.com/current-ratings/rating-summary/">Snooker Analyst</a> provides “Elo inspired” (more like <a href="https://en.wikipedia.org/wiki/Bradley-Terry_model">Bradley–Terry model</a>) rating system based on the idea of updating rating based on difference between “actual frames won” and “expected frames won”. This approach is a little bit questionable. Surely, more frame difference should indicate more difference in strength, however, achieving that is not player’s goal. In snooker aim is “just” to win match, i.e.&nbsp;get certain amount of frame wins before the opponent.</li>
<li><a href="https://www.snookerisland.com/forum/viewtopic.php?f=59&amp;t=5585">This forum discussion</a> with implementation of basic Elo model.</li>
<li>Possibly, there are other works that I’ve missed. I will highly appreciate any information on this topic.</li>
</ul>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>This post is intended for both R users interested in Elo ratings and snooker analysts and fans. All experiments are written with intention to be reproducible. All code is hidden under spoilers (text appears after clicking on its summary, usually beginning with “Code for …”). It has commentaries and uses <a href="https://www.tidyverse.org/">tidyverse</a> packages, so it might be an interesting read for R users and programmers.</p>
<p>This post is organized as follows:</p>
<ul>
<li><strong>Models</strong> describes <em>Elo</em> and <em>EloBeta</em> models with their R implementations.</li>
<li><strong>Experiment</strong> describes details and intentions of computations: which <em>data</em> and <em>methodology</em> were used (and why) and what are the <em>results</em>.</li>
<li><strong>Exploration of EloBeta ratings</strong> has application results of EloBeta model to actual snooker data. This section is written more for Snooker fans than for R enthusiasts.</li>
</ul>
<p>We will need the following setup:</p>
<div class="callout callout-style-default callout-note callout-titled" title="Code for setup">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for setup
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data wrangling packages</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr))</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization package</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Package for ratings</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(comperank))</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>())</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shouldn't be needed. Added just in case.</span></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20180703</span>)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="models" class="level1">
<h1>Models</h1>
<p>Both models are based on the following assumptions:</p>
<ol type="1">
<li>There is a fixed set of players which should be ranked from “strongest” (first place) to “weakest” (last place).</li>
<li>Ranking is done by associating player <img src="https://latex.codecogs.com/png.latex?i"> with numerical rating <img src="https://latex.codecogs.com/png.latex?r_i">: a number indicating the “strength” of player (more value -&gt; “stronger”).</li>
<li>The more difference in player ratings before the match the less favorable is “weaker” player to win it.</li>
<li>Ratings are updated after every match based on its result and the ratings before it.</li>
<li>Winning against “stronger” opponent should lead to bigger increase in rating than winning against “weaker” opponent. The opposite should be true for losing.</li>
</ol>
<section id="elo" class="level2">
<h2 class="anchored" data-anchor-id="elo">Elo</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for Elo model">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for Elo model
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @details This function is vectorized by all its arguments. Also usage of</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' `...` is crucial to allow supplying unrelated arguments in the future.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A probability of player 1 (rating `rating1`) wins in a match with</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   player 2 (rating `rating2`). Here difference in ratings directly affects</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   the outcome.</span></span>
<span id="cb2-7">elo_win_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rating1, rating2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ksi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, ...) {</span>
<span id="cb2-8">  norm_rating_diff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (rating2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rating1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ksi</span>
<span id="cb2-9"></span>
<span id="cb2-10">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>norm_rating_diff)</span>
<span id="cb2-11">}</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A rating function for Elo model that can be supplied to</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `comperank::add_iterative_ratings()`.</span></span>
<span id="cb2-15">elo_fun_gen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(K, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ksi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>) {</span>
<span id="cb2-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rating1, score1, rating2, score2) {</span>
<span id="cb2-17">    comperank<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">elo</span>(rating1, score1, rating2, score2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">K =</span> K, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ksi =</span> ksi)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]</span>
<span id="cb2-18">  }</span>
<span id="cb2-19">}</span></code></pre></div>
</div>
</div>
</div>
<p>Elo model updates ratings by the following steps:</p>
<ul>
<li><p><strong>Compute probability</strong> (<em>before</em> the match) <strong>of certain player to win the match</strong>. Probability of one player (we will call him/her “first”) with “identifier” <img src="https://latex.codecogs.com/png.latex?i"> and rating <img src="https://latex.codecogs.com/png.latex?r_i"> winning against the other player (“second”) with “identifier” <img src="https://latex.codecogs.com/png.latex?j"> and rating <img src="https://latex.codecogs.com/png.latex?r_j"> is equal to</p>
<p><img src="https://latex.codecogs.com/png.latex?Pr(r_i%20,%20r_j)%20=%20%5Cfrac%7B1%7D%7B1%20+%2010%5E%7B(r_j%20-%20r_i)/400%7D%7D"></p>
<p>This way of computing probability is aligned with third model assumption.</p>
<p>Difference normalization by 400 is a mathematical way to say which difference is considered “big”. This can be replaced by a model parameter <img src="https://latex.codecogs.com/png.latex?%5Cxi">, however this only affects the spread of future ratings and is often an overkill. Number 400 is fairly standard in chess world.</p>
<p>In general approach probability is equal to <img src="https://latex.codecogs.com/png.latex?L(r_j%20-%20r_i)"> where <img src="https://latex.codecogs.com/png.latex?L(x)"> is some strictly increasing function with values from 0 to 1. We will use logistic curve to compute winning probability. More thorough study can be found in <a href="https://www.stat.berkeley.edu/~aldous/Papers/me-Elo-SS.pdf">this article</a>.</p></li>
<li><p><strong>Obtain match result</strong> <img src="https://latex.codecogs.com/png.latex?S">. In basic model it is 1 if first player wins (second player loses), 0.5 in case of draw and 0 if second player wins.</p></li>
<li><p><strong>Update ratings</strong>:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdelta%20=%20K%20%5Ccdot%20(S%20-%20Pr(r_i%20,%20r_j))">. This is the value by which ratings will change. It introduces the “K factor” (only model parameter). Less <img src="https://latex.codecogs.com/png.latex?K"> (ratings being equal) means less change in ratings - model is more conservative, i.e.&nbsp;more wins is needed to “prove” increase in “strength”. On the other hand, more <img src="https://latex.codecogs.com/png.latex?K"> means more “trust” to the current results than current ratings. <em>Choosing “optimal” <img src="https://latex.codecogs.com/png.latex?K"> is a way to produce “good” ranking system</em>.</li>
<li><img src="https://latex.codecogs.com/png.latex?r_i%5E%7B(new)%7D%20=%20r_i%20+%20%5Cdelta">, <img src="https://latex.codecogs.com/png.latex?r_j%5E%7B(new)%7D%20=%20r_j%20-%20%5Cdelta">.</li>
</ul></li>
</ul>
<p><strong>Notes</strong>:</p>
<ul>
<li>As one can see from rating update formulas, the sum of ratings for all ranked players doesn’t change over time: rating increase of one rating can be only done by taking this amount from another player.</li>
<li>Players without any matches played are associated with initial rating 0. The usual value is 1500, however I don’t see any other reason except psychological for this. With previous note, using 0 means that sum of all ratings will always be 0, which is kind of beautiful.</li>
<li>It is needed some matches to be played in order for rating to represent player’s “strength”. This introduces a problem: newly added players start with rating 0 which is almost surely not the lowest among current players. In other words, newcomers are considered to be “stronger” than some other players. This should be dealt with by external procedures of rating updates when introducing new player: maybe he/she should start with some low rating while compensating overall sum decrease by uniform increasing of other players’ ratings.</li>
<li>Why this procedure makes sense? In case of equal ratings <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> always equals <img src="https://latex.codecogs.com/png.latex?0.5%20%5Ccdot%20K">. Let’s say, for example, that <img src="https://latex.codecogs.com/png.latex?r_i%20=%200"> and <img src="https://latex.codecogs.com/png.latex?r_j%20=%20400">. It means that probability of first player winning is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B1%20+%2010%7D%20%5Capprox%200.0909">, i.e.&nbsp;he/she will win 1 out of 11 matches.
<ul>
<li>In case of win, he/she will be awarded with approximately <img src="https://latex.codecogs.com/png.latex?0.909%20%5Ccdot%20K"> increase, which is more than in case of equal ratings.</li>
<li>If he/she is defeated, then rating is decreased by approximately <img src="https://latex.codecogs.com/png.latex?0.0909%20%5Ccdot%20K">, which is less than in case of equal ratings.</li>
</ul>
This shows that Elo model is aligned with fifth model assumption: winning against “stronger” opponent leads to bigger increase in rating than winning against “weaker” opponent and vice versa.</li>
</ul>
<p>Of course, Elo model has its (fairly high-level) <a href="https://en.wikipedia.org/wiki/Elo_rating_system#Practical_issues">practical issues</a>. However, the most important for our research is that “it thinks” that all matches are played in uniform conditions. It means, that match length isn’t taken into account: winning in “4 to win” match is rewarded the same as winning in “10 to win” match. That is where EloBeta comes into play.</p>
</section>
<section id="elobeta" class="level2">
<h2 class="anchored" data-anchor-id="elobeta">EloBeta</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for EloBeta model">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for EloBeta model
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @details This function is vectorized by all its arguments.</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A probability of player 1 (rating `rating1`) wins in a match with</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   player 2 (rating `rating2`). Match is played until either player wins</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `frames_to_win` frames. Here difference in ratings directly affects</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   the probability of winning one frame.</span></span>
<span id="cb3-7">elobeta_win_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rating1, rating2, frames_to_win, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ksi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, ...) {</span>
<span id="cb3-8">  prob_frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">elo_win_prob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rating1 =</span> rating1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rating2 =</span> rating2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ksi =</span> ksi)</span>
<span id="cb3-9"></span>
<span id="cb3-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probability that first player wins `frames_to_win` frames sooner than second</span></span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># player based on probability of first player to win one frame `prob_frame`.</span></span>
<span id="cb3-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Frames are treated as independent games.</span></span>
<span id="cb3-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pbeta</span>(prob_frame, frames_to_win, frames_to_win)</span>
<span id="cb3-14">}</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return Match result in terms of player 1 win: 1 if he/she wins, 0.5 in case</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   of a draw, and 0 if he/she loses.</span></span>
<span id="cb3-18">get_match_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(score1, score2) {</span>
<span id="cb3-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There are no ties in snooker but this handles general case</span></span>
<span id="cb3-20">  near_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">near</span>(score1, score2)</span>
<span id="cb3-21"></span>
<span id="cb3-22">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(near_score, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(score1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> score2))</span>
<span id="cb3-23">}</span>
<span id="cb3-24"></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A rating function for EloBeta model that can be supplied to</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `comperank::add_iterative_ratings()`.</span></span>
<span id="cb3-27">elobeta_fun_gen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(K, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ksi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>) {</span>
<span id="cb3-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(rating1, score1, rating2, score2) {</span>
<span id="cb3-29">    prob_win <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">elobeta_win_prob</span>(</span>
<span id="cb3-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rating1 =</span> rating1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rating2 =</span> rating2,</span>
<span id="cb3-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frames_to_win =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmax</span>(score1, score2), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ksi =</span> ksi</span>
<span id="cb3-32">    )</span>
<span id="cb3-33"></span>
<span id="cb3-34">    match_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_match_result</span>(score1, score2)</span>
<span id="cb3-35">    delta <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> K <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (match_result <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prob_win)</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(rating1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> delta, rating2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> delta)</span>
<span id="cb3-38">  }</span>
<span id="cb3-39">}</span></code></pre></div>
</div>
</div>
</div>
<p>In Elo model difference in ratings directly affects the outcome probability of winning the whole match. The main idea behind EloBeta model is to <strong>make difference in ratings directly affect the outcome of one frame</strong> and <strong>actually compute the probability of a player winning <img src="https://latex.codecogs.com/png.latex?n"> frames before his opponent</strong>.</p>
<p>The question is: how to compute this probability? Turns out, this is one of the oldest task in the history of probability theory and has its own name - <a href="https://en.wikipedia.org/wiki/Problem_of_points">Problem of points</a>. Very nice description can be found in <a href="https://probabilityandstats.wordpress.com/2016/11/06/the-problem-of-points/">this post</a>. Using its notation, the outcome probability equals to:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP(n,%20n)%20=%20%5Csum%5Climits_%7Bj%20=%20n%7D%5E%7B2n-1%7D%7B%7B%7B2n-1%7D%20%5Cchoose%20%7Bj%7D%7D%20p%5Ej%20(1-p)%5E%7B2n-1-j%7D%7D%0A"></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?P(n,%20n)"> is a probability of first player to win in “<img src="https://latex.codecogs.com/png.latex?n"> to win” match; <img src="https://latex.codecogs.com/png.latex?p"> is his/her probability to win one frame (<img src="https://latex.codecogs.com/png.latex?1-p"> - opponents probability). With this approach one assumes that <strong>result of frames inside a match is independent one from another</strong>. This is arguable, but necessary assumption (in terms of this model).</p>
<p>Is there a way to compute this faster? It turns out, that the answer is yes. After hours of formula wrangling, practical experiments and internet search I found the following <a href="https://dlmf.nist.gov/8.17#E5">property</a> of <a href="https://en.wikipedia.org/wiki/Beta_function#Incomplete_beta_function">regularized incomplete beta function</a> <img src="https://latex.codecogs.com/png.latex?I_x(a,%20b)">. By substituting <img src="https://latex.codecogs.com/png.latex?m%20=%20k,~%20n%20=%202k%20-%201"> into that property and changing <img src="https://latex.codecogs.com/png.latex?k"> into <img src="https://latex.codecogs.com/png.latex?n"> we obtain that <img src="https://latex.codecogs.com/png.latex?P(n,%20n)%20=%20I_p(n,%20n)">.</p>
<p>This is also very good news for R users, because <img src="https://latex.codecogs.com/png.latex?I_p(n,%20n)"> can be computed as simply as <code>pbeta(p, n, n)</code>. <strong>Note</strong> that the general case probability of winning <img src="https://latex.codecogs.com/png.latex?n"> frames before opponent wins <img src="https://latex.codecogs.com/png.latex?m"> can also be computed as <img src="https://latex.codecogs.com/png.latex?I_p(n,%20m)"> and <code>pbeta(p, n, m)</code> respectively. This introduces the reach field of <em>updating winning probabilities during the mach</em>.</p>
<p>So the procedure of updating ratings within EloBeta model is as follows (given ratings <img src="https://latex.codecogs.com/png.latex?r_i,%20r_j">, number of frames <img src="https://latex.codecogs.com/png.latex?n"> to win in match and match outcome <img src="https://latex.codecogs.com/png.latex?S">, as in Elo model):</p>
<ul>
<li><strong>Compute probability of first player to win the frame</strong>: <img src="https://latex.codecogs.com/png.latex?p%20=%20Pr(r_i%20,%20r_j)%20=%20%5Cfrac%7B1%7D%7B1%20+%2010%5E%7B(r_j%20-%20r_i)/400%7D%7D">.</li>
<li><strong>Compute probability of this player to win the match</strong>: <img src="https://latex.codecogs.com/png.latex?Pr%5E%7BBeta%7D(r_i,%20r_j)%20=%20I_p(n,%20n)">. For example, if <img src="https://latex.codecogs.com/png.latex?p"> equals 0.4 then probability to win “4 to win” match drops to <code>r round(pbeta(0.4, 4, 4), 2)</code> and with “18 to win” to <code>r round(pbeta(0.4, 18, 18), 2)</code>.</li>
<li><strong>Update ratings</strong>:
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdelta%20=%20K%20%5Ccdot%20(S%20-%20Pr%5E%7BBeta%7D(r_i%20,%20r_j))">.</li>
<li><img src="https://latex.codecogs.com/png.latex?r_i%5E%7B(new)%7D%20=%20r_i%20+%20%5Cdelta">, <img src="https://latex.codecogs.com/png.latex?r_j%5E%7B(new)%7D%20=%20r_j%20-%20%5Cdelta">.</li>
</ul></li>
</ul>
<p><strong>Note</strong> that, as difference in ratings affects probability of winning one frame (not the whole match), we should expect lower optimal <img src="https://latex.codecogs.com/png.latex?K">: part of <img src="https://latex.codecogs.com/png.latex?%5Cdelta">’s value comes from amplifying effect of <img src="https://latex.codecogs.com/png.latex?Pr%5E%7BBeta%7D(r_i,%20r_j)">.</p>
<p>The idea of computation match result based on probability of winning one frame is not very novel. On <a href="https://wismuth.com/elo/calculator.html">this site</a>, authored by François Labelle, you can find online computation of probability of winning a “best of <img src="https://latex.codecogs.com/png.latex?N">” match (with some other functionality). I was very glad to notice that results of our computations match. However, I didn’t find any sources of incorporating this into Elo updating procedure. I will highly appreciate any information on this topic.</p>
<p>I’ve only managed to found <a href="http://freerangestats.info/blog/2015/08/07/fibs-elo-ratings-basics">this post</a> and <a href="http://www.bkgm.com/articles/McCool/ratings.html">this description</a> of Elo system on backgammon internet server (FIBS). Here different matches are handled by multiplying rating difference by square root of match length. However, there seems to be no strong theoretical reason for this.</p>
</section>
</section>
<section id="experiment" class="level1">
<h1>Experiment</h1>
<p>The experiment has several goals. Based on snooker data:</p>
<ul>
<li>Derive best value of “K factor” for both models.</li>
<li>Study stability of models in terms of prediction probability accuracy.</li>
<li>Study the effect of using “invitational” events on ratings.</li>
<li>Produce “best” rating history of all professional players from 2017/18 season.</li>
</ul>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for data creation">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for data creation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to split cases between "train", "validation", and "test" types</span></span>
<span id="cb4-2">split_cases <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">props =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)) {</span>
<span id="cb4-3">  breaks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(props, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(props)</span>
<span id="cb4-4">  id_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">findInterval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n), breaks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">left.open =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-5"></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>)[id_vec]</span>
<span id="cb4-7">}</span>
<span id="cb4-8"></span>
<span id="cb4-9">pro_players <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> snooker_players <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(status <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pro"</span>)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matches only between pro players.</span></span>
<span id="cb4-12">pro_matches_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> snooker_matches <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using actually happened matches</span></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>walkover1, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>walkover2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter matches only between pro players</span></span>
<span id="cb4-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">semi_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pro_players, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player1Id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">semi_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pro_players, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player2Id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add 'season' column</span></span>
<span id="cb4-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(</span>
<span id="cb4-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> snooker_events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, season), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eventId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb4-21">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure arranging by end date</span></span>
<span id="cb4-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(endDate) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare for widecr format</span></span>
<span id="cb4-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb4-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()),</span>
<span id="cb4-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player1 =</span> player1Id, score1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player2 =</span> player2Id, score2,</span>
<span id="cb4-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">matchId =</span> id, endDate, eventId, season,</span>
<span id="cb4-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute match type ("train", "validation", or "test") with 50/25/25 split</span></span>
<span id="cb4-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">matchType =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_cases</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span>
<span id="cb4-31">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to widecr format</span></span>
<span id="cb4-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_widecr</span>()</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matches only between pro players in not invitational events (which by</span></span>
<span id="cb4-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># quantity is dominated by Championship League).</span></span>
<span id="cb4-37">pro_matches_off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_all <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(</span>
<span id="cb4-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> snooker_events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invitational"</span>),</span>
<span id="cb4-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eventId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb4-41">  )</span>
<span id="cb4-42"></span>
<span id="cb4-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split confirmation</span></span>
<span id="cb4-44">get_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(matchType) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">share =</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n))</span>
<span id="cb4-45"></span>
<span id="cb4-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This should give 50/25/25 split (train/validation/test).</span></span>
<span id="cb4-47">pro_matches_all <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_split</span>()</span>
<span id="cb4-48"></span>
<span id="cb4-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This gives different split because invitational events aren't spread evenly</span></span>
<span id="cb4-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># during season. However, this way matches are split based on the same</span></span>
<span id="cb4-51">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># __time__ breaks as in `pro_matches_all`. This ensures that matches with same</span></span>
<span id="cb4-52">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># type represent identical __time periods__.</span></span>
<span id="cb4-53">pro_matches_off <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_split</span>()</span>
<span id="cb4-54"></span>
<span id="cb4-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grid for K factor</span></span>
<span id="cb4-56">k_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">tot_n_players <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_all <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_longcr</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>(player) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>()</span>
<span id="cb5-5"></span>
<span id="cb5-6">get_mean_nmatches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_longcr</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(player) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">meanMatches =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(meanMatches) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-11"></span>
<span id="cb5-12">all_matches_per_player <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_mean_nmatches</span>(pro_matches_all)</span>
<span id="cb5-13">off_matches_per_player <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_mean_nmatches</span>(pro_matches_off)</span>
<span id="cb5-14"></span>
<span id="cb5-15">pro_matches_off_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_off <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_split</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(matchType, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">share =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(share <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-18">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deframe</span>()</span>
<span id="cb5-19"></span>
<span id="cb5-20">off_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_off_split[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span></code></pre></div>
</div>
</div>
</div>
<p>We will use snooker data from <a href="https://echasnovski.github.io/comperank/reference/index.html#section-snooker-data">comperank</a> package. The original source is <a href="http://www.snooker.org/">snooker.org</a> site. Results are taken from the following matches:</p>
<ul>
<li>Match is <strong>from 2016/17 or 2017/18 seasons</strong>.</li>
<li>Match is a <strong>part of “professional” snooker event</strong>. That is:
<ul>
<li>It has “Invitational”, “Qualifying”, or “Ranking” type. We will also differ two sets of matches: “all matches” (from all these events) and “official matches” (not from invitational events). There are two main reasons behind it:
<ul>
<li>In invitational events not all players are given opportunity to change their ratings (which isn’t a clearly bad thing under Elo and EloBeta models).</li>
<li>Belief that players “take seriously” only official ranking events. <strong>Note</strong> that most of “Invitational” events are from “Championship League” which, I think, are treated by most players as practice with opportunity to win money, i.e.&nbsp;“not very seriously”. Their presence can affect outcome ratings.</li>
</ul>
Besides “Championship League”, other invitational events are: “2016 China Championship”, both “Champion of Champions”, both “Masters”, “2017 Hong Kong Masters”, “2017 World games”, “2017 Romanian Masters”.</li>
<li>It describes traditional snooker (not 6 Red or Power Snooker) between individual players (not teams).</li>
<li>Both genders can take part (not only men or women).</li>
<li>Players of all ages can take part (not only seniors or under 21).</li>
<li>It is not “Shoot-Out” as those events are treated differently in snooker.org database.</li>
</ul></li>
<li>Match <strong>actually happened</strong>: its result is due to actual play from both players.</li>
<li>Match <strong>is between two professionals</strong> (pros). List of professionals is taken as for 2017/18 season (<code>r tot_n_players</code> players). This seems like the most controversial decision, as removing “pro-ama” (“ama” for “amateur”) and “ama-ama” matches leads to “closing eyes” on pros’ losses to amateurs, and thus giving unfair advantage to those pros. I think this choice is necessary to ensure absence of <a href="https://en.wikipedia.org/wiki/Elo_rating_system#Ratings_inflation_and_deflation">rating inflation</a> which will happen if matches with amateurs are taken into account. Another possibility would be to study pros and amas together, but this seems unreasonable to me within this research. Professional’s loss to amateur is treated as loss of opportunity to increase rating.</li>
</ul>
<p>The final numbers of used matches are <code>r nrow(pro_matches_all)</code> for “all matches” and <code>r nrow(pro_matches_off)</code> for “official matches” (<code>r all_matches_per_player</code> and <code>r off_matches_per_player</code> matches per player respectively).</p>
</section>
<section id="methodology" class="level2">
<h2 class="anchored" data-anchor-id="methodology">Methodology</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for methodology functions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for methodology functions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param matches A `longcr` or `widecr` object with column `matchType` (with</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   type of match for the experiment: "train", "validation", or "test").</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param test_type A type of match to be used for computing goodness of fit.</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   For experiment correctness, all matches with this type should happen later</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   than all other ("warm-up") matches. This means having bigger values in</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `game` column.</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param k_vec Vector of "K factor" values to compute goodness of fit.</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param rate_fun_gen Function that, given "K factor" value, returns rating</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   function that can be supplied to `comperank::add_iterative_ratings()`.</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param get_win_prob Function to compute rating probability based on</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   ratings of players (`rating1`, `rating2`) and number of frames needed to</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   win in a match (`frames_to_win`). __Note__ that it should be vectorized by</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   all its arguments.</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param initial_ratings Initial ratings in format ready for</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   `comperank::add_iterative_ratings()`.</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @details This function computes:</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - History of iterative ratings after arranging `matches` by `game` column.</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - For matches with type equals to `test_type`:</span></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'     - Probability of player 1 winning.</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'     - Match result in terms of player 1 win: 1 if he/she wins, 0.5 in case of</span></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'     a draw, and 0 if he/she loses.</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - Goodness of fit in the form of RMSE: square root of mean square error,</span></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' where "error" is difference between predicted probability and match result.</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A tibble with columns 'k' for "K factor" and 'goodness' for RMSE</span></span>
<span id="cb6-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   goodness of fit.</span></span>
<span id="cb6-28">compute_goodness <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(matches, test_type, k_vec, rate_fun_gen,</span>
<span id="cb6-29">                             get_win_prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_ratings =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb6-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(k_vec, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(cur_k) {</span>
<span id="cb6-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Track execution</span></span>
<span id="cb6-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(cur_k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb6-34">    matches <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-35">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(game) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-36">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_iterative_ratings</span>(</span>
<span id="cb6-37">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rate_fun =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rate_fun_gen</span>(cur_k), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_ratings =</span> initial_ratings</span>
<span id="cb6-38">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-39">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> matches <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(game, matchType), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-40">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(matchType <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> test_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-41">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb6-42">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of frames needed to win in a match</span></span>
<span id="cb6-43">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">framesToWin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmax</span>(score1, score2),</span>
<span id="cb6-44">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probability of player 1 winning a match with `frame_to_win` frames</span></span>
<span id="cb6-45">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># needed to win.</span></span>
<span id="cb6-46">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">winProb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_win_prob</span>(</span>
<span id="cb6-47">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rating1 =</span> rating1Before, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rating2 =</span> rating2Before,</span>
<span id="cb6-48">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frames_to_win =</span> framesToWin</span>
<span id="cb6-49">          ),</span>
<span id="cb6-50">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">result =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_match_result</span>(score1, score2),</span>
<span id="cb6-51">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">squareError =</span> (result <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> winProb)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-52">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-53">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">goodness =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(squareError)))</span>
<span id="cb6-54">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-55">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> k_vec) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-56">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(k, goodness)</span>
<span id="cb6-57">}</span>
<span id="cb6-58"></span>
<span id="cb6-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' A wrapper for `compute_goodness()` to be used with design matrix data.</span></span>
<span id="cb6-60">compute_goodness_wrap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(matches_name, test_type, k_vec,</span>
<span id="cb6-61">                                  rate_fun_gen_name, win_prob_fun_name,</span>
<span id="cb6-62">                                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_ratings =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb6-63">  matches_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(matches_name)</span>
<span id="cb6-64">  rate_fun_gen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(rate_fun_gen_name)</span>
<span id="cb6-65">  get_win_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(win_prob_fun_name)</span>
<span id="cb6-66"></span>
<span id="cb6-67">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_goodness</span>(</span>
<span id="cb6-68">    matches_tbl, test_type, k_vec, rate_fun_gen, get_win_prob, initial_ratings</span>
<span id="cb6-69">  )</span>
<span id="cb6-70">}</span>
<span id="cb6-71"></span>
<span id="cb6-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Function to perform experiment.</span></span>
<span id="cb6-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param test_type Vector of values for `test_type` for `compute_goodness()`.</span></span>
<span id="cb6-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param rating_type Names of rating models.</span></span>
<span id="cb6-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param data_type Suffixes of data types.</span></span>
<span id="cb6-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param k_vec,initial_ratings Values for `compute_goodnes()`</span></span>
<span id="cb6-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @details This function generates design matrix and computes multiple values</span></span>
<span id="cb6-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' of goodness of fit for different combinations of rating and data types. For</span></span>
<span id="cb6-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' this to work, variables with the following combinations of names should be</span></span>
<span id="cb6-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' created in the global environment:</span></span>
<span id="cb6-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - "pro_matches_" + `&lt;test type&gt;` + `&lt;data type&gt;` for matches data.</span></span>
<span id="cb6-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - `&lt;rating type&gt;` + "_fun_gen" for rating function generators.</span></span>
<span id="cb6-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - `&lt;rating type&gt;` + "_win_prob" for functions that compute win probability.</span></span>
<span id="cb6-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb6-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A tibble with columns:</span></span>
<span id="cb6-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - __testType__ &lt;chr&gt; : Test type identifier.</span></span>
<span id="cb6-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - __ratingType__ &lt;chr&gt; : Rating type identifier.</span></span>
<span id="cb6-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - __dataType__ &lt;chr&gt; : Data type identifier.</span></span>
<span id="cb6-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - __k__ &lt;dbl/int&gt; : Value of "K factor".</span></span>
<span id="cb6-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' - __goodness__ &lt;dbl&gt; : Value of goodness of fit.</span></span>
<span id="cb6-93">do_experiment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>),</span>
<span id="cb6-94">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rating_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elobeta"</span>),</span>
<span id="cb6-95">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>),</span>
<span id="cb6-96">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k_vec =</span> k_grid,</span>
<span id="cb6-97">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_ratings =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb6-98">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crossing</span>(</span>
<span id="cb6-99">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">testType =</span> test_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ratingType =</span> rating_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataType =</span> data_type</span>
<span id="cb6-100">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-101">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb6-102">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataName =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pro_matches_"</span>, testType, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, dataType),</span>
<span id="cb6-103">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kVec =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(k_vec), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()),</span>
<span id="cb6-104">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rateFunGenName =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(ratingType, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_fun_gen"</span>),</span>
<span id="cb6-105">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">winProbFunName =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(ratingType, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_win_prob"</span>),</span>
<span id="cb6-106">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialRatings =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(initial_ratings), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()),</span>
<span id="cb6-107">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">experimentData =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(</span>
<span id="cb6-108">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(dataName, testType, kVec,</span>
<span id="cb6-109">             rateFunGenName, winProbFunName, initialRatings),</span>
<span id="cb6-110">        compute_goodness_wrap</span>
<span id="cb6-111">      )</span>
<span id="cb6-112">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-113">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(experimentData) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-114">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(testType, ratingType, dataType, k, goodness)</span>
<span id="cb6-115">}</span></code></pre></div>
</div>
</div>
</div>
<p>To find “optimal” value of <img src="https://latex.codecogs.com/png.latex?K"> we will use the even grid <img src="https://latex.codecogs.com/png.latex?K%20=%201,%202,%20...,%20100">. Accounting for greater values seems to be unreasonable which is confirmed by the experiment. The following procedure is used to find it:</p>
<ul>
<li>For every <img src="https://latex.codecogs.com/png.latex?K">:
<ul>
<li><strong>Compute history of iterative ratings</strong> of certain model based on certain data set. It means that ratings of players would be known before every match. This is done with <a href="https://echasnovski.github.io/comperank/reference/iterative.html">add_iterative_ratings()</a> function from <code>comperank</code> package. This procedure corresponds to “live ratings” which update after every match.</li>
<li>Based on data, starting from a certain (distant from the beginning) moment in time, <strong>compute goodness of model fit</strong>. We will use <a href="https://en.wikipedia.org/wiki/Root-mean-square_deviation">RMSE</a> between probability of first player to win (computed based on model) and match result. That is <img src="https://latex.codecogs.com/png.latex?RMSE%20=%20%5Csqrt%7B%5Cfrac%7B1%7D%7B%7CT%7C%7D%20%5Csum%5Climits_%7Bt%20%5Cin%20T%7D%7B(S_t%20-%20P_t)%5E2%7D%7D">, where <img src="https://latex.codecogs.com/png.latex?T"> - indices of used matches, <img src="https://latex.codecogs.com/png.latex?%7CT%7C"> - number of used matches, <img src="https://latex.codecogs.com/png.latex?S_t"> - result of match for first player, <img src="https://latex.codecogs.com/png.latex?P_t"> - probability of first player to win the match (computed based on model). Not including matches from the beginning of data is needed for ratings to “catch up” to “current strength” from initial ratings.</li>
</ul></li>
<li>The value of <img src="https://latex.codecogs.com/png.latex?K"> with <strong>stable minimal RMSE</strong> is said to be optimal. Here by “stable” we mean that small RMSE values is present in some neighborhood of optimal <img src="https://latex.codecogs.com/png.latex?K"> (will be controlled not very strictly by looking at graphs). Values of RMSE lower 0.5 (value for “model” with constant 0.5 probability) will be considered a success.</li>
</ul>
<p>As one of the goals is to study stability of models, data will be split into three subsets: “train”, “validation” and “test”. They are ordered in time, i.e.&nbsp;any “train”/“validation” match has ending time earlier than any “validation”/“test” match. I decided to do actual split in 50/25/25 proportion for “all matches”. Split of “official matches” is done by removing from “all matches” invitational events. It gives split not totally in desired proportion, but rather <code>r off_split</code>. However, this approach ensures that matches with same type in both match data represent identical <strong>time periods</strong>.</p>
<p>Experiment will be performed for all combinations of the following variables:</p>
<ul>
<li><strong>Type of model</strong>: Elo and EloBeta.</li>
<li><strong>Type of match data</strong>: “All matches” and “official matches”.</li>
<li><strong>Experiment type</strong>: “Validation” (“validation” matches are used for computing RMSE after “warming up” on “train” matches) and “Test” (“test” matches are used after “warming up” on both “train” and “validation” ones).</li>
</ul>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for doing experiment">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for doing experiment
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">pro_matches_validation_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_all <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(matchType <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>)</span>
<span id="cb7-2">pro_matches_validation_off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_off <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(matchType <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>)</span>
<span id="cb7-3">pro_matches_test_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_all</span>
<span id="cb7-4">pro_matches_test_off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_off</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Takes some time to run</span></span>
<span id="cb8-2">experiment_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do_experiment</span>()</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Code for producing results of experiment">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for producing results of experiment
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">experiment_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(</span>
<span id="cb9-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2018-07-03-elo-and-elobeta-models-in-snooker_results.rds"</span></span>
<span id="cb9-3">)</span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cap_first <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb10-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substring</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substring</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb10-3">}</span>
<span id="cb10-4"></span>
<span id="cb10-5">plot_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> experiment_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unite</span>(group, ratingType, dataType) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb10-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">testType =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cap_first</span>(testType),</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">groupName =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recode</span>(</span>
<span id="cb10-10">      group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">elo_all =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elo, all matches"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">elo_off =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elo, official matches"</span>,</span>
<span id="cb10-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">elobeta_all =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EloBeta, all matches"</span>,</span>
<span id="cb10-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">elobeta_off =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EloBeta, official matches"</span></span>
<span id="cb10-13">    ),</span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure preferred order. This is needed because sorting of strings will</span></span>
<span id="cb10-15">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># give "Elo, all matches", "EloBeta, all matches", "EloBeta, official</span></span>
<span id="cb10-16">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matches", and "Elo, official matches" as, apperently, non-letters are</span></span>
<span id="cb10-17">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignored while sorting.</span></span>
<span id="cb10-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">groupName =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(groupName, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(groupName))</span>
<span id="cb10-19">  )</span>
<span id="cb10-20"></span>
<span id="cb10-21">compute_optimal_k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(testType, groupName) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which.min</span>(goodness)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb10-24">compute_k_labels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_optimal_k</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"K = "</span>, k)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(groupName) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If optimal K within future facet is on the right, it needs a little</span></span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># adjustment to the right. If on the left - full and a little adjustment to</span></span>
<span id="cb10-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the left.</span></span>
<span id="cb10-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(k)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb10-32"></span>
<span id="cb10-33">plot_experiment_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(results_tbl) {</span>
<span id="cb10-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(results_tbl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(</span>
<span id="cb10-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#AA5555"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span></span>
<span id="cb10-37">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(k, goodness, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> testType)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(</span>
<span id="cb10-40">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> compute_optimal_k,</span>
<span id="cb10-41">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> k, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> testType),</span>
<span id="cb10-42">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb10-43">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb10-45">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> compute_k_labels,</span>
<span id="cb10-46">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(k, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> label, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> hjust),</span>
<span id="cb10-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span></span>
<span id="cb10-48">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-49">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> groupName) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-50">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_manual</span>(</span>
<span id="cb10-51">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Validation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#377EB8"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Test =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FF7F00"</span>),</span>
<span id="cb10-52">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(</span>
<span id="cb10-53">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Experiment"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reverse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb10-54">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb10-55">      )</span>
<span id="cb10-56">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-57">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb10-58">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"K factor"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Goodness of fit (RMSE)"</span>,</span>
<span id="cb10-59">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Best goodness of fit of Elo and EloBeta models are almost equal"</span>,</span>
<span id="cb10-60">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb10-61">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Using official matches (without invitational events) gives more '</span>,</span>
<span id="cb10-62">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stable results.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb10-63">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'All optimal K values from test experiment (with longer "warm up") are'</span>,</span>
<span id="cb10-64">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' lower than from validation experiment.'</span></span>
<span id="cb10-65">      )</span>
<span id="cb10-66">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-67">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb10-68">}</span>
<span id="cb10-69"></span>
<span id="cb10-70"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_experiment_results</span>(plot_data)</span></code></pre></div>
</div>
</div>
</div>
<p><img src="https://echasnovski.com/blog/2018-07-03-elo-and-elobeta-models-in-snooker/experiment-results.png" class="img-fluid"></p>
<p>From the experiment we can make the following conclusions:</p>
<ul>
<li>As it was expected, optimal <img src="https://latex.codecogs.com/png.latex?K"> values for EloBeta are lower than for Elo.</li>
<li>Using official matches (without invitational events) gives more stable results (“Validation” and “Test” results differ less). This shouldn’t be considered as a point that professionals take invitational events not seriously. Probably, this is due to quality of match results from “Championship League”: it has rather unpredictable “3 to win” format and tight schedule.</li>
<li>Change in RMSE for optimal <img src="https://latex.codecogs.com/png.latex?K"> is not substantial. That is, RMSE didn’t change drastically after computing optimal <img src="https://latex.codecogs.com/png.latex?K"> in “Validation” and applying it in “Test” experiment. Moreover, on “official matches” it even decreased.</li>
<li>All optimal K values from test experiment (with longer “warm up”) are lower than from validation experiment. This may be <em>the result</em> of longer “warm up” or <em>just a feature</em> of particular data.</li>
<li>Best goodness of Elo and EloBeta fits are almost the same. Both are stable and below 0.5. Data for “official matches” (as they demonstrate stable behavior) is presented below. As results don’t differ that much, we will round optimal <img src="https://latex.codecogs.com/png.latex?K"> to a factor of 5: for Elo model it is 30 and for EloBeta - 10.</li>
</ul>
<!-- ```{r model-performance, echo = FALSE, results = "asis"} -->
<!-- plot_data %>% -->
<!--   compute_optimal_k() %>% -->
<!--   filter(testType == "Test") %>% -->
<!--   transmute(Group = groupName, `Optimal K` = k, RMSE = round(goodness, 3)) %>% -->
<!--   knitr::kable() %>% -->
<!--   kableExtra::kable_styling( -->
<!--     bootstrap_options = c("striped", "hover"), -->
<!--     full_width = FALSE -->
<!--   ) -->
<!-- ``` -->
<table class="caption-top table">
<thead>
<tr class="header">
<th>Group</th>
<th>Optimal K</th>
<th>RMSE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Elo, all matches</td>
<td>24</td>
<td>0.465</td>
</tr>
<tr class="even">
<td>Elo, official matches</td>
<td>29</td>
<td>0.455</td>
</tr>
<tr class="odd">
<td>EloBeta, all matches</td>
<td>10</td>
<td>0.462</td>
</tr>
<tr class="even">
<td>EloBeta, official matches</td>
<td>11</td>
<td>0.453</td>
</tr>
</tbody>
</table>
<p>Based on these results, I am inclined to conclude that <strong>Elo model with <img src="https://latex.codecogs.com/png.latex?K%20=%2030"> and EloBeta model with <img src="https://latex.codecogs.com/png.latex?K%20=%2010"> can be usefully applied to officially ranked snooker matches</strong>. However, EloBeta model accounts for different “<img src="https://latex.codecogs.com/png.latex?n"> to win” matches, so it should be preferred over Elo.</p>
</section>
</section>
<section id="exploration-of-elobeta-ratings" class="level1">
<h1>Exploration of EloBeta ratings</h1>
<p>The following results are computed based on “official matches” with EloBeta model (<img src="https://latex.codecogs.com/png.latex?K%20=%2010">). All possible conclusions shouldn’t be viewed as personal to any player.</p>
<section id="top-16-by-the-end-of-201718" class="level2">
<h2 class="anchored" data-anchor-id="top-16-by-the-end-of-201718">Top 16 by the end of 2017/18</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for 2017/18 top 16">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for 2017/18 top 16
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helper function</span></span>
<span id="cb11-2">gather_to_longcr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(tbl) {</span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb11-4">    tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename_all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, .))),</span>
<span id="cb11-5">    tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename_all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, .)))</span>
<span id="cb11-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(game)</span>
<span id="cb11-8">}</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract best "K factor" value</span></span>
<span id="cb11-11">best_k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> experiment_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(testType <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, ratingType <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elobeta"</span>, dataType <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which.min</span>(goodness)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(k)</span>
<span id="cb11-15"></span>
<span id="cb11-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!!! Round to "pretty" number as it doesn't affect result that much!!!</span></span>
<span id="cb11-17">best_k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(best_k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute ratings at the end of the data</span></span>
<span id="cb11-20">elobeta_ratings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rate_iterative</span>(</span>
<span id="cb11-21">  pro_matches_test_off, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">elobeta_fun_gen</span>(best_k), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_ratings =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-22">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ratingEloBeta =</span> rating_iterative) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(ratingEloBeta)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(</span>
<span id="cb11-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> snooker_players <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">playerName =</span> name), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>)</span>
<span id="cb11-27">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rankEloBeta =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(ratingEloBeta, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(player, playerName, ratingEloBeta, rankEloBeta)</span>
<span id="cb11-30"></span>
<span id="cb11-31">elobeta_top16 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> elobeta_ratings <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(rankEloBeta <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb11-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rankChr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formatC</span>(rankEloBeta, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">flag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>),</span>
<span id="cb11-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ratingEloBeta =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(ratingEloBeta, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-36">  )</span></code></pre></div>
</div>
</div>
</div>
<p>Top 16 by EloBeta model at the end of 2017/18 season looks like this (official data is also taken from snooker.org site):</p>
<!-- ```r -->
<!-- official_ratings <- tibble( -->
<!--   player = c( -->
<!--          5,      1,    237,      17,     12,     16,    224,     30, -->
<!--         68,    154,     97,      39,     85,      2,    202,   1260 -->
<!--   ), -->
<!--   rankOff = c( -->
<!--          2,      3,      4,       1,      5,      7,      6,     13, -->
<!--         16,     10,      8,       9,     26,     17,     12,     23 -->
<!--   ), -->
<!--   ratingOff = c( -->
<!--     905750, 878750, 751525, 1315275, 660250, 543225, 590525, 324587, -->
<!--     303862, 356125, 453875,  416250, 180862, 291025, 332450, 215125 -->
<!--   ) -->
<!-- ) -->
<!---->
<!-- first_top16_player <- elobeta_top16 %>% slice(1) -->
<!-- last_top16_player <- elobeta_top16 %>% slice(n()) -->
<!---->
<!-- example_prob <- function(n) { -->
<!--   elobeta_win_prob( -->
<!--     rating1 = last_top16_player$ratingEloBeta[1], -->
<!--     rating2 = first_top16_player$ratingEloBeta[1], -->
<!--     frames_to_win = n -->
<!--   ) %>% -->
<!--     round(digits = 3) -->
<!-- } -->
<!---->
<!-- elobeta_top16 %>% -->
<!--   left_join(y = official_ratings, by = "player") %>% -->
<!--   mutate(rankDiff = rankOff - rankEloBeta) %>% -->
<!--   transmute( -->
<!--     Player = playerName, -->
<!--     `EloBeta rank` = rankEloBeta, `EloBeta rating` = ratingEloBeta, -->
<!--     `Official rank` = rankOff, `Official rating` = ratingOff, -->
<!--     `EloBeta rank increase` = text_spec( -->
<!--       rankDiff, format = "html", color = case_when( -->
<!--         rankDiff < 0 ~ "red", -->
<!--         rankDiff == 0 ~ "grey", -->
<!--         rankDiff > 0 ~ "green" -->
<!--       ) -->
<!--     ) -->
<!--   ) %>% -->
<!--   knitr::kable( -->
<!--     escape = FALSE, format.args = list(big.mark = " "), -->
<!--     align = c("l", "c", "r", "c", "r", "c"), -->
<!--     table.attr = "style = 'width:85%;'" -->
<!--   ) %>% -->
<!--   kableExtra::kable_styling( -->
<!--     bootstrap_options = c("striped", "hover") -->
<!--   ) %>% -->
<!--   kableExtra::column_spec(1, width = "30%") %>% -->
<!--   kableExtra::column_spec(c(2, 4), width = "10%") %>% -->
<!--   kableExtra::column_spec(3, width = "15%") %>% -->
<!--   kableExtra::column_spec(5, width = "17%") %>% -->
<!--   kableExtra::column_spec(c(1, 3, 5), border_right = TRUE) %>% -->
<!--   kableExtra::column_spec(c(2, 4, 6), bold = TRUE) -->
<!-- ``` -->
<table class="caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 13%">
<col style="width: 15%">
<col style="width: 14%">
<col style="width: 16%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th>Player</th>
<th>EloBeta rank</th>
<th>EloBeta rating</th>
<th>Official rank</th>
<th>Official rating</th>
<th>EloBeta rank increase</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Ronnie O’Sullivan</td>
<td>1</td>
<td>128.8</td>
<td>2</td>
<td>905 750</td>
<td>1</td>
</tr>
<tr class="even">
<td>Mark J Williams</td>
<td>2</td>
<td>123.4</td>
<td>3</td>
<td>878 750</td>
<td>1</td>
</tr>
<tr class="odd">
<td>John Higgins</td>
<td>3</td>
<td>112.5</td>
<td>4</td>
<td>751 525</td>
<td>1</td>
</tr>
<tr class="even">
<td>Mark Selby</td>
<td>4</td>
<td>102.4</td>
<td>1</td>
<td>1 315 275</td>
<td>-3</td>
</tr>
<tr class="odd">
<td>Judd Trump</td>
<td>5</td>
<td>92.2</td>
<td>5</td>
<td>660 250</td>
<td>0</td>
</tr>
<tr class="even">
<td>Barry Hawkins</td>
<td>6</td>
<td>83.1</td>
<td>7</td>
<td>543 225</td>
<td>1</td>
</tr>
<tr class="odd">
<td>Ding Junhui</td>
<td>7</td>
<td>82.8</td>
<td>6</td>
<td>590 525</td>
<td>-1</td>
</tr>
<tr class="even">
<td>Stuart Bingham</td>
<td>8</td>
<td>74.3</td>
<td>13</td>
<td>324 587</td>
<td>5</td>
</tr>
<tr class="odd">
<td>Ryan Day</td>
<td>9</td>
<td>71.9</td>
<td>16</td>
<td>303 862</td>
<td>7</td>
</tr>
<tr class="even">
<td>Neil Robertson</td>
<td>10</td>
<td>70.6</td>
<td>10</td>
<td>356 125</td>
<td>0</td>
</tr>
<tr class="odd">
<td>Shaun Murphy</td>
<td>11</td>
<td>70.1</td>
<td>8</td>
<td>453 875</td>
<td>-3</td>
</tr>
<tr class="even">
<td>Kyren Wilson</td>
<td>12</td>
<td>70.1</td>
<td>9</td>
<td>416 250</td>
<td>-3</td>
</tr>
<tr class="odd">
<td>Jack Lisowski</td>
<td>13</td>
<td>68.8</td>
<td>26</td>
<td>180 862</td>
<td>13</td>
</tr>
<tr class="even">
<td>Stephen Maguire</td>
<td>14</td>
<td>63.7</td>
<td>17</td>
<td>291 025</td>
<td>3</td>
</tr>
<tr class="odd">
<td>Mark Allen</td>
<td>15</td>
<td>63.7</td>
<td>12</td>
<td>332 450</td>
<td>-3</td>
</tr>
<tr class="even">
<td>Yan Bingtao</td>
<td>16</td>
<td>61.6</td>
<td>23</td>
<td>215 125</td>
<td>7</td>
</tr>
</tbody>
</table>
<p>Some observations:</p>
<ul>
<li>Current official #1 Mark Selby is ranked 3 places lower in EloBeta. This might be a sign that current distribution of prize money doesn’t quite reflect efforts needed to win them (on average).</li>
<li>Most “underrated” players according to official ranking are Jack Lisowski (astonishing 13 place difference), Ryan Day and Yan Bingtao (both have 7 place difference).</li>
<li>Stuart Bingham is ranked 5 positions higher by EloBeta probably because he didn’t play for six month due to WPBSA ban. His EloBeta rating didn’t change during this period but in official rating he lost points because of its “rolling” nature. This case demonstrates one important differences between two approaches: official system is good to account for “not playing” and EloBeta is good to account for “playing”.</li>
<li>Judd Trump and Neil Robertson are ranked the same under both methods.</li>
<li>With EloBeta model Allister Carter (officially ranked #11), Anthony McGill (#14) and Luca Brecel (#15) are not in top 16. Instead, Jack Lisowski (#26), Yan Bingtao (#23) and Stephen Maguire (#17) are in.</li>
</ul>
<p>Here is an <strong>example of predictions Based on EloBeta model</strong>. The probability of 16-th player (<code>r last_top16_player$playerName[1]</code>) win one frame in a match against first player (<code>r first_top16_player$playerName[1]</code>) equals to <code>r example_prob(1)</code>. In “4 to win” match it drops to <code>r example_prob(4)</code>, in “10 to win” - <code>r example_prob(10)</code> and in World Championship final “18 to win” - <code>r example_prob(18)</code>. In my opinion, these numbers might be close to reality.</p>
</section>
<section id="collective-evolution-of-elobeta-ratings" class="level2">
<h2 class="anchored" data-anchor-id="collective-evolution-of-elobeta-ratings">Collective evolution of EloBeta ratings</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for rating evolution">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for rating evolution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helper data</span></span>
<span id="cb12-2">seasons_break <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ISOdatetime</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTC"</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute evolution of ratings</span></span>
<span id="cb12-5">elobeta_history <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pro_matches_test_off <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_iterative_ratings</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">elobeta_fun_gen</span>(best_k), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initial_ratings =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gather_to_longcr</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pro_matches_test_off <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(game, endDate), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game"</span>)</span>
<span id="cb12-9"></span>
<span id="cb12-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate plot</span></span>
<span id="cb12-11">plot_all_elobeta_history <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(history_tbl) {</span>
<span id="cb12-12">  history_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">isTop16 =</span> player <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> elobeta_top16<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>player) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(endDate, ratingAfter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> player)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_step</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>isTop16), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#C2DF9A"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_step</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isTop16), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#22A01C"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#AAAAAA"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(</span>
<span id="cb12-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> seasons_break, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span>,</span>
<span id="cb12-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E41A1C"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-21">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-22">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb12-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> seasons_break, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End of 2016/17"</span>,</span>
<span id="cb12-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E41A1C"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span></span>
<span id="cb12-25">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-26">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_datetime</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-27">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb12-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EloBeta rating"</span>,</span>
<span id="cb12-29">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb12-30">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Most of current top 16 established at the end of 2016/17 season"</span></span>
<span id="cb12-31">        ),</span>
<span id="cb12-32">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb12-33">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Winning of event is well noticable as rapid increase without "</span>,</span>
<span id="cb12-34">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"descrease at the end."</span></span>
<span id="cb12-35">        )</span>
<span id="cb12-36">      ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-37">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>))</span>
<span id="cb12-38">}</span>
<span id="cb12-39"></span>
<span id="cb12-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_all_elobeta_history</span>(elobeta_history)</span></code></pre></div>
</div>
</div>
</div>
<p><img src="https://echasnovski.com/blog/2018-07-03-elo-and-elobeta-models-in-snooker/rating-evolution_all.png" class="img-fluid"></p>
</section>
<section id="evolution-of-elobeta-top-16" class="level2">
<h2 class="anchored" data-anchor-id="evolution-of-elobeta-top-16">Evolution of EloBeta top 16</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for rating evolution of top 16">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for rating evolution of top 16
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute plot data</span></span>
<span id="cb13-2">top16_rating_evolution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> elobeta_history <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using `inner_join` to leave only players from `elobeta_top16`</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> elobeta_top16 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>ratingEloBeta), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Leave games only from 2017/18 season</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">semi_join</span>(</span>
<span id="cb13-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pro_matches_test_off <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(season <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"game"</span></span>
<span id="cb13-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">playerLabel =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(rankChr, playerName))</span>
<span id="cb13-10"></span>
<span id="cb13-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate plot</span></span>
<span id="cb13-12">plot_top16_elobeta_history <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(elobeta_history) {</span>
<span id="cb13-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(elobeta_history) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_step</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(endDate, ratingAfter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> player), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#22A01C"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#AAAAAA"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rug</span>(</span>
<span id="cb13-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> elobeta_top16,</span>
<span id="cb13-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> ratingEloBeta), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sides =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span></span>
<span id="cb13-19">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> playerLabel, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_datetime</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb13-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EloBeta rating"</span>,</span>
<span id="cb13-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rating evolution for EloBeta top 16 (as of 2017/18 end)"</span>,</span>
<span id="cb13-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb13-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ronnie O'Sullivan and Mark J Williams did very well in 2017/18 "</span>,</span>
<span id="cb13-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"season.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb13-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"As did Jack Lisowski: rise from negative rating to place 13."</span></span>
<span id="cb13-29">      )</span>
<span id="cb13-30">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span>
<span id="cb13-32">}</span>
<span id="cb13-33"></span>
<span id="cb13-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_top16_elobeta_history</span>(top16_rating_evolution)</span></code></pre></div>
</div>
</div>
</div>
<p><img src="https://echasnovski.com/blog/2018-07-03-elo-and-elobeta-models-in-snooker/rating-evolution_top16.png" class="img-fluid"></p>
</section>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>Solving “Problem of points” in R is as easy as <code>pbeta(p, n, m)</code>.</li>
<li>EloBeta model is a modification of Elo for “best of <img src="https://latex.codecogs.com/png.latex?N">” (or “<img src="https://latex.codecogs.com/png.latex?n"> to win”) matches. It can make predictions for different match length.</li>
<li>Elo model with <img src="https://latex.codecogs.com/png.latex?K%20=%2030"> and EloBeta model with <img src="https://latex.codecogs.com/png.latex?K%20=%2010"> can be usefully applied to officially ranked snooker matches.</li>
<li>Snooker related:
<ul>
<li>Most “underrated” players from EloBeta top 16 according to official ranking (as of end of 2017/18 season) are Jack Lisowski, Ryan Day and Yan Bingtao.</li>
<li>Season 2017/18 was very productive for Ronnie O’Sullivan, Mark J Williams and Jack Lisowski.</li>
</ul></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.2 (2017-09-28)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] bindrcpp_0.2 ruler_0.1.0  purrr_0.2.4  dplyr_0.7.4
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.13     knitr_1.17       bindr_0.1        magrittr_1.5
##  [5] tidyselect_0.2.3 R6_2.2.2         rlang_0.1.4      stringr_1.2.0
##  [9] tools_3.4.2      htmltools_0.3.6  yaml_2.1.14      rprojroot_1.2
## [13] digest_0.6.12    assertthat_0.2.0 tibble_1.3.4     bookdown_0.5
## [17] tidyr_0.7.2      glue_1.2.0       evaluate_0.10.1  rmarkdown_1.7
## [21] blogdown_0.2     stringi_1.1.5    compiler_3.4.2   keyholder_0.1.1
## [25] backports_1.1.1  pkgconfig_2.0.1</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>snooker</category>
  <category>comperank</category>
  <category>elobeta</category>
  <guid>https://echasnovski.com/blog/2018-07-03-elo-and-elobeta-models-in-snooker.html</guid>
  <pubDate>Mon, 02 Jul 2018 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Animating mode variability with tidyverse and tweenr</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Not so long time ago I encountered the following task: given several groups of samples (one group - several samples from one distribution) make a visual presentation of <a href="https://en.wikipedia.org/wiki/Mode_(statistics)#Mode_of_a_sample">sample mode</a> variability in different groups (how sample mode changes between different samples). I decided to do this by animating these distributions with respect to their mode. The whole process can be summarised as follows:</p>
<ul>
<li><strong>For every sample</strong>:
<ul>
<li><strong>Count its values</strong>. Sample values are considered to a certain degree of precision, e.g.&nbsp;to the third digit, so talking about “counting values” has reasonable background.</li>
<li><strong>Divide counts by maximum count</strong>. The output is named “mode share distribution” (made up term, didn’t find any present one). For every unique value in sample the outcome is a number between 0 (value is totally absent) and 1 (value is a strict mode). Here value is considered to be “mode” if its “mode share” is above some threshold, say 0.9. For strict thresholds 1 is used.</li>
</ul></li>
<li>For every set of group samples (first samples within groups, second samples, and so on) <strong>plot their “mode share distribution”</strong>. This is done by plotting several “mode share distributions” at once, in non-overlapping <a href="https://cran.r-project.org/web/packages/ggridges/index.html">ridgeline-like</a> fashion.</li>
<li><strong>Animate between plots</strong>. This simultaneously shows a mode variability in different groups. As just changing pictures didn’t seem like a challenge, I decided to make smooth transitions between plots. Packages <a href="https://cran.r-project.org/web/packages/tweenr/tweenr.pdf">tweenr</a> (CRAN version) and <a href="https://github.com/dgrtwo/gganimate">gganimate</a> (original one by David Robinson, not a <a href="https://twitter.com/thomasp85/status/1004068316611260416">soon-to-be-revolutional one</a> by Thomas Lin Pedersen) provide core functionality for this.</li>
</ul>
<p>Methods I ended up using (some of them were discovered during solving this task) contain surprisingly many subtle <em>base R</em> and <em>tidyverse</em> tricks. This motivated me to write a post about my solution. It heavily uses core <a href="https://www.tidyverse.org/">tidyverse</a> packages.</p>
<p>For educational purposes, I will slightly change the task: <strong>provided different probability distributions (by random generation R functions like <code>rnorm</code>), animate independent sample distributions to demonstrate mode variability</strong>.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>The main point of this post is to provide a thorough code description with some highlighted tips and tricks. Considering this, the most information will be provided in code comments with some tricks described in text. I can see that provided solutions might be slightly overcomplicated but they seem to demonstrate stable behavior. <strong>Please note</strong> that this post, probably, won’t be that helpful for beginners in R, and some confident knowledge of R and tidyverse tools is needed.</p>
<p>Most of the code will be hidden under spoilers (text which appears after clicking on its summary, usually beginning with “Code for …”) to shrink initial post size, but I really encourage you to read them. However, only looking at plots and animations is, of course, completely fine :) They are considered to be a valuable by-product.</p>
<p>This post is organized as follows:</p>
<ul>
<li><strong>Data generation</strong> describes the process of creating new samples from given random generators.</li>
<li><strong>Static plots</strong> describes the format of plotting data and a process of building a plot. There are also some example plots.</li>
<li><strong>Animation</strong> describes the logic behind transition between different plots and the process of creating animations. There are also some example animations.</li>
<li><strong>Bonus accidental art</strong> has an example of “accidental art” which was produced unintentionally but has an interesting look.</li>
<li><strong>Conclusion</strong> lists some lessons learned and some of my favorite tricks from this post.</li>
</ul>
<p>We will need the following setup:</p>
<div class="callout callout-style-default callout-note callout-titled" title="Code for setup">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for setup
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Used tidyverse packages</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr))</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using current CRAN version 0.1.5</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tweenr)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using current github 'dgrtwo/gganimate' version 0.1.0.9000 (commit bf82002)</span></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gganimate)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>())</span>
<span id="cb1-14"></span>
<span id="cb1-15">animation<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ani.options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interval =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important step for reproducibility</span></span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20180614</span>)</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data about distributions of interest and sample size</span></span>
<span id="cb1-21">r_funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using `purrr::partial()` to create functions that expect only `n` argument</span></span>
<span id="cb1-23">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runif"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(runif),</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rnorm"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(rnorm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>),</span>
<span id="cb1-25">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rbeta"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(rbeta, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-26">)</span>
<span id="cb1-27">n_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="data-generation" class="level1">
<h1>Data generation</h1>
<div class="callout callout-style-default callout-note callout-titled" title="Code for data generation">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for data generation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate data by sampling from different distributions</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note that all elements of `r_fun_list` should have names, which will be used</span></span>
<span id="cb2-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as distribution names.</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elements of `r_fun_list` should be functions which take only one argument `n`</span></span>
<span id="cb2-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for a sample size to be generated. Use `purrr::partial` to create those.</span></span>
<span id="cb2-6">generate_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(r_fun_list, n_sample) {</span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(</span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(r_fun_list), r_fun_list, n_sample),</span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Interestingly, due to implementation of anonymous formula functions, you</span></span>
<span id="cb2-10">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># can't use `..i` placeholders if they represent functions to be called.</span></span>
<span id="cb2-11">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distr =</span> .x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.y</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> ..<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb2-12">  )</span>
<span id="cb2-13">}</span></code></pre></div>
</div>
</div>
</div>
<p>Considering future parallel animation, I decided to organize data “per plot”. That is: one <a href="http://tibble.tidyverse.org/">tibble</a> contains information about one sample for every distribution and multiple samples should be stored in list. Function <code>generate_data()</code> creates one tibble, which in combination with <code>purrr::rerun()</code> can create a list of grouped samples. <strong>Note</strong> that, for reasonable results, numbers in <code>value</code> columns should be rounded.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">sample_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rerun</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_data</span>(r_funs, n_sample))</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One set of samples for examples</span></span>
<span id="cb3-4">distr_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample_data[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(value, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb3-5">distr_data</span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3,000 x 2</span></span>
<span id="cb3-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   distr value</span></span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt; &lt;dbl&gt;</span></span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 runif  0.46</span></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 runif  0.51</span></span>
<span id="cb3-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 runif  0.47</span></span>
<span id="cb3-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 runif  0.47</span></span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 runif  0.4</span></span>
<span id="cb3-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 2,995 more rows</span></span></code></pre></div>
<p>Tips and tricks:</p>
<ul>
<li><em><code>purrr::pmap_dfr()</code> helps create a data frame output after iterating in parallel over multiple vectors</em>. As all <code>purrr</code> mappers, function can be concisely described in formula fashion addressing arguments with <code>..1</code>, <code>..2</code> and so on. However, due to internal logic of <code>purrr</code>, using <code>..i</code> notation is impossible if it is meant as function to be applied. Fortunately, instead of <code>..1</code> one can use <code>.x</code> or <code>.</code> and instead of <code>..2</code> - <code>.y</code>, which works.</li>
</ul>
</section>
<section id="static-plots" class="level1">
<h1>Static plots</h1>
<p>The general idea is to <strong>transform initial tibble into tibble with columns describing future plot</strong> which, essentially, will be <strong>sets (per distribution) of vertical segments</strong>. In this way, modifying pipeline from static plotting into smooth animation will be a matter of creating transitions between different plotting data (with use of <code>tweenr::tween_state()</code>) and animating them.</p>
<section id="plotting-data" class="level2">
<h2 class="anchored" data-anchor-id="plotting-data">Plotting data</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for computing plotting data">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for computing plotting data
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute data for plot. Basically, it:</span></span>
<span id="cb4-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Counts values in each group.</span></span>
<span id="cb4-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Normalizes by maximum count within each group (producing 'mode shares').</span></span>
<span id="cb4-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Computes whether certain value is mode according to rule "`mode share` is</span></span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note less then `mode_thres`".</span></span>
<span id="cb4-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Produces plotting data (including colour and size of segments).</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here `tbl` should have 'distr' and 'value' columns.</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `mode_thres` represents minimum 'mode share' for value to be considered mode.</span></span>
<span id="cb4-9">get_plot_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(tbl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode_thres =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb4-10">  tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute mode share distribution by counting value occurence in groups and</span></span>
<span id="cb4-12">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalize by maximum count within groups.</span></span>
<span id="cb4-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(distr, value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">modeShare =</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(n),</span>
<span id="cb4-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">isMode =</span> modeShare <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> mode_thres</span>
<span id="cb4-18">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare plot data</span></span>
<span id="cb4-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb4-22">      distr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> value,</span>
<span id="cb4-23">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distributions are plotted on integer levels of groups.</span></span>
<span id="cb4-24">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using factor 'distr' column is a way to control vertical order of</span></span>
<span id="cb4-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># distributions.</span></span>
<span id="cb4-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(distr)),</span>
<span id="cb4-27">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here using 0.9 ensures that segments won't overlap</span></span>
<span id="cb4-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> modeShare <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,</span>
<span id="cb4-29">      isMode,</span>
<span id="cb4-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(isMode, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>),</span>
<span id="cb4-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(isMode, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-32">    )</span>
<span id="cb4-33">}</span></code></pre></div>
</div>
</div>
</div>
<p>Function <code>get_plot_data()</code> takes tibble of samples and mode threshold (minimum ‘mode share’ for value to be considered mode). It produces output with one row per segment in the following format:</p>
<ul>
<li><strong>distr</strong> &lt;same type as in input&gt; : Name of distribution. Will be used as labels.</li>
<li><strong>x</strong> &lt;dbl&gt; : Coordinates of segment x axis (which is enough to define x coordinate of vertical segments).</li>
<li><strong>y</strong> &lt;dbl&gt; : The y coordinate of lower end of a segment. To control this, supply factor <code>distr</code> column: different distributions will be plotted at integer y coordinates in order defined by factor levels (from bottom to top).</li>
<li><strong>yend</strong> &lt;dbl&gt; : The y coordinate of upper end of a segment.</li>
<li><strong>isMode</strong> &lt;lgl&gt; : Logical value indicating whether this segment represents mode value.</li>
<li><strong>colour</strong> &lt;chr&gt; : Colour of the segment (red for modes, black for others).</li>
<li><strong>size</strong> &lt;dbl&gt; : Size of the segment line (2 for modes, 1 for others).</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_plot_data</span>(distr_data)</span>
<span id="cb5-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 297 x 7</span></span>
<span id="cb5-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   distr     x     y  yend isMode colour  size</span></span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;lgl&gt;  &lt;chr&gt;  &lt;dbl&gt;</span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 rbeta 0.19      1  1.02 FALSE  black      1</span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 rbeta 0.28      1  1.02 FALSE  black      1</span></span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 rbeta 0.290     1  1.02 FALSE  black      1</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 rbeta 0.32      1  1.02 FALSE  black      1</span></span>
<span id="cb5-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 rbeta 0.33      1  1.02 FALSE  black      1</span></span>
<span id="cb5-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 292 more rows</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_plot_data</span>(distr_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode_thres =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb5-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 297 x 7</span></span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   distr     x     y  yend isMode colour  size</span></span>
<span id="cb5-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;lgl&gt;  &lt;chr&gt;  &lt;dbl&gt;</span></span>
<span id="cb5-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 rbeta 0.19      1  1.02 TRUE   red        2</span></span>
<span id="cb5-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 rbeta 0.28      1  1.02 TRUE   red        2</span></span>
<span id="cb5-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 rbeta 0.290     1  1.02 TRUE   red        2</span></span>
<span id="cb5-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 rbeta 0.32      1  1.02 TRUE   red        2</span></span>
<span id="cb5-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 rbeta 0.33      1  1.02 TRUE   red        2</span></span>
<span id="cb5-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 292 more rows</span></span>
<span id="cb5-21">distr_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(distr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runif"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rnorm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rbeta"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_plot_data</span>()</span>
<span id="cb5-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 297 x 7</span></span>
<span id="cb5-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   distr     x     y  yend isMode colour  size</span></span>
<span id="cb5-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;lgl&gt;  &lt;chr&gt;  &lt;dbl&gt;</span></span>
<span id="cb5-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 runif  0        1  1.28 FALSE  black      1</span></span>
<span id="cb5-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 runif  0.01     1  1.39 FALSE  black      1</span></span>
<span id="cb5-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 runif  0.02     1  1.51 FALSE  black      1</span></span>
<span id="cb5-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 runif  0.03     1  1.51 FALSE  black      1</span></span>
<span id="cb5-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 runif  0.04     1  1.45 FALSE  black      1</span></span>
<span id="cb5-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 292 more rows</span></span></code></pre></div>
<p>Tips and tricks:</p>
<ul>
<li><em>While plotting several distributions organized vertically, one can compute the base y coordinate for them with <code>as.integer(as.factor(distr))</code></em>. Using factor <code>distr</code> column is a way to control vertical order of distributions.</li>
</ul>
</section>
<section id="creating-plots" class="level2">
<h2 class="anchored" data-anchor-id="creating-plots">Creating plots</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for creating static plots">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for creating static plots
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adds segment layers. May be used in both static and animated plots.</span></span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In static plots should be preceded by `ggplot(data)` in which `data` should</span></span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># have column `.frame` with all 1.</span></span>
<span id="cb6-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In animated plots should be preceded by</span></span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `ggplot(data_tweened, aes(frame = .frame))`.</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns a list with results of `ggplot2` constructor functions. Elements will</span></span>
<span id="cb6-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be used sequentially to build plot. This list should be added to `ggplot()`</span></span>
<span id="cb6-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># call with `+` function (like other `ggplot2` functionality).</span></span>
<span id="cb6-9">add_layers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb6-10">  common_aes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> yend,</span>
<span id="cb6-11">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> colour, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size)</span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting segments in two different layers to highlight mode segments.</span></span>
<span id="cb6-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(</span>
<span id="cb6-15">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Value of `data` argument in layer function can be a function! It will be</span></span>
<span id="cb6-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># applied to present data initialized in `ggplot()` call.</span></span>
<span id="cb6-17">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Notation `. %&gt;% ...` creates a functional sequence.</span></span>
<span id="cb6-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>isMode), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> common_aes</span>
<span id="cb6-19">    ),</span>
<span id="cb6-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(isMode), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> common_aes),</span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explicitly label distributions.</span></span>
<span id="cb6-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label</span>(</span>
<span id="cb6-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute all possible labels in case of factor `distr`</span></span>
<span id="cb6-25">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>(.frame, distr) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complete</span>(.frame, distr) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position label on the left side and in the middle of the group plot</span></span>
<span id="cb6-28">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(distr)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb6-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> distr),</span>
<span id="cb6-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb6-31">    ),</span>
<span id="cb6-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tweak axes labels</span></span>
<span id="cb6-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>),</span>
<span id="cb6-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb6-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">minor_breaks =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb6-36">    ),</span>
<span id="cb6-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_identity</span>(),</span>
<span id="cb6-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size_identity</span>(),</span>
<span id="cb6-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Manually fix plot range for x axis to (0, 1).</span></span>
<span id="cb6-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb6-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add common subtitle to describe plot. Wrap `labs()` in `list()` as</span></span>
<span id="cb6-42">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `labs()` itself returns a list which will be appended in a wrong way.</span></span>
<span id="cb6-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb6-44">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb6-45">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rows represent counts of samples from different distributions."</span>,</span>
<span id="cb6-46">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual counts are normalized by maximum count to plot mode share."</span>,</span>
<span id="cb6-47">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modes (in red) are values with mode share above some threshold."</span>),</span>
<span id="cb6-48">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-49">      )</span>
<span id="cb6-50">    ))</span>
<span id="cb6-51">  )</span>
<span id="cb6-52">}</span>
<span id="cb6-53"></span>
<span id="cb6-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrapper for constructing static plot</span></span>
<span id="cb6-55">make_static_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(plot_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb6-56">  plot_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-57">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.frame =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-58">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-59">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_layers</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-60">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> title)</span>
<span id="cb6-61">}</span></code></pre></div>
</div>
</div>
</div>
<p>Function <code>make_static_plot()</code> expects plot data (as output of <code>get_plot_data()</code>) and title of the plot. It returns a ggplot object with many segments and zooming into (0, 1) in x-axis.</p>
<p>Tips and tricks:</p>
<ul>
<li>For effective code reuse while “ggplotting”, <em>one can create custom function <code>custom_fun()</code> which should return a list with results of <a href="http://ggplot2.tidyverse.org/">ggplot2</a> constructor functions</em>. Usually, they are geoms but can be scales, theme elements and so on. This function can then be used as function layer with <code>ggplot(data) + custom_fun()</code>.</li>
<li><em>Value of <code>data</code> argument in layer function can be a function!</em> This one I discovered during solving this task and was pleasantly surprised by this functionality. A function will be applied to present data initialized in <code>ggplot()</code> call. It is very useful when one needs to plot object for one subset of data over the other. A handy way to create those functions are with <code>. %&gt;% ...</code> notation which creates a functional sequence (one of the features of <a href="http://magrittr.tidyverse.org/reference/pipe.html">magrittr pipe</a>). Here this trick is used to plot segments for mode values over the other segments.</li>
</ul>
</section>
<section id="example-plots" class="level2">
<h2 class="anchored" data-anchor-id="example-plots">Example plots</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">distr_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_plot_data</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_static_plot</span>(</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mode share distributions for samples rounded to 2 digits"</span></span>
<span id="cb7-5">  )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr/example plots-1.png" class="img-fluid"></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">distr_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_plot_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode_thres =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_static_plot</span>(</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb8-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mode share distributions for samples rounded to 2 digits."</span>,</span>
<span id="cb8-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Relaxed definition of mode"</span>),</span>
<span id="cb8-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span></span>
<span id="cb8-8">    )</span>
<span id="cb8-9">  )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr/example plots-2.png" class="img-fluid"></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">distr_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(distr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rnorm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runif"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rbeta"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_plot_data</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_static_plot</span>(</span>
<span id="cb9-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Control order of distributions with factor `distr` column"</span></span>
<span id="cb9-6">  )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr/example plots-3.png" class="img-fluid"></p>
</section>
</section>
<section id="animations" class="level1">
<h1>Animations</h1>
<p>The general idea behind animations is to take a list of state plotting data and compute transitions between them: multiple <strong>valid</strong> plotting data for transition states between consecutive state plotting data. All “transition plotting data” will be plotted consecutively. The output sequence of plots will be animated with relatively high speed to produce smooth animation.</p>
<section id="transitions" class="level2">
<h2 class="anchored" data-anchor-id="transitions">Transitions</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for creating transitions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for creating transitions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Analogous to `findInterval()` but:</span></span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Returns not the index of "left" `vec` element of interval but index of</span></span>
<span id="cb10-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nearest element between two.</span></span>
<span id="cb10-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - `vec` can be unordered.</span></span>
<span id="cb10-5">find_nearest_ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, vec) {</span>
<span id="cb10-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(vec) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)))</span>
<span id="cb10-8">  }</span>
<span id="cb10-9"></span>
<span id="cb10-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Produce sorted vector and use `findInterval` on it</span></span>
<span id="cb10-11">  vec_order <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(vec)</span>
<span id="cb10-12">  vec_sorted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vec[vec_order]</span>
<span id="cb10-13">  x_ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">findInterval</span>(x, vec_sorted, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.inside =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb10-14"></span>
<span id="cb10-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modify interval index by possibly adding 1 if right interval end is nearer.</span></span>
<span id="cb10-16">  x_nearest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x_ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (vec_sorted[x_ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> vec_sorted[x_ind])</span>
<span id="cb10-17"></span>
<span id="cb10-18">  vec_order[x_nearest]</span>
<span id="cb10-19">}</span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Completely match x to y</span></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It computes:</span></span>
<span id="cb10-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Index of the nearest `y` value to `x` value for every index of `x`.</span></span>
<span id="cb10-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># - Similar data, but index of nearest `x` value to `y` values that were not</span></span>
<span id="cb10-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># chosen as nearest ones in the previous step.</span></span>
<span id="cb10-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output is a tibble with 'from' and 'to' columns. In column 'from' all indices</span></span>
<span id="cb10-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># of `x` are present and in 'to' - all indices of `y` are present.</span></span>
<span id="cb10-28">match_nearest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb10-29">  matching_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_nearest_ind</span>(x, y)</span>
<span id="cb10-30">  rest_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(y), matching_x)</span>
<span id="cb10-31"></span>
<span id="cb10-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(rest_y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb10-33">    matching_rest_y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_nearest_ind</span>(y[rest_y], x)</span>
<span id="cb10-34"></span>
<span id="cb10-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb10-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(x), matching_rest_y),</span>
<span id="cb10-37">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to   =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(matching_x,   rest_y)</span>
<span id="cb10-38">    )</span>
<span id="cb10-39">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb10-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> matching_x)</span>
<span id="cb10-41">  }</span>
<span id="cb10-42">}</span>
<span id="cb10-43"></span>
<span id="cb10-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return modified second argument with zero height segments in case first</span></span>
<span id="cb10-45">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># argument is `NULL`.</span></span>
<span id="cb10-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This function is essential for aesthetically pleasing animation in case of</span></span>
<span id="cb10-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different distribution sets. Should be used in conjunction with</span></span>
<span id="cb10-48">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `dplyr::full_join()`.</span></span>
<span id="cb10-49">coalesce_segments <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(subject, reference) {</span>
<span id="cb10-50">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(subject)) {</span>
<span id="cb10-51">    reference <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y)</span>
<span id="cb10-52">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb10-53">    subject</span>
<span id="cb10-54">  }</span>
<span id="cb10-55">}</span>
<span id="cb10-56"></span>
<span id="cb10-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare data for `tweenr::tween_states()`</span></span>
<span id="cb10-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `plot_data_from` and `plot_data_to` represent `get_plot_data()` outputs of</span></span>
<span id="cb10-59">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two tables which plots should be animated one into another.</span></span>
<span id="cb10-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The idea is to ensure that every segment in both "from" and "to" data</span></span>
<span id="cb10-61">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># actively takes part in transition and not just pops up in the end.</span></span>
<span id="cb10-62">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is achieved by doing complete match within every distribution of</span></span>
<span id="cb10-63">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># segments in "from" and "to" plot data sets.</span></span>
<span id="cb10-64">transition_nearest_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(plot_data_from, plot_data_to) {</span>
<span id="cb10-65">  nested_from <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plot_data_from <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>distr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataFrom"</span>)</span>
<span id="cb10-66">  nested_to <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plot_data_to <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>distr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataTo"</span>)</span>
<span id="cb10-67"></span>
<span id="cb10-68">  nested_transitions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> nested_from <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Join two tables with plot data by distribution.</span></span>
<span id="cb10-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note the use of `full_join()` which enables animating data with different</span></span>
<span id="cb10-71">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sets of distributions.</span></span>
<span id="cb10-72">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> nested_to, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distr"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-73">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modify possibly missing distributions to appear "from the ground".</span></span>
<span id="cb10-74">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb10-75">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataFrom =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(dataFrom, dataTo, coalesce_segments),</span>
<span id="cb10-76">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dataTo =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(dataTo, dataFrom, coalesce_segments)</span>
<span id="cb10-77">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-78">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute matching by nearest x value</span></span>
<span id="cb10-79">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb10-80">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">matching =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(dataFrom, dataTo, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match_nearest</span>(.x[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>]], .y[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>]])),</span>
<span id="cb10-81">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transitionFrom =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(dataFrom, matching, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x[.y[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>]], ]),</span>
<span id="cb10-82">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transitionTo =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(dataTo, matching, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x[.y[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>]], ])</span>
<span id="cb10-83">    )</span>
<span id="cb10-84"></span>
<span id="cb10-85">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return a list with pair of tibbles where corresponding pairs of rows</span></span>
<span id="cb10-86">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># represent segements to be transfromed one into another.</span></span>
<span id="cb10-87">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-88">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> nested_transitions <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(transitionFrom),</span>
<span id="cb10-89">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> nested_transitions <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(transitionTo)</span>
<span id="cb10-90">  )</span>
<span id="cb10-91">}</span></code></pre></div>
</div>
</div>
</div>
<p>The <code>tweenr</code> function for producing transition between states is <code>tween_states()</code>. Its core input is a list of data frames where all elements must contain the same number of rows. Every row describes parameters of the certain plotting object which will be transformed between present states.</p>
<p>As our states consist from essentially different objects, we will operate on pairs of consecutive states. It is our duty to match pairs of objects that will be transformed one into another. Basically, it means to <strong>say for every segment into/from which other segment it will transformed</strong>. Outline of proposed transition algorithm of <code>plot_data_from</code> into <code>plot_data_to</code> is as follows:</p>
<ul>
<li><strong>Match distribution types from both data sets</strong>. This is done with <code>full_join()</code> from <code>dplyr</code> in combination with <code>nest()</code> from <code>tidyr</code>. Using this type of join function is essential: it enables creating transition for pair of plot data with different sets of distributions (which is an overkill but a rather cool feature gained with little effort). If in pair plot data there is no matching distribution, the result will be <code>NULL</code>.</li>
<li><strong>Do matching between same distributions</strong>:
<ul>
<li>If any plot data is <code>NULL</code> (using <code>full_join()</code> should ensure that there is maximum one <code>NULL</code>) copy pair plotting data and modify column <strong>yend</strong> to equal <strong>y</strong>. This models “raising” segments “from the ground” of respective distribution.</li>
<li>If both plot data are not <code>NULL</code> match every “from-row” with the “to-row” by nearest <code>x</code> coordinate (represents sample value). To ensure that no segment “pops out of nowhere”, do similar process in reverse: for every “to-row” that wasn’t matched in previous step.</li>
</ul></li>
</ul>
<p>Tips and tricks:</p>
<ul>
<li><em>Index of the nearest reference point can be found by a slight modification of <code>findInterval()</code></em>. After computing <code>x_ind</code> with <code>findInterval(x, vec, all.inside = TRUE)</code> (here <code>vec</code> should be sorted increasingly), modify the result with <code>x_ind + (vec_sorted[x_ind + 1] - x &lt; x - vec_sorted[x_ind])</code>. This adds 1 (<code>TRUE</code> converted to numeric value) in case right end of interval is closer than left one.</li>
<li><em>Using <code>full_join()</code> can be very helpful in situation with different sets of groups</em>. It enables later repairing of unmatched data.</li>
</ul>
</section>
<section id="creating-animations" class="level2">
<h2 class="anchored" data-anchor-id="creating-animations">Creating animations</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Code for creating animation">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code for creating animation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tween consecutive plot data sets to be transformed one into another</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The output will be data for cycled animation: last plot will be transformed</span></span>
<span id="cb11-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># into the first one.</span></span>
<span id="cb11-4">tween_cycled <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(plot_data_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tweenlength =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">statelength =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb11-5">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ease =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nframes =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>) {</span>
<span id="cb11-6">  states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(plot_data_list, plot_data_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb11-7"></span>
<span id="cb11-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># As in result of every `tweenr::tween_states()` call column `.frame` starts</span></span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from 1, it is needed to offset frames for every pair.</span></span>
<span id="cb11-10">  frame_offset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(plot_data_list) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> nframes</span>
<span id="cb11-11"></span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(states[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(states)], states[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], transition_nearest_value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2_dfr</span>(</span>
<span id="cb11-14">      frame_offset,</span>
<span id="cb11-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(pair_tbls, f_offset) {</span>
<span id="cb11-16">        pair_mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pair_tbls <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-17">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Converting column `distr` to factor is needed to avoid</span></span>
<span id="cb11-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'Error in col2rgb(d)' with not correct colour name.</span></span>
<span id="cb11-19">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is due to not optimal treatment of character columns in current</span></span>
<span id="cb11-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CRAN version of `tweenr`.</span></span>
<span id="cb11-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This seems to be solved in dev. version at 'thomasp85/tweenr'.</span></span>
<span id="cb11-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># However, for now it is rather unstable.</span></span>
<span id="cb11-23">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fortunately, converting to factor should give expected results as in</span></span>
<span id="cb11-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `transition_nearest_value()` it is ensured common value set and</span></span>
<span id="cb11-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># order of their appearence by using `full_join()`.</span></span>
<span id="cb11-26">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(distr)))</span>
<span id="cb11-27"></span>
<span id="cb11-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CRAN version of `tweenr` also changes levels of factors during</span></span>
<span id="cb11-29">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `tween_states()`. This also should be solved in development version.</span></span>
<span id="cb11-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For now, use workaround with manual patching of levels.</span></span>
<span id="cb11-31">        distr_levels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">union</span>(</span>
<span id="cb11-32">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(pair_mod[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distr), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(pair_mod[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>distr)</span>
<span id="cb11-33">        )</span>
<span id="cb11-34"></span>
<span id="cb11-35">        pair_mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-36">          tweenr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tween_states</span>(</span>
<span id="cb11-37">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tweenlength =</span> tweenlength, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">statelength =</span> statelength,</span>
<span id="cb11-38">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ease =</span> ease, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nframes =</span> nframes</span>
<span id="cb11-39">          ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-40">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb11-41">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Offset frames</span></span>
<span id="cb11-42">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.frame =</span> .frame <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> f_offset,</span>
<span id="cb11-43">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Repare columns after applying `tween_states()`</span></span>
<span id="cb11-44">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(distr), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> distr_levels),</span>
<span id="cb11-45">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">isMode =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.logical</span>(isMode),</span>
<span id="cb11-46">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(colour)</span>
<span id="cb11-47">          )</span>
<span id="cb11-48">      }</span>
<span id="cb11-49">    )</span>
<span id="cb11-50">}</span>
<span id="cb11-51"></span>
<span id="cb11-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrapper for constructing animation</span></span>
<span id="cb11-53">make_animation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(plot_data_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb11-54">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tweenlength =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">statelength =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb11-55">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ease =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nframes =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>,</span>
<span id="cb11-56">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb11-57">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plot_data_list <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-58">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tween_cycled</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tweenlength =</span> tweenlength, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">statelength =</span> statelength,</span>
<span id="cb11-59">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ease =</span> ease, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nframes =</span> nframes) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct plot</span></span>
<span id="cb11-61">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frame =</span> .frame)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-62">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_layers</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-63">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> title)</span>
<span id="cb11-64"></span>
<span id="cb11-65">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gganimate</span>(</span>
<span id="cb11-66">    p, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> filename, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title_frame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb11-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change resolution by supplying function for graphic device.</span></span>
<span id="cb11-68">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Thanks to https://stackoverflow.com/a/46878163/7360839</span></span>
<span id="cb11-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ani.dev =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(...) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">png</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, ...)},</span>
<span id="cb11-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ani.width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">675</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ani.height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span></span>
<span id="cb11-71">  )</span>
<span id="cb11-72">}</span></code></pre></div>
</div>
</div>
</div>
<p>Function <code>make_animation()</code>, besides arguments for <code>tweenr</code> and <code>gganimate</code> functions, expects a list of plotting data and a title.</p>
<p>Tips and tricks:</p>
<ul>
<li>One can change resolution (for example, to 100 ppi) of output animation in <code>gganimate</code> by supplying <code>ani.dev = function(...) {png(res = 100, ...)}</code>. This trick is thanks to <a href="https://stackoverflow.com/a/46878163/7360839">this StackOverflow answer</a>.</li>
</ul>
</section>
<section id="example-animations" class="level2">
<h2 class="anchored" data-anchor-id="example-animations">Example animations</h2>
<p>With the following animations we see that sample mode is very variable for uniform distribution (which is expected), rather variable for normal and very stable for beta distribution with shape parameters 5 and 1.</p>
<p>Created code enables animating samples with different distribution sets. It is also flexible enough to present evolution of plots for different roundings and definitions of mode.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mode variability of different samples with values rounded to 2 digits</span></span>
<span id="cb12-2">sample_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(value, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(get_plot_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_animation</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mode variability for independent samples"</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr/animation_1.gif" class="img-fluid"></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Animation for tables with different distribution sets</span></span>
<span id="cb13-2">sample_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert `distr` to factor with common levels to ensure animation stability</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(distr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(r_funs))))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove distributions in tables</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(r_funs), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(.x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(distr) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> .y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The same animation process</span></span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(value, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(get_plot_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_animation</span>(</span>
<span id="cb13-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Automated animation for different distribution sets"</span></span>
<span id="cb13-12">  )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr/animation_2.gif" class="img-fluid"></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evolution of modes for different mode thresholds</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(</span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb14-4">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_plot_data</span>(sample_data[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(value, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), .x)</span>
<span id="cb14-5">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_animation</span>(</span>
<span id="cb14-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Evolution of modes for different mode thresholds (from 1 to 0)"</span>,</span>
<span id="cb14-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nframes =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb14-9">  )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr/animation_3.gif" class="img-fluid"></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mode variability of one sample with different roundings</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(sample_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(.x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(value, .y))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(get_plot_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_animation</span>(</span>
<span id="cb15-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mode variability for different roundings of one sample"</span>,</span>
<span id="cb15-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tweenlength =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">statelength =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-7">  )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr/animation_4.gif" class="img-fluid"></p>
</section>
</section>
<section id="bonus-accidental-art" class="level1">
<h1>Bonus accidental art</h1>
<p>This piece of “accidental art” I created unintentionally when supplied tweened plot data for different roundings to <code>make_static_plot()</code>:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(sample_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(.x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(value, .y))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(get_plot_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tween_cycled</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_static_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accidental art"</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr/accidental-art-1.png" class="img-fluid"></p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<ul>
<li>Sometimes a rather simple task can lead to pretty complicated solutions (if one feels like accepting a challenge).</li>
<li>Visualization of mode variability for different distributions can be done by creating animation with transitions between independent sample distributions (highlighting modes).</li>
<li>Along the journey of solving small tasks, several tips and tricks were found:
<ul>
<li><code>purrr::pmap_dfr()</code> helps create a data frame output after iterating in parallel over multiple vectors. Shorthand formula notation for function should be used with caution when one of the input vectors contain functions to be applied.</li>
<li>While plotting several distributions organized vertically, one can compute the base y coordinate for them with <code>as.integer(as.factor(distr))</code> (<code>distr</code> being name of the distribution stored as character or factor).</li>
<li>For efficient “ggplotting” one can create custom function <code>custom_fun()</code> which should return a list with results of <code>ggplot2</code> constructor functions. It can then be used as function layer with <code>ggplot(data) + custom_fun()</code>.</li>
<li>Value of <code>data</code> argument in <code>ggplot2</code> layer function can itself be a function! It will be applied to present data initialized in <code>ggplot()</code> call. It is very useful when one needs to plot objects for one subset of data over the other. A handy way to create those functions are with <code>. %&gt;% ...</code> notation which creates a functional sequence (one of the features of <code>magrittr</code> pipe).</li>
<li>Index of the nearest reference point can be found by a slight modification of <code>findInterval()</code> (used with <code>all.inside = TRUE</code>) with adding 1 when right end of interval is closer than left one.</li>
<li>Using <code>full_join()</code> can be very helpful in situation with different sets of groups. It enables later repairing of unmatched data.</li>
<li>One can change resolution (for example, to 100 ppi) of output animation in <code>gganimate</code> by supplying <code>ani.dev = function(...) {png(res = 100, ...)}</code>.</li>
</ul></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.4 (2018-03-15)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.4 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] bindrcpp_0.2.2       gganimate_0.1.0.9000 tweenr_0.1.5
## [4] ggplot2_2.2.1        purrr_0.2.5          tidyr_0.8.1
## [7] dplyr_0.7.5
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.17     pillar_1.2.3     compiler_3.4.4   plyr_1.8.4
##  [5] bindr_0.1.1      tools_3.4.4      digest_0.6.15    evaluate_0.10.1
##  [9] tibble_1.4.2     gtable_0.2.0     pkgconfig_2.0.1  rlang_0.2.1
## [13] cli_1.0.0        yaml_2.1.19      blogdown_0.6     xfun_0.1
## [17] stringr_1.3.1    knitr_1.20       rprojroot_1.3-2  grid_3.4.4
## [21] tidyselect_0.2.4 glue_1.2.0       R6_2.2.2         rmarkdown_1.9
## [25] animation_2.5    bookdown_0.7     magrittr_1.5     backports_1.1.2
## [29] scales_0.5.0     htmltools_0.3.6  assertthat_0.2.0 colorspace_1.3-2
## [33] labeling_0.3     utf8_1.1.4       stringi_1.2.2    lazyeval_0.2.1
## [37] munsell_0.4.3    crayon_1.3.4</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>tidyverse</category>
  <category>tweenr</category>
  <guid>https://echasnovski.com/blog/2018-06-14-animating-mode-variability-with-tidyverse-and-tweenr.html</guid>
  <pubDate>Wed, 13 Jun 2018 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Harry Potter and rankings with comperank</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2018-05-31-harry-potter-and-rankings-with-comperank.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Package <a href="https://github.com/echasnovski/comperank">comperank</a> is <a href="https://CRAN.R-project.org/package=comperank">on CRAN</a> now. It offers consistent implementations of several ranking and rating methods. Originally, it was intended to be my first CRAN package when I started to build it 13 months ago. Back then I was very curious to learn about different ranking and rating methods that are used in sport. This led me to two conclusions:</p>
<ul>
<li>There is an amazing book <a href="https://www.amazon.com/Whos-1-Science-Rating-Ranking/dp/069116231X">“Who’s #1”</a> by Langville and Meyer which describes several ideas in great detail.</li>
<li>Although there are some CRAN packages dedicated specifically to ranking methods (for example, <a href="https://CRAN.R-project.org/package=elo">elo</a>, <a href="https://CRAN.R-project.org/package=mvglmmRank">mvglmmRank</a>), I didn’t find them to be <a href="https://cran.r-project.org/web/packages/tidyverse/vignettes/manifesto.html">tidy</a> enough.</li>
</ul>
<p>These discoveries motivated me to write my first ever CRAN package. Things didn’t turn out the way I was planning, and now <code>comperank</code> is actually my fourth. After spending some time writing it I realized that most of the package will be about storing and manipulating competition results in consistent ways. That is how <a href="https://echasnovski.github.io/comperes/">comperes</a> was born.</p>
<p>After diverging into creating this site and writing <a href="https://echasnovski.github.io/ruler/">ruler</a> in pair with <a href="https://echasnovski.github.io/keyholder/">keyholder</a>, a few months ago I returned to competition results and rankings. Gained experience helped me to improve functional API of both packages which eventually resulted into submitting them to CRAN.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>This post, as <a href="../blog/2018-05-09-harry-potter-and-competition-results-with-comperes.html">one of the previous ones</a>, has two goals:</p>
<ul>
<li>Explore different types of rankings on <a href="../blog/2018-04-09-struggle-with-harry-potter-data.html">Harry Potter Books Survey</a> results (data provided by <code>comperes</code>).</li>
<li>Demonstrate basic functionality of <code>comperank</code> package. To learn more go to its <a href="https://echasnovski.github.io/comperank/index.html">README</a>, <a href="https://echasnovski.github.io/comperank/articles/">vignettes</a> and <a href="https://echasnovski.github.io/comperank/reference/index.html">manual pages</a>.</li>
</ul>
<p>We will cover the following topics:</p>
<ul>
<li>Short notes about <strong>functionality of comperank</strong>.</li>
<li><strong>Exploration ranking</strong> with ranking based on mean book score. No <code>comperank</code> package functionality is required.</li>
<li><strong>Rankings with fixed Head-to-Head structure</strong>. This will cover Massey and Colley ranking methods.</li>
<li><strong>Rankings with variable Head-to-Head structure</strong>. This will cover Keener, Markov and Offense-Defense ranking methods.</li>
<li><strong>Combined rankings</strong> in which average ranks will be computed using all described <code>comperank</code> methods.</li>
</ul>
<p>Another very interesting set of ranking methods implemented in <code>comperank</code> are methods with iterative nature. However, their usage with mentioned <a href="https://echasnovski.github.io/comperes/reference/hp_survey.html">Harry Potter Books Survey dataset</a> is meaningless as temporal ordering of games (acts of book scoring by one person) should make sense, which it doesn’t.</p>
<p>The idea behind converting survey results into competition results is described in aforementioned post. We will need the following setup:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will automatically load {comperes}</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(comperank)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create competition results from hp_survey</span></span>
<span id="cb1-9">hp_cr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_survey <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb1-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game =</span> person, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player =</span> book,</span>
<span id="cb1-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[^0-9].*$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, score))</span>
<span id="cb1-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_longcr</span>()</span></code></pre></div>
</section>
<section id="functionality-of-comperank" class="level1">
<h1>Functionality of comperank</h1>
<p><strong>Rating</strong> is considered to be a list (in the ordinary sense) of numerical values, one for each player, or the numerical value itself. Its interpretation depends on rating method: either bigger value indicates better player performance or otherwise.</p>
<p><strong>Ranking</strong> is considered to be a rank-ordered list (in the ordinary sense) of players: rank 1 indicates player with best performance.</p>
<p><code>comperank</code> leverages the <a href="https://www.tidyverse.org/">tidyverse</a> ecosystem of R packages. Among other things, it means that the main output format is <a href="http://tibble.tidyverse.org/">tibble</a>.</p>
<p>There are three sets of functions:</p>
<ul>
<li><code>rate_*()</code> (<code>*</code> stands for ranking method short name). Its output is a tibble with columns <code>player</code> (player identifier) and at least one <code>rating_*</code> (rating value). Names of rating columns depend on rating method.</li>
<li><code>rank_*()</code>. Its default output is similar to previous one, but with <code>ranking_*</code> instead of rating columns. It runs <code>rate_*()</code> and does ranking with correct direction. One can use option <code>keep_rating = TRUE</code> to keep rating columns in the output.</li>
<li><code>add_*_ratings()</code>. These functions are present only for algorithms with iterative nature and competition results with games only between two players. They return tibble with row corresponding to a game and extra columns indicating ratings of players before and after the game.</li>
</ul>
</section>
<section id="exploration-ranking" class="level1">
<h1>Exploration ranking</h1>
<p>Previously we established that “Harry Potter and the Prisoner of Azkaban” seems to be “the best” book and “Harry Potter and the Chamber of Secrets” comes last. This was evaluated by mean score:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">hp_rank_explore <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_player</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rating_explore =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(score)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># round_rank() is a function from {comperank} package for doing ranking</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ranking_explore =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round_rank</span>(rating_explore))</span>
<span id="cb2-5">hp_rank_explore</span>
<span id="cb2-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 3</span></span>
<span id="cb2-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player rating_explore ranking_explore</span></span>
<span id="cb2-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;           &lt;dbl&gt;           &lt;dbl&gt;</span></span>
<span id="cb2-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1             3.91               5</span></span>
<span id="cb2-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_2             3.55               7</span></span>
<span id="cb2-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_3             4.19               1</span></span>
<span id="cb2-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_4             4                  3</span></span>
<span id="cb2-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_5             3.90               6</span></span>
<span id="cb2-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 HP_6             4.13               2</span></span>
<span id="cb2-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 HP_7             3.96               4</span></span></code></pre></div>
<p>As simple as it is, this approach might leave some available information unused. Survey originally was designed to obtain information not only about books performance as separate objects, but also to learn about possible pair relationships between them. Maybe some book is considered generally “not the best” but it “outperforms” some other “better” book. This was partially studied in “Harry Potter and competition results with comperes” by computing different Head-to-Head values and manually studying them.</p>
<p>Here we will attempt to summarise books performance based on their Head-to-Head relationships.</p>
</section>
<section id="rankings-with-fixed-h2h-structure" class="level1">
<h1>Rankings with fixed H2H structure</h1>
<p>In <code>comperank</code> there are two methods which operate on fixed Head-to-Head structure: <strong>Massey</strong> and <strong>Colley</strong>. Both of them are designed for competitions where:</p>
<ul>
<li>Games are held only between two players.</li>
<li>It is assumed that score is numeric and higher values indicate better player performance in a game.</li>
</ul>
<p>Being very upset for moment, we realize that in dataset under study there are games with different number of players. Fortunately, <code>comperes</code> package comes to rescue: it has function <a href="https://echasnovski.github.io/comperes/reference/pairgames.html">to_pairgames()</a> just for this situation. It takes competition results as input and returns completely another (strictly speaking) competition results where “crowded” games are split into small ones. More strictly, games with one player are removed and games with three and more players are converted to multiple games between all unordered pairs of players. The result is in <a href="https://echasnovski.github.io/comperes/reference/widecr.html">wide</a> format (as opposed to <a href="https://echasnovski.github.io/comperes/reference/longcr.html">long</a> one of <code>hp_cr</code>):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">hp_cr_paired <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">to_pairgames</span>(hp_cr)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For example, second game was converted to a set of 10 games</span></span>
<span id="cb3-4">hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(game <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A longcr object:</span></span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 5 x 3</span></span>
<span id="cb3-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    game player score</span></span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;int&gt; &lt;chr&gt;  &lt;int&gt;</span></span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     2 HP_1       3</span></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     2 HP_4       5</span></span>
<span id="cb3-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     2 HP_5       2</span></span>
<span id="cb3-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4     2 HP_6       4</span></span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5     2 HP_7       5</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">hp_cr_paired <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb3-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A widecr object:</span></span>
<span id="cb3-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 10 x 5</span></span>
<span id="cb3-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     game player1 score1 player2 score2</span></span>
<span id="cb3-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt;</span></span>
<span id="cb3-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1     2 HP_1         3 HP_4         5</span></span>
<span id="cb3-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2     3 HP_1         3 HP_5         2</span></span>
<span id="cb3-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3     4 HP_1         3 HP_6         4</span></span>
<span id="cb3-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4     5 HP_1         3 HP_7         5</span></span>
<span id="cb3-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5     6 HP_4         5 HP_5         2</span></span>
<span id="cb3-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6     7 HP_4         5 HP_6         4</span></span>
<span id="cb3-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7     8 HP_4         5 HP_7         5</span></span>
<span id="cb3-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8     9 HP_5         2 HP_6         4</span></span>
<span id="cb3-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9    10 HP_5         2 HP_7         5</span></span>
<span id="cb3-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10    11 HP_6         4 HP_7         5</span></span></code></pre></div>
<section id="massey-method" class="level2">
<h2 class="anchored" data-anchor-id="massey-method">Massey method</h2>
<p>Idea of Massey method is that difference in ratings should be proportional to score difference in direct confrontations. Bigger value indicates better player competition performance.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">hp_cr_massey <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_cr_paired <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank_massey</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_rating =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-2">hp_cr_massey</span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 3</span></span>
<span id="cb4-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player rating_massey ranking_massey</span></span>
<span id="cb4-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;</span></span>
<span id="cb4-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1        -0.00870              5</span></span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_2        -0.514                7</span></span>
<span id="cb4-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_3         0.293                1</span></span>
<span id="cb4-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_4         0.114                3</span></span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_5         0.00195              4</span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 HP_6         0.124                2</span></span>
<span id="cb4-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 HP_7        -0.00948              6</span></span></code></pre></div>
</section>
<section id="colley-method" class="level2">
<h2 class="anchored" data-anchor-id="colley-method">Colley method</h2>
<p>Idea of Colley method is that ratings should be proportional to share of player’s won games. Bigger value indicates better player performance.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">hp_cr_colley <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_cr_paired <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank_colley</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_rating =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-2">hp_cr_colley</span>
<span id="cb5-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 3</span></span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player rating_colley ranking_colley</span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;</span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1           0.497              5</span></span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_2           0.326              7</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_3           0.599              1</span></span>
<span id="cb5-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_4           0.534              3</span></span>
<span id="cb5-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_5           0.505              4</span></span>
<span id="cb5-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 HP_6           0.542              2</span></span>
<span id="cb5-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 HP_7           0.497              6</span></span></code></pre></div>
<p>Both Massey and Colley give the same result differing from Exploration ranking in treating “HP_5” (“Order of the Phoenix”) and “HP_7” (“Deathly Hallows”) differently: “HP_5” moved up from 6-th to 4-th place.</p>
</section>
</section>
<section id="rankings-with-variable-h2h-structure" class="level1">
<h1>Rankings with variable H2H structure</h1>
<p>All algorithms with variable Head-to-Head structure depend on user supplying custom Head-to-Head expression for computing quality of direct confrontations between all pairs of players of interest.</p>
<p>There is much freedom in choosing Head-to-Head structure appropriate for ranking. For example, it can be “number of wins plus half the number of ties” (implemented in <code>h2h_funs[["num_wins2"]]</code> from <code>comperes</code>) or “mean score difference from direct matchups” (<code>h2h_funs[["mean_score_diff"]]</code>). In this post we will use the latter one. Corresponding Head-to-Head matrix looks like this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">hp_h2h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h2h_mat</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span> h2h_funs[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_score_diff"</span>]]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Value indicates mean score difference between "row-player" and</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "column-player". Positive - "row-player" is better.</span></span>
<span id="cb6-7">hp_h2h</span>
<span id="cb6-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A matrix format of Head-to-Head values:</span></span>
<span id="cb6-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       HP_1 HP_2  HP_3  HP_4  HP_5  HP_6  HP_7</span></span>
<span id="cb6-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_1  0.00 0.50 -0.39  0.04  0.00 -0.14 -0.06</span></span>
<span id="cb6-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_2 -0.50 0.00 -0.77 -0.58 -0.72 -0.62 -0.45</span></span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_3  0.39 0.77  0.00  0.05  0.51  0.11  0.25</span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_4 -0.04 0.58 -0.05  0.00 -0.04  0.09  0.20</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_5  0.00 0.72 -0.51  0.04  0.00 -0.17 -0.04</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_6  0.14 0.62 -0.11 -0.09  0.17  0.00  0.15</span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_7  0.06 0.45 -0.25 -0.20  0.04 -0.15  0.00</span></span></code></pre></div>
<section id="keener-method" class="level2">
<h2 class="anchored" data-anchor-id="keener-method">Keener method</h2>
<p>Keener method is based on the idea of “relative strength” - the strength of the player relative to the strength of the players he/she has played against. This is computed based on provided Head-to-Head values and some flexible algorithmic adjustments to make method more robust. Bigger value indicates better player performance.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">hp_cr_keener <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank_keener</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span> h2h_funs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_score_diff"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_rating =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-3">hp_cr_keener</span>
<span id="cb7-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 3</span></span>
<span id="cb7-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player rating_keener ranking_keener</span></span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;</span></span>
<span id="cb7-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1          0.147               5</span></span>
<span id="cb7-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_2          0.0816              7</span></span>
<span id="cb7-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_3          0.191               1</span></span>
<span id="cb7-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_4          0.150               4</span></span>
<span id="cb7-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_5          0.153               3</span></span>
<span id="cb7-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 HP_6          0.155               2</span></span>
<span id="cb7-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 HP_7          0.122               6</span></span></code></pre></div>
<p>Results for Keener method again raised “HP_5” one step up to third place.</p>
</section>
<section id="markov-method" class="level2">
<h2 class="anchored" data-anchor-id="markov-method">Markov method</h2>
<p>The main idea of Markov method is that players “vote” for other players’ performance. Voting is done with Head-to-Head values and the more value the more “votes” gives player2 (“column-player”) to player1 (“row-player”). For example, if Head-to-Head value is “number of wins” then player2 “votes” for player1 proportionally to number of times player1 won in a matchup with player2.</p>
<p>Actual “voting” is done in <a href="https://en.wikipedia.org/wiki/Markov_chain">Markov chain</a> fashion: Head-to-Head values are organized in stochastic matrix which vector of stationary probabilities is declared to be output ratings. Bigger value indicates better player performance.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">hp_cr_markov <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank_markov</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span> h2h_funs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_score_diff"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_rating =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-3">hp_cr_markov</span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 3</span></span>
<span id="cb8-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player rating_markov ranking_markov</span></span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;          &lt;dbl&gt;          &lt;dbl&gt;</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1          0.140               5</span></span>
<span id="cb8-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_2          0.0500              7</span></span>
<span id="cb8-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_3          0.196               1</span></span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_4          0.168               2</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_5          0.135               6</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 HP_6          0.167               3</span></span>
<span id="cb8-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 HP_7          0.143               4</span></span></code></pre></div>
<p>We can see that Markov method put “HP_4” (“Goblet of Fire”) on second place. This is due to its reasonably good performance against the leader “HP_3” (“Prisoner of Azkaban”): mean score difference is only 0.05 in “HP_3” favour. Doing well against the leader in Markov method has a great impact on output ranking, which somewhat resonates with common sense.</p>
</section>
<section id="offense-defense-method" class="level2">
<h2 class="anchored" data-anchor-id="offense-defense-method">Offense-Defense method</h2>
<p>The idea of Offense-Defense (OD) method is to account for different abilities of players by combining different ratings:</p>
<ul>
<li>For player which can achieve <em>high</em> Head-to-Head value (even against the player with strong defense) it is said that he/she has <strong>strong offense</strong> which results into <em>high</em> offensive rating.</li>
<li>For player which can force their opponents into achieving <em>low</em> Head-to-Head value (even if they have strong offense) it is said that he/she has <strong>strong defense</strong> which results into <em>low</em> defensive rating.</li>
</ul>
<p>Offensive and defensive ratings describe different skills of players. In order to fully rate players, OD ratings are computed: offensive ratings divided by defensive. The more OD rating the better player performance.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">hp_cr_od <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank_od</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span> h2h_funs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_score_diff"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_rating =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(hp_cr_od, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>)</span>
<span id="cb9-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 7</span></span>
<span id="cb9-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player rating_off rating_def rating_od ranking_off ranking_def</span></span>
<span id="cb9-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;</span></span>
<span id="cb9-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1         5.42      1.03      5.29            5           5</span></span>
<span id="cb9-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_2         1.45      1.88      0.771           7           7</span></span>
<span id="cb9-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_3         7.91      0.522    15.1             1           1</span></span>
<span id="cb9-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_4         6.51      0.869     7.49            3           3</span></span>
<span id="cb9-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_5         5.30      0.888     5.97            6           4</span></span>
<span id="cb9-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 HP_6         6.59      0.809     8.14            2           2</span></span>
<span id="cb9-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 HP_7         5.54      1.05      5.29            4           6</span></span>
<span id="cb9-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ranking_od</span></span>
<span id="cb9-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        &lt;dbl&gt;</span></span>
<span id="cb9-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1          5</span></span>
<span id="cb9-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2          7</span></span>
<span id="cb9-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3          1</span></span>
<span id="cb9-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4          3</span></span>
<span id="cb9-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5          4</span></span>
<span id="cb9-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6          2</span></span>
<span id="cb9-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7          6</span></span></code></pre></div>
<p>All methods give almost equal results again differing only in ranks of “HP_5” and “HP_7”.</p>
</section>
</section>
<section id="combined-rankings" class="level1">
<h1>Combined rankings</h1>
<p>To obtain averaged, and hopefully less “noisy”, rankings we will combine rankings produced with <code>comperank</code> by computing their mean.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(hp_cr_massey, hp_cr_colley, hp_cr_keener, hp_cr_markov, hp_cr_od) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract ranking column</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(., player, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ranking"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Join all ranking data in one tibble</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(left_join, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute mean ranking</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(player, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ranking_combined =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(., <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>player))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Join exploration rankings for easy comparison</span></span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> hp_rank_explore <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>rating_explore), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>)</span>
<span id="cb10-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 3</span></span>
<span id="cb10-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player ranking_combined ranking_explore</span></span>
<span id="cb10-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;             &lt;dbl&gt;           &lt;dbl&gt;</span></span>
<span id="cb10-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1               5                  5</span></span>
<span id="cb10-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_2               7                  7</span></span>
<span id="cb10-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_3               1                  1</span></span>
<span id="cb10-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_4               3                  3</span></span>
<span id="cb10-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_5               4.43               6</span></span>
<span id="cb10-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 HP_6               2.14               2</span></span>
<span id="cb10-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 HP_7               5.43               4</span></span></code></pre></div>
<p>As we can see, although different ranking methods handle results differently for books with “middle performance”, combined rankings are only slightly different from exploration ones. Only notable difference is in switched rankings of “Order of the Phoenix” and “Deathly Hallows”.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<ul>
<li>“Harry Potter and the Prisoner of Azkaban” still seems to be considered “best” among R users. And yet “Harry Potter and the Chamber of Secrets” still suffers the opposite fate.</li>
<li>Using different ranking methods is a powerful tool in analyzing Head-to-Head performance. This can be done in very straightforward manner with new addition to CRAN - <a href="https://github.com/echasnovski/comperank">comperank</a> package.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.4 (2018-03-15)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.4 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] bindrcpp_0.2.2  comperank_0.1.0 comperes_0.2.0  rlang_0.2.0
## [5] purrr_0.2.4     dplyr_0.7.5
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.17     knitr_1.20       bindr_0.1.1      magrittr_1.5
##  [5] tidyselect_0.2.4 R6_2.2.2         stringr_1.3.1    tools_3.4.4
##  [9] xfun_0.1         utf8_1.1.3       cli_1.0.0        htmltools_0.3.6
## [13] yaml_2.1.19      rprojroot_1.3-2  digest_0.6.15    assertthat_0.2.0
## [17] tibble_1.4.2     crayon_1.3.4     bookdown_0.7     tidyr_0.8.1
## [21] glue_1.2.0       evaluate_0.10.1  rmarkdown_1.9    blogdown_0.6
## [25] stringi_1.2.2    compiler_3.4.4   pillar_1.2.2     backports_1.1.2
## [29] pkgconfig_2.0.1</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>comperank</category>
  <category>comperes</category>
  <guid>https://echasnovski.com/blog/2018-05-31-harry-potter-and-rankings-with-comperank.html</guid>
  <pubDate>Wed, 30 May 2018 21:00:00 GMT</pubDate>
</item>
<item>
  <title>General gems of comperes</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2018-05-15-general-gems-of-comperes.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>I am very glad to announce that my new package <a href="https://github.com/echasnovski/comperes">comperes</a> is <a href="https://CRAN.R-project.org/package=comperes">on CRAN</a> now. It provides tools for managing competition results in a <a href="https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html">tidy</a> manner as much as possible. For more information go to:</p>
<ul>
<li>Package <a href="https://github.com/echasnovski/comperes#comperes-manage-competition-results">README</a>.</li>
<li>Package <a href="https://echasnovski.github.io/comperes/articles/">vignettes</a>.</li>
<li>My <a href="../blog/2018-05-09-harry-potter-and-competition-results-with-comperes.html">previous post</a> for usage examples based on built-in <code>hp_survey</code> data set (results of my <a href="../blog/2018-04-09-struggle-with-harry-potter-data.html">Harry Potter Books Survey</a>).</li>
</ul>
<p>Besides tools for competition results, <code>comperes</code> offers some functions that can be useful in more general tasks. This post presents examples of their most common usage.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>This post covers the following themes:</p>
<ul>
<li><strong>Compute vector levels</strong> with <a href="https://echasnovski.github.io/comperes/reference/levels2.html">levels2()</a>.</li>
<li><strong>Manage item summaries</strong> with <a href="https://echasnovski.github.io/comperes/reference/item-summary.html">summarise_item()</a> and <a href="https://echasnovski.github.io/comperes/reference/item-summary-join.html">join_item_summary()</a>.</li>
<li><strong>Convert pairwise data</strong> with <a href="https://echasnovski.github.io/comperes/reference/convert-pair-value.html">long_to_mat() and mat_to_long()</a>.</li>
</ul>
<p>For examples we will use a shortened version of the everlasting <code>mtcars</code> data set. We will need the following setup:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(comperes)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For example analysis</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-6"></span>
<span id="cb1-7">mtcars_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames_to_column</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"car"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(car, cyl, vs, carb) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
</section>
<section id="compute-vector-levels" class="level1">
<h1>Compute vector levels</h1>
<p>We will start with the most simple function. During <code>comperes</code> development, idea about the it really helped me reason more clearly about package functional API. I am talking about <a href="https://echasnovski.github.io/comperes/reference/levels2.html">levels2()</a> which computes “levels” of any non-list vector.</p>
<p>It has the following logic: if <code>x</code> has <code>levels</code> attribute then return <code>levels(x)</code>; otherwise return character representation of vector’s sorted unique values. Notes about design and implementation of this function:</p>
<ul>
<li>I hesitated <em>a lot</em> about whether it should return character or same type as input vector in case <code>x</code> has no <code>levels</code>. In many practical cases there is a need in latter behavior. However, in the end I decided that type stable output (<code>levels(x)</code> always returns character vector or <code>NULL</code>) is better.</li>
<li>Conversion to character is done <strong>after</strong> sorting, which is really important when dealing with numeric vectors.</li>
</ul>
<p>This function is helpful when one needs to produce unique values in standardized manner (for example, during pairwise distance computation). Some examples:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels2</span>(mtcars_tbl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span>
<span id="cb2-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "4" "6" "8"</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Importance of conversion to character after sorting</span></span>
<span id="cb2-5">tricky_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(tricky_vec))</span>
<span id="cb2-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "1"  "10" "12" "2"</span></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels2</span>(tricky_vec)</span>
<span id="cb2-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "1"  "2"  "10" "12"</span></span></code></pre></div>
</section>
<section id="manage-item-summaries" class="level1">
<h1>Manage item summaries</h1>
<p>Arguably, the most common task in data analysis is computation of group summaries. This task is conveniently done by consecutive application of <a href="https://dplyr.tidyverse.org/">dplyr</a>’s <code>group_by()</code>, <code>summarise()</code> and <code>ungroup()</code> (to return regular data frame and not grouped one). <code>comperes</code> offers a wrapper <a href="https://echasnovski.github.io/comperes/reference/item-summary.html">summarise_item()</a> for this task (which always returns <a href="https://tibble.tidyverse.org/">tibble</a> instead of a data frame) with additional feature of modifying column names by adding prefix (which will be handy soon):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">cyl_vs_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_item</span>(</span>
<span id="cb3-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">item =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vs"</span>),</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_carb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carb),</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl_vs__"</span></span>
<span id="cb3-6">  )</span>
<span id="cb3-7">cyl_vs_summary</span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 5 x 4</span></span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     cyl    vs cyl_vs__n cyl_vs__mean_carb</span></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt;     &lt;int&gt;             &lt;dbl&gt;</span></span>
<span id="cb3-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1    4.    0.         1              2.00</span></span>
<span id="cb3-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2    4.    1.        10              1.50</span></span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3    6.    0.         3              4.67</span></span>
<span id="cb3-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4    6.    1.         4              2.50</span></span>
<span id="cb3-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5    8.    0.        14              3.50</span></span></code></pre></div>
<p>Sometimes, there is also a need to compare actual values with their summaries across different grouping. For example, <strong>determine whether car’s number of carburetors (<code>carb</code>) is bigger than average value per different groupings</strong>: by number of cylinders <code>cyl</code> and V/S <code>vs</code>.</p>
<p>To simplify this task, <code>comperes</code> offers a <a href="https://echasnovski.github.io/comperes/reference/item-summary-join.html">join_item_summary()</a> function for that: it computes item summary with <code>summarise_item()</code> and joins it (with <code>dplyr::left_join()</code>) to input data frame:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save (with rlang magic) expression for reused summary</span></span>
<span id="cb4-2">carb_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_carb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(carb)))</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create new columns with joined grouped summaries</span></span>
<span id="cb4-5">mtcats_gear_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_item_summary</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span> carb_summary, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl__"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join_item_summary</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vs"</span>,  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span> carb_summary, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vs__"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(mtcats_gear_summary, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>)</span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 6</span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   car                 cyl    vs  carb cyl__mean_carb vs__mean_carb</span></span>
<span id="cb4-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;</span></span>
<span id="cb4-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 Mazda RX4            6.    0.    4.           3.43          3.61</span></span>
<span id="cb4-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 Mazda RX4 Wag        6.    0.    4.           3.43          3.61</span></span>
<span id="cb4-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 Datsun 710           4.    1.    1.           1.55          1.79</span></span>
<span id="cb4-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 Hornet 4 Drive       6.    1.    1.           3.43          1.79</span></span>
<span id="cb4-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 Hornet Sportabout    8.    0.    2.           3.50          3.61</span></span>
<span id="cb4-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute comparisons</span></span>
<span id="cb4-21">mtcats_gear_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_carb"</span>)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(carb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(car, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ends_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_carb"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>car), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__mean_carb$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, .)))</span>
<span id="cb4-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 3</span></span>
<span id="cb4-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   car               cyl   vs</span></span>
<span id="cb4-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;             &lt;lgl&gt; &lt;lgl&gt;</span></span>
<span id="cb4-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 Mazda RX4         TRUE  TRUE</span></span>
<span id="cb4-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 Mazda RX4 Wag     TRUE  TRUE</span></span>
<span id="cb4-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 Datsun 710        FALSE FALSE</span></span>
<span id="cb4-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 Hornet 4 Drive    FALSE FALSE</span></span>
<span id="cb4-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 Hornet Sportabout FALSE FALSE</span></span>
<span id="cb4-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span></code></pre></div>
<p>Adding different prefixes helps navigating through columns with different summaries.</p>
</section>
<section id="convert-pairwise-data" class="level1">
<h1>Convert pairwise data</h1>
<p>One of the main features of <code>comperes</code> is the ability to compute <a href="https://echasnovski.github.io/comperes/reference/h2h_long.html#head-to-head-value">Head-to-Head</a> values of players in competition. There are functions <code>h2h_long()</code> and <code>h2h_mat()</code> which produce output in “long” (tibble with row describing one ordered pair) and “matrix” (matrix with cell value describing pair in corresponding row and column) formats respectively.</p>
<p>These formats of pairwise data is quite common: “long” is better for tidy computing and “matrix” is better for result presentation. Also converting distance matrix to data frame with pair data is a theme of several Stack Overflow questions (for example, <a href="https://stackoverflow.com/questions/27892100/distance-matrix-to-pairwise-distance-list-in-r">this one</a> and <a href="https://stackoverflow.com/questions/21180464/distance-matrix-to-data-frame-pairs-in-r">that one</a>).</p>
<p>Package <code>comperes</code> has functions <code>as_h2h_long()</code> and <code>as_h2h_mat()</code> for converting between those formats. They are powered by a “general usage” functions <a href="https://echasnovski.github.io/comperes/reference/convert-pair-value.html">long_to_mat() and mat_to_long()</a>. Here is an example of how they can be used to convert between different formats of pairwise distances:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute matrix of pairwise distances based on all numeric columns</span></span>
<span id="cb5-2">dist_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_if</span>(is.numeric) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>()</span>
<span id="cb5-6">dist_mat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          1        2        3        4</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 0.000000 0.000000 3.741657 3.162278</span></span>
<span id="cb5-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 0.000000 0.000000 3.741657 3.162278</span></span>
<span id="cb5-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 3.741657 3.741657 0.000000 2.000000</span></span>
<span id="cb5-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 3.162278 3.162278 2.000000 0.000000</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data frame (tibble in this case)</span></span>
<span id="cb5-14">dist_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dist_mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mat_to_long</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id_1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id_2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dist"</span>)</span>
<span id="cb5-16">dist_tbl</span>
<span id="cb5-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1,024 x 3</span></span>
<span id="cb5-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   id_1  id_2   dist</span></span>
<span id="cb5-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;</span></span>
<span id="cb5-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 1     1      0.</span></span>
<span id="cb5-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 1     2      0.</span></span>
<span id="cb5-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 1     3      3.74</span></span>
<span id="cb5-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 1     4      3.16</span></span>
<span id="cb5-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 1     5      2.83</span></span>
<span id="cb5-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 1,019 more rows</span></span>
<span id="cb5-26"></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert tibble back to matrix</span></span>
<span id="cb5-28">dist_mat_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dist_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To make natural row and column sortings</span></span>
<span id="cb5-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id_2"</span>), as.numeric) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">long_to_mat</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id_1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id_2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dist"</span>)</span>
<span id="cb5-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(dist_mat, dist_mat_new)</span>
<span id="cb5-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] TRUE</span></span></code></pre></div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<ul>
<li>Package <code>comperes</code> provides not only tools for managing competition results but also functions with general purpose:
<ul>
<li>Compute vector levels with <code>levels2()</code>. Usually used to produce unique values in standardized manner.</li>
<li>Manage item summaries with <code>summarise_item()</code> and <code>join_item_summary()</code>. May be used to concisely compute comparisons of values with summaries from different groupings.</li>
<li>Convert pairwise data with <code>long_to_mat()</code> and <code>mat_to_long()</code>. Very helpful in converting pairwise distances between “long” and “matrix” formats.</li>
</ul></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.4 (2018-03-15)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.4 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] bindrcpp_0.2.2   tibble_1.4.2     dplyr_0.7.5.9000 rlang_0.2.0
## [5] comperes_0.2.0
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.16     knitr_1.20       bindr_0.1.1      magrittr_1.5
##  [5] tidyselect_0.2.4 R6_2.2.2         stringr_1.3.0    tools_3.4.4
##  [9] xfun_0.1         utf8_1.1.3       cli_1.0.0        htmltools_0.3.6
## [13] yaml_2.1.17      rprojroot_1.3-2  digest_0.6.15    assertthat_0.2.0
## [17] crayon_1.3.4     bookdown_0.7     purrr_0.2.4      glue_1.2.0
## [21] evaluate_0.10.1  rmarkdown_1.9    blogdown_0.5     stringi_1.1.6
## [25] compiler_3.4.4   pillar_1.2.1     backports_1.1.2  pkgconfig_2.0.1</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>comperes</category>
  <guid>https://echasnovski.com/blog/2018-05-15-general-gems-of-comperes.html</guid>
  <pubDate>Wed, 16 May 2018 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Harry Potter and competition results with comperes</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2018-05-09-harry-potter-and-competition-results-with-comperes.html</link>
  <description><![CDATA[ 





<!-- ```{r setup, include = FALSE} -->
<!-- n_resp <- length(unique(comperes::hp_survey$person)) -->
<!-- max_game_players <- max(table(comperes::hp_survey$person)) -->
<!-- ``` -->
<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>About a month ago I decided to add interesting data set to my almost finished (hopefully, soon to be on CRAN) <a href="https://github.com/echasnovski/comperes">comperes</a> package. Data should represent results of some not ordinary competition. After some thought I picked a “competition” between Harry Potter books with a goal eventually to rate them from worst to best. After a series of events I ended up creating data myself. You can read more about that in my <a href="../blog/2018-04-09-struggle-with-harry-potter-data.html">previous post</a>.</p>
<p>Post and survey in general were popularized mostly among R users with <a href="https://www.r-bloggers.com/">R-bloggers</a> (which gave me ~53 respondents), <a href="https://twitter.com/">Twitter</a> (which added the rest) and <a href="https://www.reddit.com/r/rstats/">Reddit</a> (which added ~0 people as post was deleted soon after publication). Survey managed to attract 182 respondents. I want to greatly thank all people who took their time to take part in and spread a word about my survey. Special thanks goes to <a href="https://twitter.com/dataandme">Mara Averick</a> who started a Twitter wave.</p>
<p>This post has two goals:</p>
<ul>
<li>Present and explore results of the survey.</li>
<li>Demonstrate basic functionality of <code>comperes</code> package. To learn more go to its <a href="https://github.com/echasnovski/comperes#comperes">README</a> and vignettes.</li>
</ul>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>Survey results can be obtained by installing development version of <code>comperes</code> package from GitHub. They are present as package data named <code>hp_survey</code>.</p>
<p>This post will cover the following topics:</p>
<ul>
<li><strong>Exploration</strong> of survey results (most important being <strong>Book scores</strong> section).</li>
<li>Description of <code>comperes</code> <strong>competition results</strong> formats with conversion <code>hp_survey</code> to one of them.</li>
<li><strong>Head-to-Head</strong> “performance” of books against each other.</li>
</ul>
<p>We will need the following setup:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(comperes)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">201805</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>())</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Authenticity palette</span></span>
<span id="cb1-13">hp_pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Gryff =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#D02037"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Huffl =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#F0C346"</span>,</span>
<span id="cb1-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Raven =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2450A8"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Raven_light =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0088FF"</span>,</span>
<span id="cb1-15">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Slyth =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#09774A"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For less noisy bar charts</span></span>
<span id="cb1-18">theme_bar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.major.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb1-20">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.minor.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()))</span>
<span id="cb1-21">}</span></code></pre></div>
</section>
<section id="exploration" class="level1">
<h1>Exploration</h1>
<section id="data-preparation" class="level2">
<h2 class="anchored" data-anchor-id="data-preparation">Data preparation</h2>
<p><code>hp_suvery</code> is a <a href="http://tibble.tidyverse.org/">tibble</a> (enhanced data frame) and has the following columns:</p>
<ul>
<li><strong>person</strong> &lt;int&gt; : Identifier of a person.</li>
<li><strong>book</strong> &lt;chr&gt; : Identifier of a Harry Potter book. Its values are of the form “HP_x” where “x” represents book’s number in the series (from 1 to 7).</li>
<li><strong>score</strong> &lt;chr&gt; : Book’s score. Can be one of “1 - Poor”, “2 - Fair”, “3 - Good”, “4 - Very Good”, “5 - Excellent”.</li>
</ul>
<p><em>For exploration</em>, let’s transform <code>hp_survey</code> for more expressive code and results:</p>
<ul>
<li>Convert scores to numerical.</li>
<li>Add book names.</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">book_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Philosopher's (Sorcerer's) Stone (#1)"</span>,</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chamber of Secrets (#2)"</span>,</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prisoner of Azkaban (#3)"</span>,</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Goblet of Fire (#4)"</span>,</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Order of the Phoenix (#5)"</span>,</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Half-Blood Prince (#6)"</span>,</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deathly Hallows (#7)"</span></span>
<span id="cb2-9">  )</span>
<span id="cb2-10">book_name_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">book =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HP_"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb2-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">book_name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(book_names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> book_names)</span>
<span id="cb2-13">)</span>
<span id="cb2-14"></span>
<span id="cb2-15">hp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_survey <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract numerical score</span></span>
<span id="cb2-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score_chr =</span> score) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[^0-9].*$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, score_chr))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add book names</span></span>
<span id="cb2-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> book_name_tbl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"book"</span>)</span>
<span id="cb2-21"></span>
<span id="cb2-22">hp</span>
<span id="cb2-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 657 x 5</span></span>
<span id="cb2-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   person book  score_chr     score book_name</span></span>
<span id="cb2-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;         &lt;int&gt; &lt;fct&gt;</span></span>
<span id="cb2-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1      1 HP_6  5 - Excellent     5 Half-Blood Prince (#6)</span></span>
<span id="cb2-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2      1 HP_7  5 - Excellent     5 Deathly Hallows (#7)</span></span>
<span id="cb2-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3      2 HP_1  3 - Good          3 Philosopher's (Sorcerer's) Stone (#1)</span></span>
<span id="cb2-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4      2 HP_4  5 - Excellent     5 Goblet of Fire (#4)</span></span>
<span id="cb2-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5      2 HP_5  2 - Fair          2 Order of the Phoenix (#5)</span></span>
<span id="cb2-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 652 more rows</span></span></code></pre></div>
</section>
<section id="subset-uniformity" class="level2">
<h2 class="anchored" data-anchor-id="subset-uniformity">Subset uniformity</h2>
<p>The first step in the survey was to choose the first element in the randomly shuffled list to simulate generation of random subset from all books. Each of 127 list element was connected to one subset. Lets visualize subset frequency to ensure a good faith of respondents:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute subset representations</span></span>
<span id="cb3-2">hp_subsets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(person, book) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(person) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subset =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(book, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>))</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the number of actually picked subsets</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n_distinct</span>(hp_subsets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>subset)</span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 95</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize</span></span>
<span id="cb3-12">hp_subsets <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(subset)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> hp_pal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gryff"</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb3-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subset"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of times subset was picked"</span>,</span>
<span id="cb3-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Picked subsets have fairly uniform distribution"</span></span>
<span id="cb3-18">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-05-09-harry-potter-and-competition-results-with-comperes/subset-frequency-1.png" class="img-fluid"></p>
<p>So there are 95 subsets actually picked and their distribution seems reasonably uniform. This is enough for me to confirm that randomization for subsets was successful.</p>
</section>
<section id="book-presence" class="level2">
<h2 class="anchored" data-anchor-id="book-presence">Book presence</h2>
<p>Other important thing to explore is number of times book was actually rated:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">hp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(book_name)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> hp_pal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Huffl"</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cool way to wrap labels for a given width</span></span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_wrap</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb4-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of present scores"</span>,</span>
<span id="cb4-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some books were rated more times than others"</span>,</span>
<span id="cb4-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"But it seems fine"</span></span>
<span id="cb4-10">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bar</span>()</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-05-09-harry-potter-and-competition-results-with-comperes/book-frequency-1.png" class="img-fluid"></p>
</section>
<section id="book-scores" class="level2">
<h2 class="anchored" data-anchor-id="book-scores">Book scores</h2>
<p>The most obvious way to summarise book “performance” is its mean score of numerical representation of scale. Using mean is not harmful in this study as no outlier can be present.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">hp_book_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(book_name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(score), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(mean_score))</span>
<span id="cb5-5"></span>
<span id="cb5-6">hp_book_score</span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 2</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   book_name                             mean_score</span></span>
<span id="cb5-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;fct&gt;                                      &lt;dbl&gt;</span></span>
<span id="cb5-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 Prisoner of Azkaban (#3)                    4.19</span></span>
<span id="cb5-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 Half-Blood Prince (#6)                      4.13</span></span>
<span id="cb5-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 Goblet of Fire (#4)                         4.00</span></span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 Deathly Hallows (#7)                        3.96</span></span>
<span id="cb5-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 Philosopher's (Sorcerer's) Stone (#1)       3.91</span></span>
<span id="cb5-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 Order of the Phoenix (#5)                   3.90</span></span>
<span id="cb5-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 Chamber of Secrets (#2)                     3.55</span></span></code></pre></div>
<p><strong>So, “the best” book seems to be “Harry Potter and the Prisoner of Azkaban (#3)”</strong>.</p>
<p>For more understanding of results, lets also visualize score distribution.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">hp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute share of score per book</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(book_name, score) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(book_name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">share =</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>(</span>
<span id="cb6-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(score, share, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> score, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> score),</span>
<span id="cb6-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb6-12">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb6-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> hp_book_score,</span>
<span id="cb6-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean = "</span>, mean_score)),</span>
<span id="cb6-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>,</span>
<span id="cb6-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span></span>
<span id="cb6-18">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> book_name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(</span>
<span id="cb6-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb6-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Poor"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Fair"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Good"</span>,</span>
<span id="cb6-23">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Very</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Good"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Excellent"</span>)</span>
<span id="cb6-24">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradient</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">low =</span> hp_pal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Raven"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">high =</span> hp_pal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Raven_light"</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradient</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">low =</span> hp_pal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Raven"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">high =</span> hp_pal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Raven_light"</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb6-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Score share per book"</span>,</span>
<span id="cb6-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"Prisoner of Azkaban (#3)" seems to be "the best" HP book'</span>,</span>
<span id="cb6-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@echasnovski"</span></span>
<span id="cb6-31">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bar</span>()</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-05-09-harry-potter-and-competition-results-with-comperes/book-score_distribution-1.png" class="img-fluid"></p>
</section>
</section>
<section id="competition-results" class="level1">
<h1>Competition results</h1>
<section id="formats-of-comperes" class="level2">
<h2 class="anchored" data-anchor-id="formats-of-comperes">Formats of comperes</h2>
<p>Understanding of <strong>competition</strong> is quite general: it is a set of <strong>games</strong> (abstract event) in which <strong>players</strong> (abstract entity) gain some abstract <strong>scores</strong> (typically numeric). Inside games all players are treated equally. The most natural example is sport results, however not the only one. For example, product rating can be considered as a competition between products as “players”. Here a “game” is a customer that reviews a set of products by rating them with numerical “score” (stars, points, etc.).</p>
<p>In case of Harry Potter Books Survey results “game” is an act of respondent taking part in survey, “player” - Harry Potter book, “score” - discrete scale values converted to numerical score from 1 to 5.</p>
<p>In <code>comperes</code> there are two supported formats of competition results:</p>
<ul>
<li><strong>Long format</strong>. It is the most abstract way of presenting competition results. Basically, it is a data frame (or tibble) with columns <code>game</code> (game identifier), <code>player</code> (player identifier) and <code>score</code> where <em>each row represents the score of particular player in particular game</em>. One game can consist from <strong>variable</strong> number of players which makes this format more usable. Extra columns are allowed.</li>
<li><strong>Wide format</strong> is a more convenient way to store results with <strong>fixed</strong> number of players in a game. <em>Each row represents scores of all players in particular game</em>. Data should be organized in pairs of columns “player”-“score”. Identifier of a pair should go after respective keyword and consist only from digits. For example: <code>player1</code>, <code>score1</code>, <code>player2</code>, <code>score2</code>. Order doesn’t matter. Column <code>game</code> is optional. Extra columns are also allowed.</li>
</ul>
<p>Programmatically these formats are implemented as S3 classes <code>longcr</code> and <code>widecr</code> respectively. Essentially, they are tibbles with fixed structure. Objects of these classes should be created using functions <code>as_longcr()</code> and <code>as_widecr()</code> which also do conversions to other format.</p>
</section>
<section id="conversion" class="level2">
<h2 class="anchored" data-anchor-id="conversion">Conversion</h2>
<p><code>hp_survey</code> presents results in <strong>long format</strong>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">hp_cr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_survey <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">game =</span> person, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player =</span> book,</span>
<span id="cb7-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[^0-9].*$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, score))</span>
<span id="cb7-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_longcr</span>()</span>
<span id="cb7-7"></span>
<span id="cb7-8">hp_cr</span>
<span id="cb7-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A longcr object:</span></span>
<span id="cb7-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 657 x 3</span></span>
<span id="cb7-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    game player score</span></span>
<span id="cb7-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;int&gt; &lt;chr&gt;  &lt;int&gt;</span></span>
<span id="cb7-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     1 HP_6       5</span></span>
<span id="cb7-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     1 HP_7       5</span></span>
<span id="cb7-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     2 HP_1       3</span></span>
<span id="cb7-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4     2 HP_4       5</span></span>
<span id="cb7-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5     2 HP_5       2</span></span>
<span id="cb7-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 652 more rows</span></span></code></pre></div>
<p>Here is the demonstration of conversion to <strong>wide format</strong>. It detects the maximum number of players in a game, which is 7, and assumes that data is missing in games with less number of players.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_widecr</span>(hp_cr)</span>
<span id="cb8-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A widecr object:</span></span>
<span id="cb8-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 182 x 15</span></span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    game player1 score1 player2 score2 player3 score3 player4 score4</span></span>
<span id="cb8-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt;</span></span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     1 HP_6         5 HP_7         5 &lt;NA&gt;        NA &lt;NA&gt;        NA</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     2 HP_1         3 HP_4         5 HP_5         2 HP_6         4</span></span>
<span id="cb8-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     3 HP_1         3 HP_3         4 HP_5         1 &lt;NA&gt;        NA</span></span>
<span id="cb8-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4     4 HP_6         5 HP_7         5 &lt;NA&gt;        NA &lt;NA&gt;        NA</span></span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5     5 HP_4         4 HP_5         3 &lt;NA&gt;        NA &lt;NA&gt;        NA</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 177 more rows, and 6 more variables: player5 &lt;chr&gt;,</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   score5 &lt;int&gt;, player6 &lt;chr&gt;, score6 &lt;int&gt;, player7 &lt;chr&gt;, score7 &lt;int&gt;</span></span></code></pre></div>
</section>
</section>
<section id="head-to-head" class="level1">
<h1>Head-to-Head</h1>
<section id="functionality-of-comperes" class="level2">
<h2 class="anchored" data-anchor-id="functionality-of-comperes">Functionality of comperes</h2>
<p>Head-to-Head value is a <strong>summary statistic of direct confrontation between two players</strong>. It is assumed that this value can be computed based only on the players’ matchups (results for ordered pairs of players from one game). In other words, every game is converted into series of “subgames” between ordered pairs of players (including selfplay) which is stored as <code>widecr</code> object. After that, summary of item, defined by columns player1 and player2, is computed.</p>
<p><code>comperes</code> has function <code>get_matchups()</code> for computing matchups:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_matchups</span>(hp_cr)</span>
<span id="cb9-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A widecr object:</span></span>
<span id="cb9-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2,697 x 5</span></span>
<span id="cb9-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    game player1 score1 player2 score2</span></span>
<span id="cb9-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt;</span></span>
<span id="cb9-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     1 HP_6         5 HP_6         5</span></span>
<span id="cb9-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     1 HP_6         5 HP_7         5</span></span>
<span id="cb9-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     1 HP_7         5 HP_6         5</span></span>
<span id="cb9-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4     1 HP_7         5 HP_7         5</span></span>
<span id="cb9-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5     2 HP_1         3 HP_1         3</span></span>
<span id="cb9-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 2,692 more rows</span></span></code></pre></div>
<p>To compute multiple Head-to-Head values, use <code>h2h_long()</code> supplying competition results and summarizing expressions in <a href="https://dplyr.tidyverse.org/reference/summarise.html"><code>dplyr::summarise()</code></a> fashion. They will be applied to a data frame of matchups.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">hp_cr_h2h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h2h_long</span>(</span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of macthups</span></span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(),</span>
<span id="cb10-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of wins plus half the number of ties</span></span>
<span id="cb10-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># num_wins() is a function from comperes to compute number of times</span></span>
<span id="cb10-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first score is bigger than second one</span></span>
<span id="cb10-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num_wins =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">num_wins</span>(score1, score2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">half_for_draw =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb10-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean rating of a book scored in matchups with other books</span></span>
<span id="cb10-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(score1),</span>
<span id="cb10-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean rating difference of books scored in direct matchups</span></span>
<span id="cb10-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_score_diff =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(score1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> score2)</span>
<span id="cb10-12">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_if</span>(is.numeric, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb10-14"></span>
<span id="cb10-15">hp_cr_h2h</span>
<span id="cb10-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A long format of Head-to-Head values:</span></span>
<span id="cb10-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 49 x 6</span></span>
<span id="cb10-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player1 player2     n num_wins mean_score mean_score_diff</span></span>
<span id="cb10-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;</span></span>
<span id="cb10-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1    HP_1      88.     44.0       3.91          0.</span></span>
<span id="cb10-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_1    HP_2      42.     29.5       3.88          0.500</span></span>
<span id="cb10-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_1    HP_3      51.     19.5       3.92         -0.390</span></span>
<span id="cb10-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_1    HP_4      48.     24.0       3.79          0.0400</span></span>
<span id="cb10-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_1    HP_5      42.     21.5       3.79          0.</span></span>
<span id="cb10-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 44 more rows</span></span></code></pre></div>
<p>So here we see, for example, that <code>HP_1</code> and <code>HP_2</code> had 42 matchups, i.e.&nbsp;they were rated by the same person 42 times. <code>HP_1</code> “won” 29.5 (respecting ties) times, gained mean score of 3.88 in those matchups and had, on average, 0.5 points more.</p>
<p>There is also an <code>h2h_mat()</code> function which computes a matrix of Head-to-Head values for one expression.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h2h_mat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">num_wins</span>(score1, score2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">half_for_draw =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb11-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A matrix format of Head-to-Head values:</span></span>
<span id="cb11-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      HP_1 HP_2 HP_3 HP_4 HP_5 HP_6 HP_7</span></span>
<span id="cb11-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_1 44.0 29.5 19.5 24.0 21.5 17.0 24.0</span></span>
<span id="cb11-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_2 12.5 40.0 12.0 11.5 10.5 12.0 19.0</span></span>
<span id="cb11-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_3 31.5 32.0 49.0 31.5 28.0 25.0 33.5</span></span>
<span id="cb11-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_4 24.0 33.5 26.5 49.5 23.5 30.5 31.5</span></span>
<span id="cb11-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_5 20.5 25.5 15.0 24.5 42.0 23.0 24.5</span></span>
<span id="cb11-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_6 25.0 30.0 20.0 27.5 24.0 50.0 34.0</span></span>
<span id="cb11-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## HP_7 26.0 34.0 21.5 29.5 25.5 26.0 54.0</span></span></code></pre></div>
<p>For more convenient usage, <code>comperes</code> has a list <code>h2h_funs</code> of some common Head-to-Head functions stored as <a href="http://rlang.r-lib.org/reference/quotation.html">expressions</a>. To use them you need a little bit of <a href="http://rlang.r-lib.org/index.html">rlang</a>’s <a href="http://rlang.r-lib.org/reference/quasiquotation.html">unquoting magic</a>.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">h2h_funs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb12-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $mean_score_diff</span></span>
<span id="cb12-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## mean(score1 - score2)</span></span>
<span id="cb12-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb12-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $mean_score_diff_pos</span></span>
<span id="cb12-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## max(mean(score1 - score2), 0)</span></span>
<span id="cb12-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb12-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $mean_score</span></span>
<span id="cb12-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## mean(score1)</span></span>
<span id="cb12-10"></span>
<span id="cb12-11">hp_cr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h2h_long</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span> h2h_funs)</span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A long format of Head-to-Head values:</span></span>
<span id="cb12-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 49 x 11</span></span>
<span id="cb12-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   player1 player2 mean_score_diff mean_score_diff_pos mean_score</span></span>
<span id="cb12-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;   &lt;chr&gt;             &lt;dbl&gt;               &lt;dbl&gt;      &lt;dbl&gt;</span></span>
<span id="cb12-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 HP_1    HP_1             0.                  0.           3.91</span></span>
<span id="cb12-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 HP_1    HP_2             0.500               0.500        3.88</span></span>
<span id="cb12-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 HP_1    HP_3            -0.392               0.           3.92</span></span>
<span id="cb12-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 HP_1    HP_4             0.0417              0.0417       3.79</span></span>
<span id="cb12-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 HP_1    HP_5             0.                  0.           3.79</span></span>
<span id="cb12-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 44 more rows, and 6 more variables: sum_score_diff &lt;int&gt;,</span></span>
<span id="cb12-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   sum_score_diff_pos &lt;dbl&gt;, sum_score &lt;int&gt;, num_wins &lt;dbl&gt;,</span></span>
<span id="cb12-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   num_wins2 &lt;dbl&gt;, num &lt;int&gt;</span></span></code></pre></div>
</section>
<section id="harry-potter-books" class="level2">
<h2 class="anchored" data-anchor-id="harry-potter-books">Harry Potter books</h2>
<p>Head-to-Head “performance” of Harry Potter books is summarised in the following plot:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">hp_cr_h2h <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gather</span>(h2h_fun, value, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>player1, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>player2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Manually produce a dummy colour variable to use in facets</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(h2h_fun) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> (value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(value))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make factors for correct orders</span></span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb13-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(player1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(player1)))),</span>
<span id="cb13-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(player2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(player2))),</span>
<span id="cb13-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h2h_fun =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(h2h_fun,</span>
<span id="cb13-12">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"num_wins"</span>,</span>
<span id="cb13-13">                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean_score_diff"</span>)),</span>
<span id="cb13-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h2h_fun =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recode</span>(</span>
<span id="cb13-15">      h2h_fun,</span>
<span id="cb13-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of matchups (ratings by common person)"</span>,</span>
<span id="cb13-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num_wins =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Number of "wins" in matchups (half for ties)'</span>,</span>
<span id="cb13-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_score =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean score in matchups"</span>,</span>
<span id="cb13-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_score_diff =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean score difference in matchups"</span></span>
<span id="cb13-20">    )</span>
<span id="cb13-21">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize</span></span>
<span id="cb13-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(player1, player2)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb13-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> col),</span>
<span id="cb13-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fontface =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb13-27">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> h2h_fun, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To coordinate well with matrix form of Head-to-Head results</span></span>
<span id="cb13-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_flip</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradient</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">low =</span> hp_pal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Slyth"</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">high =</span> hp_pal[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gryff"</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb13-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb13-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Head-to-Head performance of Harry Potter books"</span>,</span>
<span id="cb13-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb13-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"HP_x" means Harry Potter book number "x" in series</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb13-37">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numbers are Head-to-Head values of book in row against book in column"</span></span>
<span id="cb13-38">      ),</span>
<span id="cb13-39">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@echasnovski"</span></span>
<span id="cb13-40">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>))</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-05-09-harry-potter-and-competition-results-with-comperes/hp_cr_h2h-plot-1.png" class="img-fluid"></p>
<p>There is a lot of information hidden in this plot. The most obvious discoveries:</p>
<ul>
<li>It happened that book <em>“HP_7”</em> (“Deathly Hallows”) was rated with <em>“HP_4”</em> (“Goblet of Fire”) by one person the most: 61 times.</li>
<li><em>“HP_7”</em> scored over <em>“HP_2”</em> (“Chamber of Secrets”) the most wins (34, half for ties) as did <em>“HP_6”</em> (“Half-Blood Prince”) over “HP_7”.</li>
<li>Book <em>“HP_6”</em> made the highest mean score of 4.36 in matchups with <em>“HP_2”</em>, which is bigger by 0.23 from its overall mean score.</li>
<li>In terms of score differences, <em>“HP_3”</em> (“Prisoner of Azkaban”) did best in matchups with <em>“HP_2”</em>, scoring on average 0.77 points more. This pair also represents “the best” and “the worst” books in terms of mean score.</li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<ul>
<li>A public call for help in creating data set for R package shouldn’t be made on Reddit but rather on R-bloggers or Twitter.</li>
<li>Among all original Harry Potter books, “Harry Potter and the Prisoner of Azkaban” seems to be considered “best” among R users. “Harry Potter and the Chamber of Secrets” suffers the opposite fate.</li>
<li>Package <code>comperes</code> is useful for storing, manipulating and summarising abstract competition results.</li>
<li>However informative, manually inspecting competition results with direct summaries and Head-to-Head tables is hard. They can display complex nature of performance relations between players. Next analysis of Harry Potter Books Survey data will be using my package <a href="https://github.com/echasnovski/comperank">comperank</a> which implements different ranking methods for automatic discovery of player’s performance.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.4 (2018-03-15)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.4 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] bindrcpp_0.2.2   comperes_0.2.0   ggplot2_2.2.1    stringr_1.3.0
## [5] rlang_0.2.0      tidyr_0.8.0.9000 dplyr_0.7.5.9000
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.16     pillar_1.2.1     compiler_3.4.4   plyr_1.8.4
##  [5] bindr_0.1.1      tools_3.4.4      digest_0.6.15    evaluate_0.10.1
##  [9] tibble_1.4.2     gtable_0.2.0     pkgconfig_2.0.1  cli_1.0.0
## [13] yaml_2.1.17      blogdown_0.5     xfun_0.1         knitr_1.20
## [17] rprojroot_1.3-2  grid_3.4.4       tidyselect_0.2.4 glue_1.2.0
## [21] R6_2.2.2         rmarkdown_1.9    bookdown_0.7     purrr_0.2.4
## [25] magrittr_1.5     backports_1.1.2  scales_0.5.0     htmltools_0.3.6
## [29] assertthat_0.2.0 colorspace_1.3-2 labeling_0.3     utf8_1.1.3
## [33] stringi_1.1.6    lazyeval_0.2.1   munsell_0.4.3    crayon_1.3.4</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>comperes</category>
  <guid>https://echasnovski.com/blog/2018-05-09-harry-potter-and-competition-results-with-comperes.html</guid>
  <pubDate>Tue, 08 May 2018 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Struggle with Harry Potter Data</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2018-04-09-struggle-with-harry-potter-data.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Right now I am in the final stage of developing two packages devoted to results of abstract competitions (still not perfectly ready, so use with caution):</p>
<ul>
<li><a href="https://github.com/echasnovski/comperes">comperes</a> - infrastructure package for dealing with different formats of competition results and summarising them.</li>
<li><a href="https://github.com/echasnovski/comperank">comperank</a> - package which implements some rating and ranking algorithms. Inspired and driven by insightful book <a href="https://www.amazon.com/Whos-1-Science-Rating-Ranking/dp/069116231X">Who’s #1?: The Science of Rating and Ranking</a> by Amy N. Langville and Carl D. Meyer.</li>
</ul>
<p>Understanding of <strong>competition</strong> is quite general: it is a set of <strong>games</strong> (abstract event) in which <strong>players</strong> (abstract entity) gain some abstract <strong>scores</strong> (typically numeric).</p>
<p>Both packages use example data set called <code>ncaa2005</code> which is results of an isolated group of Atlantic Coast Conference teams provided in “Who’s #1”. In order to demonstrate abstract nature of term “competition” I decided to find another data set, not from the world of sports. I thought it would be easy…</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>This post describes my struggle with and process of creating Harry Potter Data with results of “competition” between seven original Harry Potter books. Long story short, I didn’t find suitable existing data and decided to make my own survey. The struggle hasn’t ended yet and I need your help. <strong>Please, take part in the survey at this <a href="https://goo.gl/siBtSy">link</a></strong>. It is a fairly standard <a href="https://www.google.com/intl/en/forms/about/">Google Form</a> with two questions: first one simulates picking random subset of books (read about that later); second offers rating choices. And that’s it. Please, note the following:</p>
<ul>
<li><em>It is assumed that you’ve read all seven original J. K. Rowling Harry Potter books and are willing to give an honest feedback about your impressions</em>.</li>
<li><em>In order to answer you have to sign in your Google account</em>. This is done to ensure that one person participates in the survey only once. Your personal data won’t become public because I will not track it.</li>
</ul>
<p>This post has the following structure:</p>
<ul>
<li><strong>Decision about the source</strong> describes how I ended up with conducting my own survey.</li>
<li><strong>Survey design</strong> has my thoughts about how I approached creating the survey.</li>
<li><strong>Implementation</strong> describes technical details about creating a survey using Google Forms and JavaScript.</li>
</ul>
</section>
<section id="decision-about-the-source" class="level1">
<h1>Decision about the source</h1>
<p>After all sorts of games, the process of people rating common items is, probably, the most common example of competition. Here items can be considered as “players”. “Game” is a person that reviews a set of items by rating them with numerical “score” (stars, points, etc.). To produce this data set I need data in the following format (called “long” in terminology of aforementioned packages):</p>
<ul>
<li><strong>Person identifier</strong> (anonymized). It will serve as game identifier.</li>
<li><strong>Item identifier</strong> which this person rated.</li>
<li><strong>Numeric score</strong> of item’s rating by person.</li>
</ul>
<p>One person can rate multiple items but only once, to avoid bias in the output.</p>
<p>After some thought I picked seven original J.K. Rowling “Harry Potter” books as items. Besides being interesting and popular books, I figured that it won’t be hard to find a data set with information I need. It wasn’t quite right because all available data sets don’t seem to have suitable license:</p>
<ul>
<li>There are rating on Amazon but I didn’t find an easy way to even get the data.</li>
<li>My second candidate, <a href="https://www.goodreads.com/">Goodreads</a> site, has an API which provides data exactly I need. However, their <a href="https://www.goodreads.com/api/terms">Developer Terms of Service</a> doesn’t look “R package with MIT license” friendly.</li>
<li>There is also Kaggle’s <a href="https://www.kaggle.com/zygmunt/goodbooks-10k">goodbooks-10k</a> data set. This comes as close to my needs as I could find. Nevertheless, it is still Goodreads data, so I am not sure about it.</li>
</ul>
<p>All this led me to conducting my own survey. The good news is that this way I am the full owner of the data set with no license issues. The bad news - I should conduct the survey…</p>
</section>
<section id="survey-design" class="level1">
<h1>Survey design</h1>
<p>The freedom in creating your own survey is overwhelming. Basically, you can do whatever you like and can wish to obtain any data you want. In grim reality, there are a couple of things to consider:</p>
<ul>
<li><strong>Survey should collect data that will actually help to fulfill its goals</strong>. It should be designed in a way that minimizes the chance of misinterpretation by respondents.</li>
<li><strong>Survey should be implemented and conducted in the form that is accessible to people as much as possible</strong>. This is needed to collect more data with less efforts.</li>
</ul>
<p>The goal of my Harry Potter Survey can be formulated as follows: <em>collect data enough to rank Harry Potter books from worst to best</em>. The most common way to do that is to mimic rating process from various online marketplaces. In more scientific language it means to <em>ask a question using <a href="https://en.wikipedia.org/wiki/Likert_scale">Likert scale</a></em>. That is, an answer to some question should be chosen from some ordinal scale. Very helpful advice can be found in this <a href="https://www.surveymonkey.com/mp/likert-scale/">SurveyMonkey article</a>. The most common Likert scales can be found <a href="http://www.marquette.edu/dsa/assessment/documents/Sample-Likert-Scales.pdf">here</a>.</p>
<p>Unfortunately, I decided to read about how to conduct survey not in the beginning of constructing my own. Its core is a question that asks to associate Harry Potter Books with some numerical ratings. Evolution of this question was as follows:</p>
<ul>
<li><strong>Stage 1</strong>.
<ul>
<li><em>Question</em>: ‘Rate these BOOKS (not movies) from 1 (“very poor book”) to 7 (“exceptional book”)’. As you can see, this isn’t actually a question because at first I planned to give a <em>task</em>. Also I was trying to highly indicate that the books are of interest and not movies.</li>
<li><em>Scale</em>: numeric, from 1 to 7. This seemed logical as numeric scores will be actually used in analysis.</li>
</ul></li>
<li><strong>Stage 2</strong>. After reading SurveyMonkey article and other sources, drastic transformation was made. I decided to actually ask a question about satisfaction after reading the book. This makes it a personal and, for my opinion, clear question.
<ul>
<li><em>Question</em>: ‘How did you like these BOOKS?’. One thing to consider here is whether it is better to use past or present tense. At this stage I decided to go with past tense because [in my opinion] it questions a fixed moment in time “just after reading a book”. Unfortunately, it wasn’t the case.</li>
<li><em>Scale</em>: combined, from 1 to 5. It is fairly standard bipolar “Satisfaction” scale: “1 - Very dissatisfied”; “2 - Dissatisfied”; “3 - Neutral”; “4 - Satisfied”; “5 - Very satisfied”. I decided to move to 5 point scale as it is more common and should provide more reliable data. Its downside is smaller <a href="https://www.surveymonkey.com/curiosity/methodology-variance/">variance</a>. I also preserved numbers for extra indication of implied linear scale.</li>
</ul></li>
<li><strong>Stage 3</strong>. After some thought and practical testing I decided not to invent the wheel and stick with more common “Quality” scale. This has an advantage of being more or less standard, which should provide more robust data.
<ul>
<li><em>Question</em>: ‘What is your impression of these Harry Potter BOOKS?’. Added explicit indication about Harry Potter to be able to shorten books’ names. Changed to present tense because I had mixed feedback about previous question and which moment in the past it referred to. Of course, I can add explicit reference but it might overcomplicate the question. Also, question in present tense should be easier to answer.</li>
<li><em>Scale</em>: combined, from 1 to 5. It is fairly standard unipolar “Quality” scale: “1 - Poor”, “2 - Fair”, “3 - Good”, “4 - Very Good”, “5 - Excellent”.</li>
</ul></li>
</ul>
<p>After designing the basic question, there are couple of other things to consider:</p>
<ul>
<li><strong>Item names should be understandable</strong>. With seven Harry Potter books it might be confusing if they are presented only by title. So I decided to add book’s number in the series after its title. Also, explicit indication of “Harry Potter” in the title seems overcomplicating a survey, as it doesn’t add extra necessary information, so I decided to shorten it to “HP”. The resulting books are named “HP and the Philosopher’s (Sorcerer’s) Stone (#1)”, “HP and the Chamber of Secrets (#2)”, “HP and the Prisoner of Azkaban (#3)”, “HP and the Goblet of Fire (#4)”, “HP and the Order of the Phoenix (#5)”, “HP and the Half-Blood Prince (#6)”, “HP and the Deathly Hallows (#7)”.</li>
<li><strong>Actual set of items can affect the outcome</strong>. For example, if person’s favourite book is present in the list, he/she might anchor his/her other ratings to this book. This can be solved by randomizing set of books asked to rate.</li>
<li><strong>Actual order of items can affect the outcome</strong>. The reasoning is similar to previous note. This can be solved by randomizing the order of books presented.</li>
</ul>
<p>So here is the final design of a survey. Respondent is asked a question “What is your impression of these Harry Potter BOOKS?” and presented with random subset (in random order) of names of seven Harry Potter books (presented above) which should be rated on pretty standard Likert “Quality” scale (with present numeric scores).</p>
<p>About the desired number of respondents I think that hitting 100 will produce fairly usable output data set. But the more the better.</p>
<p>After exhausting process of survey design I hoped that implementation should be easy. I again wasn’t quite right…</p>
</section>
<section id="implementation" class="level1">
<h1>Implementation</h1>
<p>The main obstacle in implementing the intended survey is randomization of presented items. Also I had to keep in mind that answering process should be as easy as possible and that one person should be able to answer only once.</p>
<p>After some Internet surfing, it seemed that the most optimal way of conducting a survey is with Google Forms. It can provide an option to participate in survey only once with a downside: one should have and be logged into a Google account. It can possibly scare off potential respondents. However, Google Forms has an option to not track user data, which I gladly used. It also has a feature to randomly shuffle the order of the items used in question, which is very helpful.</p>
<p>The biggest trouble with Google Forms is that it can’t randomly generate questions. I decided to work around this problem the following way:</p>
<ul>
<li>Create many variants of question for all possible subsets of books. There are total of 127 non-empty subsets for 7 books. Items in every question should be shuffled.</li>
<li>Create dummy question (to be put first) which has a list of numbers - pointers to subsets of books. This list will be randomly shuffled for every respondent. Picking the first item from the list simulates generating random subset of books.</li>
</ul>
<p>All this can be done manually. And I’ve actually done that… However, after deciding to change the question and scale (move from “Stage 1” to “Stage 2” in question evolution), I realized that it would be better to program Form creation. As it turns out, this can be done with <a href="https://developers.google.com/apps-script/">Google Apps Script</a> which accepts JavaScript code. After learning language basics and with great support of Internet, I came up with this solution:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to generate all non-empty subsets of array</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generatePowerSet</span>(array) {</span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>)</span>
<span id="cb1-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> j))</span>
<span id="cb1-9">      subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>(array[j])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">    result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>(subset)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">  }</span>
<span id="cb1-13"></span>
<span id="cb1-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15">}</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to create target survey</span></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createHPSurvey</span>() {</span>
<span id="cb1-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> form <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FormApp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Harry Potter Books Survey'</span>)</span>
<span id="cb1-20">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setAllowResponseEdits</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span>)</span>
<span id="cb1-21">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setCollectEmail</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">false</span>)</span>
<span id="cb1-22">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setLimitOneResponsePerUser</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-23"></span>
<span id="cb1-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add select list</span></span>
<span id="cb1-25">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> selectList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> form<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addListItem</span>()</span>
<span id="cb1-26">                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setTitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Choose first listed number'</span>)</span>
<span id="cb1-27">                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setHelpText</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This simulates random subsetting of books.'</span>)</span>
<span id="cb1-28">                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setRequired</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-29"></span>
<span id="cb1-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize main questions data</span></span>
<span id="cb1-31">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> questionSingular <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'What is your impression of this Harry Potter BOOK?'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-32">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> questionPlural   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'What is your impression of these Harry Potter BOOKS?'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-33">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> likertScale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 - Poor'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2 - Fair'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3 - Good'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-34">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4 - Very Good'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5 - Excellent'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-35"></span>
<span id="cb1-36">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> books <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HP and the Philosopher's (Sorcerer's) Stone (#1)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-37">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HP and the Chamber of Secrets (#2)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-38">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HP and the Prisoner of Azkaban (#3)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-39">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HP and the Goblet of Fire (#4)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-40">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HP and the Order of the Phoenix (#5)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-41">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HP and the Half-Blood Prince (#6)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-42">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HP and the Deathly Hallows (#7)"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-43"></span>
<span id="cb1-44">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> allSubsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generatePowerSet</span>(books)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-45"></span>
<span id="cb1-46">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create pages with all subsets</span></span>
<span id="cb1-47">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> pages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// for collecting the choices in the list item</span></span>
<span id="cb1-48">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> allSubsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb1-49"></span>
<span id="cb1-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Make a section for current subset</span></span>
<span id="cb1-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> newPage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> form<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addPageBreakItem</span>()</span>
<span id="cb1-52">                      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setTitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rate books'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-53"></span>
<span id="cb1-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Set the section to submit after completing (rather than next subset section)</span></span>
<span id="cb1-55">    newPage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setGoToPage</span>(FormApp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">PageNavigationType</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SUBMIT</span>)</span>
<span id="cb1-56"></span>
<span id="cb1-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add question for current subset with scale</span></span>
<span id="cb1-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> question <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> form<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addGridItem</span>()</span>
<span id="cb1-59">                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setRows</span>(allSubsets[n])</span>
<span id="cb1-60">                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setColumns</span>(likertScale)</span>
<span id="cb1-61">                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setRequired</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (allSubsets[n]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb1-63">      question<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setTitle</span>(questionSingular)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-64">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb1-65">      question<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setTitle</span>(questionPlural)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-66">    }</span>
<span id="cb1-67"></span>
<span id="cb1-68">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Push our choice to the list select</span></span>
<span id="cb1-69">    pages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">push</span>(selectList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createChoice</span>(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> newPage))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-70">  }</span>
<span id="cb1-71"></span>
<span id="cb1-72">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add all subsets to select list</span></span>
<span id="cb1-73">  selectList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setChoices</span>(pages)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-74">}</span></code></pre></div>
<p>This code should be run into Google Apps Script project. It creates a Google Form named “Harry Potter Books Survey” and stores it on Google Drive.</p>
<p>Unfortunately, I didn’t find option of adding shuffling programmatically for every question, so I did it manually… one by one. I thought for a while about creating questions not only for every subset but also for its every permutation. This doesn’t really the same way of randomizing because questions with more permutations will be chosen more frequently at the first step.</p>
<p>Very helpful sources I used to implement this:</p>
<ul>
<li><a href="https://mashe.hawksey.info/2018/03/creating-custom-branching-in-google-forms-with-google-apps-script/">Basic code for “branching” form</a></li>
<li><a href="https://developers.google.com/apps-script/reference/forms/">Official Google Apps Script Reference for Forms</a></li>
<li><a href="https://stackoverflow.com/a/42774138/7360839">Generating all subsets in JavaScript</a> (modified to not include empty subset)</li>
</ul>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>Creating your own data set is hard. But very rewarding.</li>
<li>Designing a survey is hard. But very insightful.</li>
<li>Implementing a dynamic survey in Google Forms is hard. But very JavaScript.</li>
<li>I still need your help. <strong>Please, take part in the survey at this <a href="https://goo.gl/siBtSy">link</a></strong>.</li>
</ul>


</section>

 ]]></description>
  <category>rstats</category>
  <category>javascript</category>
  <guid>https://echasnovski.com/blog/2018-04-09-struggle-with-harry-potter-data.html</guid>
  <pubDate>Sun, 08 Apr 2018 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Tao of Tidygraph</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2018-03-06-tao-of-tidygraph.html</link>
  <description><![CDATA[ 





<!-- ```{r setup, include = FALSE} -->
<!-- library(igraph) -->
<!---->
<!-- library(taoteprog) -->
<!-- library(tidyverse) -->
<!-- library(tidygraph) -->
<!-- library(ggraph) -->
<!---->
<!-- collapse <- function(x, coll = ", ") { -->
<!--   paste0('"', x, '"', collapse = coll) -->
<!-- } -->
<!---->
<!-- set.seed(201803) -->
<!-- ``` -->
<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Quite some time ago I read the fantastic <a href="http://www.burns-stat.com/documents/books/tao-te-programming/">“Tao Te Programming”</a> book by <a href="http://www.burns-stat.com">Patrick Burns</a>. You can know this author from his everlasting work <a href="http://www.burns-stat.com/documents/books/the-r-inferno/">“The R Inferno”</a>.</p>
<p>“Tao Te Programming” is a vision about what a good programming should be. It is written in [programming] language-agnostic fashion but mainly with R in mind. It is organized in 81 chapters with some distinctive feature: at the end of the most chapters there are lists of chapters-“allies” and chapters-“opponents” to the chapter in question. During the reading I was really interested in the properties of <a href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a> that is created with these connections.</p>
<p>From the other side of my life, I constantly hear about packages for tidy network analysis: <a href="https://github.com/thomasp85/tidygraph">tidygraph</a> and <a href="https://github.com/thomasp85/ggraph">ggraph</a>. Both created by “compulsive package developer” (not sure, where to put “great” in this description) <a href="https://www.data-imaginist.com/">Thomas Lin Pedersen</a>. They provide tidy tools for creating, manipulating and plotting network data. It happened, that I didn’t have an opportunity to work with them… until now.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>This post is mainly about exploration of “Tao Te Programming” alliance graph using <code>tidygraph</code> and <code>ggraph</code>, with a few descriptions about those package functionality (for a thorough overview check out this <a href="https://www.rstudio.com/resources/videos/tidying-up-your-network-analysis-with-tidygraph-and-ggraph/">speach</a> by Thomas at rstudio::conf 2018). It will cover:</p>
<ul>
<li><strong>Creation</strong>, <strong>visualization</strong> and <strong>exploration</strong> of alliance graph.</li>
<li>Determination of “central programming advice” or <strong>“Why you should learn to dance the Debug 2-Step”</strong>.</li>
</ul>
<p>Data and code can be found in my <a href="https://github.com/echasnovski/taoteprog">taoteprog</a> repository. It is a project with R package structure which can be installed with <code>devtools::install_github("echasnovski/taoteprog")</code> (for easier data access). Public sharing of these data and results of this analysis is agreed with Mr.&nbsp;Burns by e-mail.</p>
<p>Setup:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(taoteprog)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidygraph)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggraph)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">201803</span>)</span></code></pre></div>
</section>
<section id="alliance-graph" class="level1">
<h1>Alliance graph</h1>
<section id="creation" class="level2">
<h2 class="anchored" data-anchor-id="creation">Creation</h2>
<p>Alliance graph is a set of chapters-nodes which created based on “ally” and “opponent” connections. It is created using the following data from <code>taoteprog</code> (which I manually created while reading a book):</p>
<ul>
<li><code>ttp_chapters</code> - a <a href="http://tibble.tidyverse.org/">tibble</a> with chapter data (column <code>chapter</code> for its number and <code>name</code> for its name). The whole list of chapters can be found <a href="http://www.burns-stat.com/documents/books/tao-te-programming/table-of-contents/">here</a>.</li>
<li><code>ttp_edges</code> - a tibble with data about chapter connections. It has the following columns:
<ul>
<li><code>chapter1</code> for the chapter number at which list of connections is printed.</li>
<li><code>chapter2</code> for the number of connected chapter.</li>
<li><code>type</code> for connection type (either “ally” or “opponent”).</li>
</ul>
<strong>Note</strong> that connections between chapters are not symmetrical, i.e.&nbsp;one chapter can be an “ally” or “opponent” of the another but not the other way around.</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ttp_raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tbl_graph</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nodes =</span> ttp_chapters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">edges =</span> ttp_edges, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">directed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-2">ttp_raw</span>
<span id="cb2-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tbl_graph: 81 nodes and 124 edges</span></span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #</span></span>
<span id="cb2-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A directed multigraph with 20 components</span></span>
<span id="cb2-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #</span></span>
<span id="cb2-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Node Data: 81 x 2 (active)</span></span>
<span id="cb2-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   chapter name</span></span>
<span id="cb2-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;int&gt; &lt;chr&gt;</span></span>
<span id="cb2-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1       1 Program</span></span>
<span id="cb2-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2       2 Program Well</span></span>
<span id="cb2-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3       3 Think Chess</span></span>
<span id="cb2-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4       4 Carve Reality</span></span>
<span id="cb2-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5       5 Solve the Problem</span></span>
<span id="cb2-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6       6 Don't Solve the Problem</span></span>
<span id="cb2-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 75 more rows</span></span>
<span id="cb2-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #</span></span>
<span id="cb2-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Edge Data: 124 x 3</span></span>
<span id="cb2-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    from    to type</span></span>
<span id="cb2-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;int&gt; &lt;int&gt; &lt;chr&gt;</span></span>
<span id="cb2-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     4     9 ally</span></span>
<span id="cb2-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     4    54 ally</span></span>
<span id="cb2-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     5     6 opponent</span></span>
<span id="cb2-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 121 more rows</span></span></code></pre></div>
<p>The main data structure of <code>tidygraph</code> is a <code>tbl_graph</code> which can be thought of as a combination of tibbles with data for nodes and edges. <strong>Note</strong> that values in <code>from</code> and <code>to</code> columns in edges tibble are the row indices of the nodes stored in nodes tibble, which will be a little confusing when nodes won’t cover all chapters.</p>
<!-- ```{r raw-graph-creation_data, include = FALSE} -->
<!-- loop_data <- ttp_raw %>% -->
<!--   activate(edges) %>% -->
<!--   filter(edge_is_loop()) %>% -->
<!--   as_tibble() -->
<!---->
<!-- loop_chapters <- ttp_raw %>% -->
<!--   as_tibble(active = "nodes") %>% -->
<!--   slice(loop_data$from) %>% -->
<!--   pull(name) -->
<!-- ``` -->
<p>Important features of this graph:</p>
<ul>
<li>There are 2 loops in graph (chapters “Be Consistent”, “Follow The Way”). And all of them are of type “opponent”, which I consider to be a subtle joke rather than editor mistake. However, for exploration these edges will be removed.</li>
<li>There are 20 [weak] components in this graph (maximal groups of nodes where each pair can be connected by undirected path). The number is this big because there are many chapters with no “allies” and no “opponents” (isolated points in graph), which will be also removed for exploration.</li>
</ul>
<p>So the graph of interest is constructed as follows:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">ttp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ttp_raw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove loops</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activate</span>(edges) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">edge_is_loop</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove isolated nodes</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activate</span>(nodes) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">node_is_isolated</span>())</span>
<span id="cb3-8">ttp</span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tbl_graph: 67 nodes and 122 edges</span></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #</span></span>
<span id="cb3-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A directed simple graph with 6 components</span></span>
<span id="cb3-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #</span></span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Node Data: 67 x 2 (active)</span></span>
<span id="cb3-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   chapter name</span></span>
<span id="cb3-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;int&gt; &lt;chr&gt;</span></span>
<span id="cb3-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1       4 Carve Reality</span></span>
<span id="cb3-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2       5 Solve the Problem</span></span>
<span id="cb3-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3       6 Don't Solve the Problem</span></span>
<span id="cb3-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4       7 Enjoy Confusion</span></span>
<span id="cb3-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5       8 Procrastinate</span></span>
<span id="cb3-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6       9 Verbalize and Nounalize</span></span>
<span id="cb3-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 61 more rows</span></span>
<span id="cb3-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #</span></span>
<span id="cb3-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Edge Data: 122 x 3</span></span>
<span id="cb3-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    from    to type</span></span>
<span id="cb3-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;int&gt; &lt;int&gt; &lt;chr&gt;</span></span>
<span id="cb3-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     1     6 ally</span></span>
<span id="cb3-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     1    44 ally</span></span>
<span id="cb3-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     2     3 opponent</span></span>
<span id="cb3-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 119 more rows</span></span></code></pre></div>
<p>Some explanations of the magic just happened:</p>
<ul>
<li><code>activate()</code> verb from <code>tidygraph</code> serves as a switch between tibbles for nodes and edges. All <a href="http://dplyr.tidyverse.org/">dplyr</a> verbs applied to <code>tbl_graph</code> object are applied to the active tibble.</li>
<li><code>edge_is_loop()</code>, <code>node_is_isolated()</code> and <code>group_components()</code> are functions of the same essence as <code>n()</code> in <code>dplyr</code>: they both should be called inside a graph computation functions.</li>
</ul>
</section>
<section id="visualization" class="level2">
<h2 class="anchored" data-anchor-id="visualization">Visualization</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ttp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggraph</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layout =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nicely"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_edge_link</span>(</span>
<span id="cb4-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> type),</span>
<span id="cb4-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>)),</span>
<span id="cb4-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_cap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>),</span>
<span id="cb4-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_cap =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mm"</span>)</span>
<span id="cb4-8">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_node_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> chapter), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_edge_colour_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ally =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#22B022"</span>,</span>
<span id="cb4-11">                                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">opponent =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#A4AAF6"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_graph</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb4-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"Tao Te Programming" alliance graph'</span>,</span>
<span id="cb4-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nodes represent chapter numbers, edges - connections"</span>,</span>
<span id="cb4-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@echasnovski"</span></span>
<span id="cb4-17">    )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2018-03-06-tao-of-tidygraph/graph-plot-1.png" class="img-fluid"></p>
<p>Important notes about creation of this plot:</p>
<ul>
<li><code>ggraph()</code> is the equivalent of <code>ggplot()</code> in <a href="http://ggplot2.tidyverse.org/">ggplot2</a> and also returns a <code>ggplot</code> object. <code>ggraph()</code> takes a <code>layout</code> argument for the type of graph arrangement in plot.</li>
<li><code>geom_edge_link()</code> and <code>geom_node_text()</code> are very much <code>ggplot2</code>-like functions: they create layers of plot (for links and nodes respectively).</li>
<li><code>theme_graph()</code> is a pre-installed <code>ggraph</code> theme.</li>
</ul>
</section>
<section id="exploration" class="level2">
<h2 class="anchored" data-anchor-id="exploration">Exploration</h2>
<p>Notes about graph structure:</p>
<p>⬛ There are two relatively big components (with 16 and 40 nodes) and 4 small ones (one with 5 nodes and three with 2).</p>
<p>⬛ There are considerably more “ally” connections then “opponent” which can be confirmed by the following code:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">ttp_edges <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(type)</span>
<span id="cb5-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2 x 2</span></span>
<span id="cb5-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   type         n</span></span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;chr&gt;    &lt;int&gt;</span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 ally        88</span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 opponent    36</span></span></code></pre></div>
<p>⬛ The graph itself can be considered as <a href="https://en.wikipedia.org/wiki/Signed_graph">signed graph</a>, i.e.&nbsp;a graph “in which each edge has a positive or negative sign”. This type of graphs can be studied for special community detection: nodes within common community should be primarily connected with positive (“ally”) edges and between communities - by negative (“opponent”) ones.</p>
<p>Interesting problem description and solution are presented in this <a href="http://mrvar.fdv.uni-lj.si/pajek/SignedNetworks/Bled94.pdf">paper</a>. I implemented the variation of the suggested approach, which can be found in my <a href="https://github.com/echasnovski/taoteprog/blob/master/analysis/raw-ttp-analysis.Rmd">raw analysis</a> on github (or <a href="raw-ttp-analysis.nb.html">here</a> for its html output). Implementation is rather verbose with no very special insight, so I decided to not include it here.</p>
</section>
</section>
<section id="central-advice" class="level1">
<h1>Central advice</h1>
<p>One of the reasons I started this research is to find “central programming advice” based on the “Tao Te Programming”. By that I mean a piece of advice as the core wisdom which should be mastered first as other advice “depend” on it.</p>
<p>Perhaps, one of the most popular way to compute the centrality value of graph nodes is <a href="https://en.wikipedia.org/wiki/PageRank">PageRank</a> algorithm. The core idea is that edges of the graph are treated as possibilities for transition to another node, which current node “sees” as important. PageRank assumes that some traveler starts at random node and constantly moves using “available edges”. Sometimes, the process is restarted at the new (randomly picked) starting node and transition continues. The <strong>PageRank score of the node</strong> is the probability of finding a traveler in a particular node at random time in the future: the more this value the more important this node.</p>
<p>This approach needs some correction to be applied to our alliance graph because present edges are not all the same. “Ally” edges can be considered as normal edges in the described framework but what should we do with “opponent” edges? We will go by the following logic: if “ally” edge makes more important node <strong>to which</strong> it is headed, then “opponent” edge should make more important node <strong>from which</strong> it is headed. This can be accomplished by introducing “peaceful” variation of alliance graph: all “opponent” edges are reversed and tagged as “ally”. This way starting node of [previously] “opponent” edge will receive more possibilities for traveler to appear in it.</p>
<p>Using “peaceful” alliance graph, <strong>constructed from all chapters and edges</strong> (for more proximity to raw data), we can determine nodes with the highest PageRank scores with the following code:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">edges_peace <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ttp_edges <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ally"</span>, chapter1, chapter2),</span>
<span id="cb6-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ally"</span>, chapter2, chapter1)</span>
<span id="cb6-5">  )</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tbl_graph</span>(</span>
<span id="cb6-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nodes =</span> ttp_chapters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">edges =</span> edges_peace, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">directed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb6-9">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">activate</span>(nodes) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">centr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">centrality_pagerank</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(centr))</span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 81 x 3</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   chapter name                    centr</span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;int&gt; &lt;chr&gt;                   &lt;dbl&gt;</span></span>
<span id="cb6-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1      63 Dance the Debug 2-Step 0.0403</span></span>
<span id="cb6-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2       4 Carve Reality          0.0346</span></span>
<span id="cb6-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3      61 Think Safety           0.0324</span></span>
<span id="cb6-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4       8 Procrastinate          0.0313</span></span>
<span id="cb6-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5      37 Become a Ghost         0.0291</span></span>
<span id="cb6-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 76 more rows</span></span></code></pre></div>
<p>The most important advice is from chapter 63 “Dance the Debug 2-Step”. This is a rather long chapter which contains many peaces of mini-advice about debugging process. My personal favorite:</p>
<ul>
<li><strong>The Debug 2-step</strong> is 1) DON’T PANIC!! and 2) Figure out what’s wrong. Not very easy steps.</li>
<li>The fastest way to debug is to <strong>not have bugs that are hard to find</strong>.</li>
<li>One of the best ways to track down a bug is to <strong>continuously simplify the problem</strong>.</li>
<li>Simplification should be <strong>driven by hypotheses you make</strong>. The cycle is: 1) create a hypothesis, 2) test the hypothesis.</li>
<li>A bug means there is at least one assumption that is being violated. You are really <strong>looking for false assumptions</strong>.</li>
<li><strong>The harder a bug is to find, the sillier the cause</strong>.</li>
<li>Once you find the problem, <strong>create at least one test</strong> to include in your test suite that exhibits the bug.</li>
</ul>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>The book <a href="http://www.burns-stat.com/documents/books/tao-te-programming/">“Tao Te Programming”</a> by <a href="http://www.burns-stat.com">Patrick Burns</a> is an amazing source of wisdom.</li>
<li>Packages <a href="https://github.com/thomasp85/tidygraph">tidygraph</a> and <a href="https://github.com/thomasp85/ggraph">ggraph</a> by <a href="https://www.data-imaginist.com/">Thomas Lin Pedersen</a> offer consistent “tidy” tools for network analysis.</li>
<li><strong>To learn to program one should learn to debug</strong>.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.3 (2017-11-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.4 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
##  [1] bindrcpp_0.2     ggraph_1.0.1     tidygraph_1.1.0  forcats_0.3.0
##  [5] stringr_1.3.0    dplyr_0.7.4      purrr_0.2.4      readr_1.1.1
##  [9] tidyr_0.8.0.9000 tibble_1.4.2     ggplot2_2.2.1    tidyverse_1.2.1
## [13] taoteprog_0.0.1  igraph_1.1.2
##
## loaded via a namespace (and not attached):
##  [1] ggrepel_0.7.0     Rcpp_0.12.15      lubridate_1.7.3
##  [4] lattice_0.20-35   utf8_1.1.3        assertthat_0.2.0
##  [7] rprojroot_1.3-2   digest_0.6.15     psych_1.7.8
## [10] ggforce_0.1.1     R6_2.2.2          cellranger_1.1.0
## [13] plyr_1.8.4        backports_1.1.2   evaluate_0.10.1
## [16] httr_1.3.1        blogdown_0.5      pillar_1.2.1
## [19] rlang_0.2.0       lazyeval_0.2.1    readxl_1.0.0
## [22] rstudioapi_0.7    rmarkdown_1.9     labeling_0.3
## [25] udunits2_0.13     foreign_0.8-69    munsell_0.4.3
## [28] broom_0.4.3       compiler_3.4.3    modelr_0.1.1
## [31] xfun_0.1          pkgconfig_2.0.1   mnormt_1.5-5
## [34] htmltools_0.3.6   gridExtra_2.3     bookdown_0.7
## [37] viridisLite_0.3.0 crayon_1.3.4      MASS_7.3-49
## [40] grid_3.4.3        nlme_3.1-131      jsonlite_1.5
## [43] gtable_0.2.0      magrittr_1.5      units_0.5-1
## [46] scales_0.5.0      cli_1.0.0         stringi_1.1.6
## [49] reshape2_1.4.3    viridis_0.5.0     xml2_1.2.0
## [52] tools_3.4.3       glue_1.2.0        tweenr_0.1.5
## [55] hms_0.4.1         parallel_3.4.3    yaml_2.1.17
## [58] colorspace_1.3-2  rvest_0.3.2       knitr_1.20
## [61] bindr_0.1         haven_1.1.1</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>tidygraph</category>
  <category>ggraph</category>
  <guid>https://echasnovski.com/blog/2018-03-06-tao-of-tidygraph.html</guid>
  <pubDate>Mon, 05 Mar 2018 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Combined outlier detection with dplyr and ruler</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2017-12-26-combined-outlier-detection-with-dplyr-and-ruler.html</link>
  <description><![CDATA[ 





<!-- ```{r setup, include = FALSE} -->
<!-- library(dplyr) -->
<!-- library(tidyr) -->
<!-- library(ggplot2) -->
<!-- library(ruler) -->
<!---->
<!-- diam_tot_num_cols <- sum(sapply(diamonds, is.numeric)) -->
<!-- diam_num_groups <- diamonds %>% -->
<!--   count(cut, color, clarity) %>% -->
<!--   nrow() -->
<!-- ``` -->
<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>During the process of data analysis one of the most crucial steps is to identify and account for <a href="https://en.wikipedia.org/wiki/Outlier">outliers</a>, observations that have essentially different nature than most other observations. Their presence can lead to untrustworthy conclusions. The most complicated part of this task is <strong>to define a notion of “outlier”</strong>. After that, it is straightforward to identify them based on given data.</p>
<p>There are many techniques developed for outlier detection. Majority of them deal with numerical data. This post will describe the most basic ones with their application using <a href="http://dplyr.tidyverse.org/">dplyr</a> and <a href="https://echasnovski.github.io/ruler/">ruler</a> packages.</p>
<p>After reading this post you will know:</p>
<ul>
<li>Most basic outlier detection techniques.</li>
<li>A way to implement them using <code>dplyr</code> and <code>ruler</code>.</li>
<li>A way to combine their results in order to obtain a new outlier detection method.</li>
<li>A way to discover notion of “diamond quality” without prior knowledge of this topic (as a happy consequence of previous point).</li>
</ul>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>We will perform an analysis with the goal to find not typical diamonds listed in <a href="http://ggplot2.tidyverse.org/reference/diamonds.html">diamonds</a> dataset from <a href="http://ggplot2.tidyverse.org/">ggplot2</a> package. Here one observation represents one diamond and is stored as a row in data frame.</p>
<p>The way we will do that is <strong>by combining different outlier detection techniques to identify rows which are “strong outliers”</strong>, i.e.&nbsp;which might by considered outliers based on several methods.</p>
<p>Packages required for this analysis:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ruler)</span></code></pre></div>
</section>
<section id="outlier-detection-methods" class="level1">
<h1>Outlier detection methods</h1>
<p>To do convenient outlier detection with <code>ruler</code> it is better to define notion of <strong>non-outlier</strong> in form of the rule “Observation <strong>is not</strong> an outlier if …”. This way actual outliers are considered as <strong>rule breakers</strong>, objects of interest of <code>ruler</code> package. <strong>Note</strong> that definition of non-outlier is essentially a definition of outlier because of total two possibilities.</p>
<section id="z-score" class="level2">
<h2 class="anchored" data-anchor-id="z-score">Z-score</h2>
<p><a href="https://en.wikipedia.org/wiki/Standard_score">Z-score</a>, also called a standard score, of an observation is [broadly speaking] a distance from the population center measured in number of normalization units. The default choice for center is sample mean and for normalization unit is standard deviation.</p>
<p>⬛ <em>Observation is not an outlier based on z-score</em> if its absolute value of default z-score is lower then some threshold (popular choice is 3).</p>
<p>Here is the function for identifying non-outliers based on z-score:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">isnt_out_z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">thres =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thres <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm)</span>
<span id="cb2-3">}</span></code></pre></div>
<p>It takes a numeric vector as input and returns logical vector of the same length indicating whether input value is a non-outlier.</p>
</section>
<section id="z-score-with-mad" class="level2">
<h2 class="anchored" data-anchor-id="z-score-with-mad">Z-score with MAD</h2>
<p><a href="https://en.wikipedia.org/wiki/Median_absolute_deviation">Median Absolute Deviation</a> is a robust normalization unit based on median as a population center. In order to use MAD “as a consistent estimator for the estimation of the standard deviation” one takes its value multiplied by a factor. This way base R function <a href="https://www.rdocumentation.org/packages/stats/versions/3.4.3/topics/mad">mad</a> is implemented.</p>
<p>⬛ <em>Observation is not an outlier based on MAD</em> if its absolute value of z-score with median as center and MAD as normalization unit is lower then some threshold (popular choice is 3).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">isnt_out_mad <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">thres =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thres <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mad</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm)</span>
<span id="cb3-3">}</span></code></pre></div>
</section>
<section id="tukeys-fences" class="level2">
<h2 class="anchored" data-anchor-id="tukeys-fences">Tukey’s fences</h2>
<p><a href="https://en.wikipedia.org/wiki/Outlier#Tukey's_fences">Tukey’s fences</a> is a technique used in box plots. The non-outlier range is defined with <img src="https://latex.codecogs.com/png.latex?%5BQ_1%20-%20k(Q_3%20-%20Q_1),~%20Q_3%20+%20k(Q_3%20-%20Q_1)%5D">, where <img src="https://latex.codecogs.com/png.latex?Q_1"> and <img src="https://latex.codecogs.com/png.latex?Q_3"> are the lower and upper quartiles respectively, <img src="https://latex.codecogs.com/png.latex?k"> - some nonnegative constant (popular choice is 1.5).</p>
<p>⬛ <em>Observation is not an outlier based on Tukey’s fences</em> if its value lies in non-outlier range.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">isnt_out_tukey <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb4-2">  quar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm)</span>
<span id="cb4-3">  iqr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(quar)</span>
<span id="cb4-4"></span>
<span id="cb4-5">  (quar[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> iqr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> quar[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> iqr)</span>
<span id="cb4-6">}</span></code></pre></div>
</section>
<section id="mahalanobis-distance" class="level2">
<h2 class="anchored" data-anchor-id="mahalanobis-distance">Mahalanobis distance</h2>
<p>All previous approaches were created for univariate numerical data. To detect outliers in multivariate case one can use <a href="https://en.wikipedia.org/wiki/Mahalanobis_distance">Mahalanobis distance</a> to reduce to univariate case and then apply known techniques.</p>
<p>⬛ <em>Observation is not an outlier based on Mahalanobis distance</em> if its distance is not an outlier.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">maha_dist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_if</span>(is.numeric) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mahalanobis</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">center =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(.), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cov =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(.))</span>
<span id="cb5-3"></span>
<span id="cb5-4">isnt_out_maha <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(tbl, isnt_out_f, ...) {</span>
<span id="cb5-5">  tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maha_dist</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isnt_out_f</span>(...)</span>
<span id="cb5-6">}</span></code></pre></div>
<p>This function takes as input a data frame of interest (with possible non-numeric columns which are ignored) and function performing univariate outlier detection. It returns a logical vector of the same length as number of rows in input data frame.</p>
<p>To read more about practical usefulness of Mahalanobis distance in detecting outliers go to <a href="https://www.steffenruefer.com/2016/12/outlier-detection-with-mahalanobis-distance/">Steffen’s very helpful post</a>.</p>
</section>
</section>
<section id="using-dplyr-and-ruler" class="level1">
<h1>Using dplyr and ruler</h1>
<section id="definition-of-non-outlier-row" class="level2">
<h2 class="anchored" data-anchor-id="definition-of-non-outlier-row">Definition of non-outlier row</h2>
<p>Package <code>ruler</code>, based on <code>dplyr</code> grammar of data manipulation, offers tools for validating the following data units: data as a whole, group [of rows] as a whole, column as a whole, row as a whole, cell. Our primary interest is row as a whole. However, using this framework, we can construct several approaches for definition of the non-outlier row:</p>
<ol type="1">
<li><em>Row is not an outlier based on some column</em> if it doesn’t contain outlier (computed based on the target column) on the intersection with that column. In other words, first a univariate outlier detection is performed based solely on data from target column and then all rows containing non-outliers are named non-outlier rows.</li>
<li><em>Row is not an outlier based on Mahalanobis distance</em> if its distance (computed based on the selected numeric columns) is not an outlier.</li>
<li><em>Row is not an outlier based on grouping</em> if it is a part of a non-outlier group [of rows]. A group [of rows] is not an outlier if its summary value is not an outlier among summary values of other groups.</li>
</ol>
<p><strong>Note</strong> that all listed approached depend on the choice of the univariate outlier detection method. We will use all three previously listed univariate techniques.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">isnt_out_funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> isnt_out_z,</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mad =</span> isnt_out_mad,</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tukey =</span> isnt_out_tukey</span>
<span id="cb6-5">)</span></code></pre></div>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>In <code>ruler</code> framework rules are defined in <a href="https://echasnovski.github.io/ruler/reference/rule-packs.html">packs</a> (to learn more go to <code>ruler</code> <a href="https://echasnovski.github.io/ruler/">README</a> and <a href="https://echasnovski.github.io/ruler/articles/">vignettes</a>).</p>
<section id="column-based-non-outlier-rows" class="level3">
<h3 class="anchored" data-anchor-id="column-based-non-outlier-rows">Column based non-outlier rows</h3>
<p>For <code>diamonds</code> dataset rules for column based non-outlier rows can be defined based on 7 numeric columns and 3 presented univariate detection methods. There is a convenient way of computing all them at once using <a href="http://dplyr.tidyverse.org/reference/summarise_all.html">scoped variant</a> of <code>dplyr::transmute()</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute_if</span>(is.numeric, isnt_out_funs)</span>
<span id="cb7-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 53,940 x 21</span></span>
<span id="cb7-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   carat_z depth_z table_z price_z   x_z   y_z   z_z carat_mad depth_mad</span></span>
<span id="cb7-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;lgl&gt;   &lt;lgl&gt;   &lt;lgl&gt;   &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;     &lt;lgl&gt;     &lt;lgl&gt;</span></span>
<span id="cb7-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1    TRUE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE      TRUE      TRUE</span></span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2    TRUE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE      TRUE      TRUE</span></span>
<span id="cb7-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3    TRUE   FALSE   FALSE    TRUE  TRUE  TRUE  TRUE      TRUE     FALSE</span></span>
<span id="cb7-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4    TRUE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE      TRUE      TRUE</span></span>
<span id="cb7-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5    TRUE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE      TRUE      TRUE</span></span>
<span id="cb7-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 5.394e+04 more rows, and 12 more variables: table_mad &lt;lgl&gt;,</span></span>
<span id="cb7-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   price_mad &lt;lgl&gt;, x_mad &lt;lgl&gt;, y_mad &lt;lgl&gt;, z_mad &lt;lgl&gt;,</span></span>
<span id="cb7-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   carat_tukey &lt;lgl&gt;, depth_tukey &lt;lgl&gt;, table_tukey &lt;lgl&gt;,</span></span>
<span id="cb7-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   price_tukey &lt;lgl&gt;, x_tukey &lt;lgl&gt;, y_tukey &lt;lgl&gt;, z_tukey &lt;lgl&gt;</span></span></code></pre></div>
<p>The result has outputs for 21 methods. Their names are of the form &lt;column name&gt;_&lt;method name&gt;. So the name ‘carat_z’ is interpreted as result of univariate method with name ‘z’ for column with name ‘carat’.</p>
</section>
<section id="mahalanobis-based-non-outlier-rows" class="level3">
<h3 class="anchored" data-anchor-id="mahalanobis-based-non-outlier-rows">Mahalanobis based non-outlier rows</h3>
<p>To define non-outlier rows based on Mahalanobis distance one should apply univariate method for distances computed for some subset of numeric columns. To simplify a little bit, we will one “subset” with all numeric columns and all listed methods:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maha =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maha_dist</span>(.)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maha =</span> maha), isnt_out_funs)</span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 53,940 x 3</span></span>
<span id="cb8-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   maha_z maha_mad maha_tukey</span></span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;lgl&gt;    &lt;lgl&gt;      &lt;lgl&gt;</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1   TRUE     TRUE       TRUE</span></span>
<span id="cb8-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2   TRUE    FALSE      FALSE</span></span>
<span id="cb8-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3   TRUE    FALSE      FALSE</span></span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4   TRUE     TRUE       TRUE</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5   TRUE     TRUE       TRUE</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 5.394e+04 more rows</span></span></code></pre></div>
<p>The result has outputs for 3 methods. Their names are considered as method names. <strong>Note</strong> that with this approach outlier rows are not only the ones far from multivariate center, but also the ones that are unnaturally close to it.</p>
</section>
<section id="group-based-non-outlier-rows" class="level3">
<h3 class="anchored" data-anchor-id="group-based-non-outlier-rows">Group based non-outlier rows</h3>
<p>Definition of non-outlier rows based on grouping depends on group summary function and univariate outlier detection method. As grouping column we will choose all non-numeric columns (<code>cut</code>, <code>color</code> and <code>clarity</code>) <a href="http://tidyr.tidyverse.org/reference/unite.html">united</a> into one called <code>group</code> (for later easier imputation of non-outlier rows). As reasonable summary functions we will choose mean value of some numeric column (total of 7 functions):</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">data_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unite</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>, cut, color, clarity)</span>
<span id="cb9-3"></span>
<span id="cb9-4">compute_group_non_outliers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute per group mean values of columns</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_if</span>(is.numeric, mean) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Detect outliers among groups</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_if</span>(is.numeric, isnt_out_funs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove unnecessary columns</span></span>
<span id="cb9-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select_if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Negate</span>(is.numeric))</span>
<span id="cb9-13"></span>
<span id="cb9-14">data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_group_non_outliers</span>()</span>
<span id="cb9-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 276 x 22</span></span>
<span id="cb9-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        group carat_z depth_z table_z price_z   x_z   y_z   z_z carat_mad</span></span>
<span id="cb9-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        &lt;chr&gt;   &lt;lgl&gt;   &lt;lgl&gt;   &lt;lgl&gt;   &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;     &lt;lgl&gt;</span></span>
<span id="cb9-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  Fair_D_I1   FALSE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE     FALSE</span></span>
<span id="cb9-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  Fair_D_IF    TRUE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE      TRUE</span></span>
<span id="cb9-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 Fair_D_SI1    TRUE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE      TRUE</span></span>
<span id="cb9-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 Fair_D_SI2    TRUE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE      TRUE</span></span>
<span id="cb9-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 Fair_D_VS1    TRUE    TRUE    TRUE    TRUE  TRUE  TRUE  TRUE      TRUE</span></span>
<span id="cb9-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 271 more rows, and 13 more variables: depth_mad &lt;lgl&gt;,</span></span>
<span id="cb9-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   table_mad &lt;lgl&gt;, price_mad &lt;lgl&gt;, x_mad &lt;lgl&gt;, y_mad &lt;lgl&gt;,</span></span>
<span id="cb9-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   z_mad &lt;lgl&gt;, carat_tukey &lt;lgl&gt;, depth_tukey &lt;lgl&gt;, table_tukey &lt;lgl&gt;,</span></span>
<span id="cb9-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   price_tukey &lt;lgl&gt;, x_tukey &lt;lgl&gt;, y_tukey &lt;lgl&gt;, z_tukey &lt;lgl&gt;</span></span></code></pre></div>
<p>The result has outputs for 21 methods applied to the 276 groups. Their names are of the form &lt;column name for summary function&gt;_&lt;method name&gt;. So the name ‘carat_z’ is interpreted as result of method ‘z’ for summary function equal to mean value of ‘carat’ column. Column <code>group</code> defines names of the groupings.</p>
</section>
</section>
<section id="exposure" class="level2">
<h2 class="anchored" data-anchor-id="exposure">Exposure</h2>
<p>Column and Mahalanobis based definition of non-outlier rows can be expressed with <a href="https://echasnovski.github.io/ruler/reference/row-pack.html">row packs</a> and group based - as <a href="https://echasnovski.github.io/ruler/reference/group-pack.html">group packs</a>.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">row_packs_isnt_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_packs</span>(</span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-outliers based on some column</span></span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">column =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute_if</span>(is.numeric, isnt_out_funs),</span>
<span id="cb10-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-outliers based on Mahalanobis distance</span></span>
<span id="cb10-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maha =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maha =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">maha_dist</span>(.)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maha =</span> maha), isnt_out_funs)</span>
<span id="cb10-7">)</span>
<span id="cb10-8"></span>
<span id="cb10-9">group_packs_isnt_out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_packs</span>(</span>
<span id="cb10-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-outliers based on grouping</span></span>
<span id="cb10-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> compute_group_non_outliers,</span>
<span id="cb10-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.group_vars =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span></span>
<span id="cb10-13">)</span></code></pre></div>
<p>Application of all those packs is called <a href="https://echasnovski.github.io/ruler/reference/expose.html">exposing process</a>. The result is an <a href="https://echasnovski.github.io/ruler/reference/exposure.html">exposure</a> from which we can extract <a href="https://echasnovski.github.io/ruler/reference/ruler-report.html">tidy data validation report</a> using <code>get_report</code>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Don't remove obeyers to compute total number of applied rules</span></span>
<span id="cb11-2">full_report <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(row_packs_isnt_out, group_packs_isnt_out,</span>
<span id="cb11-4">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.remove_obeyers =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>()</span>
<span id="cb11-6"></span>
<span id="cb11-7">used_rules <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> full_report <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>(pack, rule)</span>
<span id="cb11-9"></span>
<span id="cb11-10">breaker_report <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> full_report <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>(value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<p><code>used_rules</code> contains data about all definitions of non-outlier rows applied to data. They are encoded with combination of columns <code>pack</code> and <code>rule</code>.</p>
<p><code>breaker_report</code> contains data about data units that break certain rules. Packs <code>column</code> and <code>maha</code> has actual row numbers of <code>data_tbl</code> listed in <code>id</code> column of report (for rows which should be considered as outliers).</p>
<p>On the other hand, pack <code>group</code> defines group pack and is represented in <code>breaker_report</code> with <code>id</code> 0. To obtain row outliers based on grouping we need to expand those rows with information about rows in the data that belong to those groups. This can be done using <code>dplyr::left_join()</code>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">group_breakers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> breaker_report <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter group packs</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(pack <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expand rows by matching group with its rows</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(</span>
<span id="cb12-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()),</span>
<span id="cb12-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span></span>
<span id="cb12-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(pack, rule, var, id, value)</span>
<span id="cb12-11"></span>
<span id="cb12-12">outliers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb12-13">  breaker_report <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(pack <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>),</span>
<span id="cb12-14">  group_breakers</span>
<span id="cb12-15">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(pack, rule, id)</span>
<span id="cb12-17"></span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not all group based definitions resulted with outliers</span></span>
<span id="cb12-19">outliers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(pack, rule) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(pack <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>)</span>
<span id="cb12-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 13 x 3</span></span>
<span id="cb12-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     pack        rule     n</span></span>
<span id="cb12-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;chr&gt;       &lt;chr&gt; &lt;int&gt;</span></span>
<span id="cb12-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1 group   carat_mad    37</span></span>
<span id="cb12-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2 group carat_tukey    37</span></span>
<span id="cb12-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3 group     carat_z    29</span></span>
<span id="cb12-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4 group   depth_mad  1093</span></span>
<span id="cb12-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5 group depth_tukey  1016</span></span>
<span id="cb12-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6 group     depth_z   156</span></span>
<span id="cb12-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7 group   price_mad   209</span></span>
<span id="cb12-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8 group price_tukey  1146</span></span>
<span id="cb12-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9 group     price_z    44</span></span>
<span id="cb12-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10 group   table_mad   920</span></span>
<span id="cb12-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 11 group table_tukey     8</span></span>
<span id="cb12-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 12 group     table_z     7</span></span>
<span id="cb12-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 13 group         z_z    23</span></span></code></pre></div>
<p>Tibble <code>outliers</code> contains data about outlier rows. Combination of columns <code>pack</code> and <code>rule</code> defines non-outlier/outlier definition approach and column <code>id</code> defines row number of input data frame that should be considered an outlier based on the definition.</p>
<p>Definitions with most outliers are as follows:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">outliers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(pack, rule, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb13-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 37 x 3</span></span>
<span id="cb13-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     pack        rule     n</span></span>
<span id="cb13-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;chr&gt;       &lt;chr&gt; &lt;int&gt;</span></span>
<span id="cb13-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1   maha    maha_mad  6329</span></span>
<span id="cb13-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2   maha  maha_tukey  5511</span></span>
<span id="cb13-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 column   price_mad  5386</span></span>
<span id="cb13-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 column price_tukey  3540</span></span>
<span id="cb13-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 column   table_mad  2560</span></span>
<span id="cb13-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 32 more rows</span></span></code></pre></div>
<p>Two out of three Mahalanobis based definition yielded the most row outliers.</p>
</section>
<section id="combination" class="level2">
<h2 class="anchored" data-anchor-id="combination">Combination</h2>
<p>Given <code>outliers</code> data frame, one can do whatever he/she wants to identify outliers. Here we will use the basic combination approach based on average score.</p>
<p><em>Combined outlier detection score</em> for certain row can be defined as <strong>share of applied methods that tagged it as outlier</strong>. Alternatively one can define it just as number of those methods as it will only change absolute value of the result and not the order.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">outlier_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> outliers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nrow(used_rules) equals total number of applied methods</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(used_rules))</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Top 10 outliers</span></span>
<span id="cb14-7">outlier_score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(score)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb14-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 10 x 2</span></span>
<span id="cb14-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       id     score</span></span>
<span id="cb14-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;int&gt;     &lt;dbl&gt;</span></span>
<span id="cb14-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1 26432 0.5777778</span></span>
<span id="cb14-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2 27416 0.5777778</span></span>
<span id="cb14-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3 27631 0.5777778</span></span>
<span id="cb14-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4 27131 0.4666667</span></span>
<span id="cb14-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5 23645 0.4222222</span></span>
<span id="cb14-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6 26445 0.4222222</span></span>
<span id="cb14-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7 26745 0.4000000</span></span>
<span id="cb14-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8 27430 0.4000000</span></span>
<span id="cb14-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9 15952 0.3777778</span></span>
<span id="cb14-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10 17197 0.3777778</span></span></code></pre></div>
<p>Finally we will tag those rows as <strong>strong outliers</strong> which has score more than 0.2 (subjective threshold which should be researched more).</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">diam_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> outlier_score, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb15-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coalesce</span>(score, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb15-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_out =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_else</span>(score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Outlier"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not outlier"</span>)</span>
<span id="cb15-7">  )</span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total number of outliers</span></span>
<span id="cb15-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(diam_tbl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span></code></pre></div>
<p>Tibble <code>diam_tbl</code> is basically the <code>diamonds</code> but with three more columns: <code>id</code> for row number, <code>score</code> for combined outlier score and <code>is_out</code> for non-outlier/outlier tag.</p>
<p>Plots illustrating strong outliers:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>())</span>
<span id="cb16-2"></span>
<span id="cb16-3">plot_outliers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(tbl, x, y, facet_var) {</span>
<span id="cb16-4">  tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(is_out) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes_string</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_out"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facets =</span> facet_var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#AAAAAA"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004080"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb16-11">                                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strong outliers illustration by "</span>, facet_var)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb16-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>))</span>
<span id="cb16-15">}</span>
<span id="cb16-16"></span>
<span id="cb16-17">diam_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_outliers</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"carat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facet_var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cut"</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2017-12-26-combined-outlier-detection-with-dplyr-and-ruler/illustrating-plots-1.png" class="img-fluid"></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">diam_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_outliers</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depth"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facet_var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2017-12-26-combined-outlier-detection-with-dplyr-and-ruler/illustrating-plots-2.png" class="img-fluid"></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">diam_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_outliers</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">facet_var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clarity"</span>)</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2017-12-26-combined-outlier-detection-with-dplyr-and-ruler/illustrating-plots-3.png" class="img-fluid"></p>
<p>Based on those plots we see the complicated nature of “strong outliers”. They are not necessary located “on the edge” of two-dimensional scatter plots, but most extreme cases are tagged as outliers.</p>
<p>Also one interesting observation: most outliers are concentrated in the combination of “Fair” cut, “J” colour and “I1” clarity which are worst options among their features. The reason of this effect is group-based definitions of non-outliers which tagged certain groups more than others:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">breaker_report <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(pack <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(var, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb19-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 47 x 2</span></span>
<span id="cb19-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##            var     n</span></span>
<span id="cb19-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          &lt;chr&gt; &lt;int&gt;</span></span>
<span id="cb19-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1   Fair_D_I1     7</span></span>
<span id="cb19-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2   Fair_J_I1     7</span></span>
<span id="cb19-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3 Fair_H_VVS1     6</span></span>
<span id="cb19-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4  Ideal_J_I1     6</span></span>
<span id="cb19-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5 Fair_J_VVS1     5</span></span>
<span id="cb19-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6 Fair_G_VVS1     4</span></span>
<span id="cb19-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7 Fair_D_VVS1     3</span></span>
<span id="cb19-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8   Fair_E_I1     3</span></span>
<span id="cb19-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9   Fair_F_I1     3</span></span>
<span id="cb19-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10   Fair_H_I1     3</span></span>
<span id="cb19-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 37 more rows</span></span></code></pre></div>
<p>Here we see that “Fair” cut is among majority of top breaker groups. There are also some interesting combinations: <code>Fair_D_I1</code> (“worst”-“best”-“worst”), <code>Fair_J_I1</code> (“worst”-“worst”-“worst”), <code>Ideal_J_I1</code> (“best”-“worst”-“worst”).</p>
<p>This fact might be interpreted as <strong>suggested combined outlier detection approach discovered notion of diamond quality without prior knowledge about it</strong>.</p>
</section>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>Using only basic outlier detection methods one can achieve insightful results by combining them. Observations which are tagged as outlier by more than some threshold number of methods might be named as “strong outliers”. Those should be considered as outliers based on the whole data rather then on separate features.</li>
<li>With <code>ruler</code> combining results of several outlier detection methods is straightforward due to the format of tidy data validation report.</li>
<li>Suggested “strong outlier” observations in <code>diamonds</code> dataset are not only those with extreme numerical values but also ones based on quality of diamonds. This is achieved without prior knowledge of “diamond quality” notion.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>sessionInfo()
## R version 3.4.3 (2017-11-30)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] bindrcpp_0.2  ruler_0.1.0   ggplot2_2.2.1 tidyr_0.7.2   dplyr_0.7.4
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.14     knitr_1.17       bindr_0.1        magrittr_1.5
##  [5] tidyselect_0.2.3 munsell_0.4.3    colorspace_1.3-2 R6_2.2.2
##  [9] rlang_0.1.4      plyr_1.8.4       stringr_1.2.0    tools_3.4.3
## [13] grid_3.4.3       gtable_0.2.0     htmltools_0.3.6  lazyeval_0.2.1
## [17] yaml_2.1.16      rprojroot_1.2    digest_0.6.13    assertthat_0.2.0
## [21] tibble_1.3.4     bookdown_0.5     purrr_0.2.4      glue_1.2.0
## [25] evaluate_0.10.1  rmarkdown_1.8    blogdown_0.4     labeling_0.3
## [29] stringi_1.1.6    keyholder_0.1.1  compiler_3.4.3   scales_0.5.0
## [33] backports_1.1.2  pkgconfig_2.0.1</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>dplyr</category>
  <category>ruler</category>
  <guid>https://echasnovski.com/blog/2017-12-26-combined-outlier-detection-with-dplyr-and-ruler.html</guid>
  <pubDate>Mon, 25 Dec 2017 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Usage of ruler package</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2017-12-04-usage-of-ruler-package.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>My <a href="../blog/2017-11-28-rule-your-data-with-tidy-validation-reports-design.html">previous post</a> tells a story about design of my <a href="https://echasnovski.github.io/ruler/">ruler</a> package, which presents tools for “… creating data validation pipelines and tidy reports”. This package offers a framework for exploring and validating data frame like objects using <a href="http://dplyr.tidyverse.org/">dplyr</a> grammar of data manipulation.</p>
<p>This post is intended to show some close to reality <code>ruler</code> usage examples. Described methods and approaches reflect package design. Along the way you will learn why Yoda and Jabba the Hutt are “outliers” among core “Star Wars” characters.</p>
<p>For more information see <a href="https://echasnovski.github.io/ruler/">README</a> (for relatively brief comprehensive introduction) or <a href="https://echasnovski.github.io/ruler/articles/">vignettes</a> (for more thorough description of package capabilities).</p>
<p><strong>Beware</strong> of a lot of code.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr))</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr))</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ruler)</span></code></pre></div>
<p>The general way of performing validation with <code>ruler</code> can be described with following steps:</p>
<ul>
<li><strong>Formulate a validation task</strong>. It is usually stated in the form of a yes-no question or true-false statement about some part (data unit) of an input data frame. Data unit can be one of: data [as a whole], group of rows [as a whole], column [as a whole], row [as a whole], cell. For example, <em>does every column contain elements with sum more than 100?</em>.</li>
<li><strong>Create a <code>dplyr</code>-style validation function</strong> (rule pack) which checks desired data unit for obedience to [possibly] several rules:
<ul>
<li><p>Create <code>dplyr</code> code for “interactive” validation. <strong>Note</strong> to use only <a href="https://echasnovski.github.io/keyholder/reference/keyholder-supported-funs.html">functions supported by keyholder package</a>. An example with “enough_sum” as a rule name:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enough_sum =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div></li>
<li><p>Use <code>ruler</code>’s function <code>rules()</code> instead of explicit or implicit usage of <code>funs()</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enough_sum =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div></li>
<li><p>Modify code to create <a href="http://magrittr.tidyverse.org/reference/pipe.html">magrittr functional sequence</a> by replacing input variable name by a <code>.</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enough_sum =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div></li>
<li><p>Wrap with <a href="https://echasnovski.github.io/ruler/reference/rule-packs.html">rule specification function</a> to explicitly identify validated data unit and to name rule pack. In this case it is <code>col_packs()</code> for column data unit with “is_enough_sum” as rule pack name:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_packs</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough_sum =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb5-3">)</span></code></pre></div></li>
</ul></li>
<li><strong>Expose data to rules</strong> to obtain validation result (exposure). Use <code>ruler</code>’s <code>expose()</code> function for that. It doesn’t modify contents of input data frame but creates/updates <code>exposure</code> attribute. <a href="https://echasnovski.github.io/ruler/reference/exposure.html">Exposure</a> is a list with information about used rule packs (<a href="https://echasnovski.github.io/ruler/reference/packs_info.html">packs_info</a>) and tidy data validation report (<a href="https://echasnovski.github.io/ruler/reference/ruler-report.html">report</a>).</li>
<li><strong>Act after exposure</strong>. It can be:
<ul>
<li>Observing validation results with <code>get_exposure()</code>, <code>get_packs_info()</code> or <code>get_report()</code>.</li>
<li>Making assertions if specific rules are not followed in desired way.</li>
<li>Imputing input data frame based on report.</li>
</ul></li>
</ul>
<p>In examples we will use <a href="http://dplyr.tidyverse.org/reference/starwars.html">starwars</a> data from <code>dplyr</code> package (to celebrate an upcoming new episode). It is a tibble with every row describing one “Star Wars” character. Every example starts with a validation task stated <em>in italic</em> and performs validation from beginning to end.</p>
</section>
<section id="create-rule-packs" class="level1">
<h1>Create rule packs</h1>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>■ <em>Does <code>starwars</code> have 1) number of rows 1a) more than 50; 1b) less than 60; 2) number of columns 2a) more than 10; 2b) less than 15?</em></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">check_data_dims <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data_packs</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check_dims =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow_low =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow_up =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb6-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol_low =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol_up =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb6-5">  )</span>
<span id="cb6-6">)</span>
<span id="cb6-7"></span>
<span id="cb6-8">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(check_data_dims) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_exposure</span>()</span>
<span id="cb6-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Exposure</span></span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Packs info:</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 4</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         name      type             fun remove_obeyers</span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        &lt;chr&gt;     &lt;chr&gt;          &lt;list&gt;          &lt;lgl&gt;</span></span>
<span id="cb6-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 check_dims data_pack &lt;S3: data_pack&gt;           TRUE</span></span>
<span id="cb6-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb6-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb6-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 5</span></span>
<span id="cb6-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         pack    rule   var    id value</span></span>
<span id="cb6-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb6-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 check_dims nrow_up  .all     0 FALSE</span></span></code></pre></div>
<p>The result is interpreted as follows:</p>
<ul>
<li>Data was exposed to one rule pack for data as a whole (data rule pack) named “check_dims”. For it all obeyers (data units which follow specified rule) were removed from validation report.</li>
<li>Combination of <code>var</code> equals <code>.all</code> and <code>id</code> equals <code>0</code> means that data as a whole is validated.</li>
<li>Input data frame doesn’t obey (because <code>value</code> is equal to <code>FALSE</code>) rule <code>nrow_up</code> from rule pack <code>check_dims</code>.</li>
</ul>
<p>■ <em>Does <code>starwars</code> have enough rows for characters 1) with blond hair; 2) humans; 3) humans with blond hair?</em></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">check_enough_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data_packs</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enough_blond =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(hair_color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blond"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enough_humans =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb7-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb7-6">  ),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ehough_blond_humans =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb7-8">    hair_color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blond"</span>, species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human"</span></span>
<span id="cb7-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb7-11">)</span>
<span id="cb7-12"></span>
<span id="cb7-13">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(check_enough_rows) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_exposure</span>()</span>
<span id="cb7-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Exposure</span></span>
<span id="cb7-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb7-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Packs info:</span></span>
<span id="cb7-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 x 4</span></span>
<span id="cb7-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                  name      type             fun remove_obeyers</span></span>
<span id="cb7-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                 &lt;chr&gt;     &lt;chr&gt;          &lt;list&gt;          &lt;lgl&gt;</span></span>
<span id="cb7-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1        enough_blond data_pack &lt;S3: data_pack&gt;           TRUE</span></span>
<span id="cb7-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2       enough_humans data_pack &lt;S3: data_pack&gt;           TRUE</span></span>
<span id="cb7-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 ehough_blond_humans data_pack &lt;S3: data_pack&gt;           TRUE</span></span>
<span id="cb7-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb7-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb7-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2 x 5</span></span>
<span id="cb7-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                  pack      rule   var    id value</span></span>
<span id="cb7-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                 &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb7-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1        enough_blond is_enough  .all     0 FALSE</span></span>
<span id="cb7-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 ehough_blond_humans is_enough  .all     0 FALSE</span></span></code></pre></div>
<p>New information gained from example:</p>
<ul>
<li>Rule specification functions can be supplied with multiple rule packs all of which will be independently used during exposing.</li>
</ul>
<p>■ <em>Does <code>starwars</code> have enough numeric columns?</em></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">check_enough_num_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data_packs</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enough_num_cols =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(., is.numeric)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-4">  )</span>
<span id="cb8-5">)</span>
<span id="cb8-6"></span>
<span id="cb8-7">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(check_enough_num_cols) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>()</span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 0 x 5</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 5 variables: pack &lt;chr&gt;, rule &lt;chr&gt;, var &lt;chr&gt;, id &lt;int&gt;,</span></span>
<span id="cb8-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   value &lt;lgl&gt;</span></span></code></pre></div>
<ul>
<li>If no breaker is found <code>get_report()</code> returns tibble with zero rows and usual columns.</li>
</ul>
</section>
<section id="group" class="level2">
<h2 class="anchored" data-anchor-id="group">Group</h2>
<p>■ <em>Does group defined by hair color and gender have a member from Tatooine?</em></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">has_hair_gender_tatooine <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_packs</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hair_gender_tatooine =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(hair_color, gender) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">has_tatooine =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(homeworld <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tatooine"</span>)),</span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.group_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hair_color"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>),</span>
<span id="cb9-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.group_sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__"</span></span>
<span id="cb9-7">)</span>
<span id="cb9-8"></span>
<span id="cb9-9">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(has_hair_gender_tatooine) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>()</span>
<span id="cb9-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb9-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 12 x 5</span></span>
<span id="cb9-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                   pack         rule                 var    id value</span></span>
<span id="cb9-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                  &lt;chr&gt;        &lt;chr&gt;               &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb9-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 hair_gender_tatooine has_tatooine      auburn__female     0 FALSE</span></span>
<span id="cb9-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 hair_gender_tatooine has_tatooine  auburn, grey__male     0 FALSE</span></span>
<span id="cb9-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 hair_gender_tatooine has_tatooine auburn, white__male     0 FALSE</span></span>
<span id="cb9-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 hair_gender_tatooine has_tatooine      blonde__female     0 FALSE</span></span>
<span id="cb9-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 hair_gender_tatooine has_tatooine          grey__male     0 FALSE</span></span>
<span id="cb9-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 7 more rows</span></span></code></pre></div>
<ul>
<li><code>group_packs()</code> needs grouping columns supplied via <code>.group_vars</code>.</li>
<li>Column <code>var</code> of validation report contains levels of grouping columns to identify group. By default their are pasted together with <code>.</code>. To change that supply <code>.group_sep</code> argument.</li>
<li>12 combinations of <code>hair_color</code> and <code>gender</code> don’t have a character from Tatooine. They are “auburn”-“female”, “auburn, grey”-“male” and so on.</li>
</ul>
</section>
<section id="column" class="level2">
<h2 class="anchored" data-anchor-id="column">Column</h2>
<p>■ <em>Does every list-column have 1) enough average length; 2) enough unique elements?</em></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">check_list_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_packs</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check_list_cols =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_if</span>(</span>
<span id="cb10-4">      is.list,</span>
<span id="cb10-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(</span>
<span id="cb10-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough_mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(., length)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb10-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(.))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb10-8">      )</span>
<span id="cb10-9">    )</span>
<span id="cb10-10">)</span>
<span id="cb10-11"></span>
<span id="cb10-12">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(check_list_cols) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>()</span>
<span id="cb10-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb10-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 x 5</span></span>
<span id="cb10-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##              pack           rule       var    id value</span></span>
<span id="cb10-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##             &lt;chr&gt;          &lt;chr&gt;     &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb10-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 check_list_cols is_enough_mean  vehicles     0 FALSE</span></span>
<span id="cb10-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 check_list_cols is_enough_mean starships     0 FALSE</span></span>
<span id="cb10-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 check_list_cols        rule..2     films     0 FALSE</span></span></code></pre></div>
<ul>
<li>To specify rule functions inside <code>dplyr</code>’s scoped verbs use <code>ruler::rules()</code>. It powers correct output interpretation during exposing process and imputes missing rule names based on the present rules in current rule pack.</li>
<li>Columns <code>vehicles</code> and <code>starships</code> don’t have enough average length and column <code>films</code> doesn’t have enough unique elements.</li>
</ul>
<p>■ <em>Are all values of column <code>birth_year</code> non-<code>NA</code>?</em></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(</span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_packs</span>(</span>
<span id="cb11-4">      . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_at</span>(</span>
<span id="cb11-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">birth_year =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"birth_year"</span>),</span>
<span id="cb11-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all_present =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.)))</span>
<span id="cb11-7">      )</span>
<span id="cb11-8">    )</span>
<span id="cb11-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>()</span>
<span id="cb11-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb11-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 5</span></span>
<span id="cb11-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          pack        rule        var    id value</span></span>
<span id="cb11-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb11-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 col_pack..1 all_present birth_year     0 FALSE</span></span></code></pre></div>
<ul>
<li>To correctly validate one column with scoped <code>dplyr</code> verb it should be a named argument inside <code>vars</code>. It is needed for correct interpretation of rule pack output.</li>
</ul>
</section>
<section id="row" class="level2">
<h2 class="anchored" data-anchor-id="row">Row</h2>
<p>■ <em>Has character appeared in enough films?</em> As character is defined by row, this is a row pack.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">has_enough_films <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_packs</span>(</span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enough_films =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(films, length) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-3">)</span>
<span id="cb12-4"></span>
<span id="cb12-5">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(has_enough_films) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), name),</span>
<span id="cb12-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.validate =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb12-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 64 x 6</span></span>
<span id="cb12-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##           pack      rule   var    id value              name</span></span>
<span id="cb12-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;             &lt;chr&gt;</span></span>
<span id="cb12-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 enough_films is_enough  .all     8 FALSE             R5-D4</span></span>
<span id="cb12-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 enough_films is_enough  .all     9 FALSE Biggs Darklighter</span></span>
<span id="cb12-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 enough_films is_enough  .all    12 FALSE    Wilhuff Tarkin</span></span>
<span id="cb12-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 enough_films is_enough  .all    15 FALSE            Greedo</span></span>
<span id="cb12-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 enough_films is_enough  .all    18 FALSE  Jek Tono Porkins</span></span>
<span id="cb12-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 59 more rows</span></span></code></pre></div>
<ul>
<li>64 characters haven’t appeared in 3 films or more. Those are characters described in <code>starwars</code> in rows 8, 9, etc. (counting based on input data).</li>
</ul>
<p>■ <em>Is character with <code>height</code> less than 100 a droid?</em></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">is_short_droid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_packs</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_short_droid =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_droid =</span> species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Droid"</span>)</span>
<span id="cb13-4">)</span>
<span id="cb13-5"></span>
<span id="cb13-6">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(is_short_droid) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), name, height),</span>
<span id="cb13-10">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.validate =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb13-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb13-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 5 x 7</span></span>
<span id="cb13-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##             pack     rule   var    id value                  name height</span></span>
<span id="cb13-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##            &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;                 &lt;chr&gt;  &lt;int&gt;</span></span>
<span id="cb13-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 is_short_droid is_droid  .all    19 FALSE                  Yoda     66</span></span>
<span id="cb13-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 is_short_droid is_droid  .all    29 FALSE Wicket Systri Warrick     88</span></span>
<span id="cb13-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 is_short_droid is_droid  .all    45 FALSE              Dud Bolt     94</span></span>
<span id="cb13-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 is_short_droid is_droid  .all    72 FALSE         Ratts Tyerell     79</span></span>
<span id="cb13-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 is_short_droid is_droid  .all    73    NA                R4-P17     96</span></span></code></pre></div>
<ul>
<li>One can expose only subset of rows by using <code>filter</code> or <code>slice</code>. The value of <code>id</code> column in result will reflect row number in the original input data frame. This feature is powered by <a href="https://echasnovski.github.io/keyholder/">keyholder</a> package. In order to use it, rule pack should be created using its supported functions.</li>
<li><code>value</code> equal to <code>NA</code> is treated as rule breaker.</li>
<li>5 “not tall” characters are not droids.</li>
</ul>
</section>
<section id="cell" class="level2">
<h2 class="anchored" data-anchor-id="cell">Cell</h2>
<p>■ <em>Is non-<code>NA</code> numeric cell not an outlier based on z-score?</em> This is a bit tricky. To present outliers as rule breakers one should ask whether cell <strong>is not</strong> outlier.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">z_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, ...) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, ...)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, ...)}</span>
<span id="cb14-2"></span>
<span id="cb14-3">cell_isnt_outlier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cell_packs</span>(</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbl_not_outlier =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute_if</span>(</span>
<span id="cb14-6">      is.numeric,</span>
<span id="cb14-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">isnt_out =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">z_score</span>(., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.))</span>
<span id="cb14-8">    )</span>
<span id="cb14-9">)</span>
<span id="cb14-10"></span>
<span id="cb14-11">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(cell_isnt_outlier) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), name),</span>
<span id="cb14-15">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.validate =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb14-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb14-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 4 x 6</span></span>
<span id="cb14-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##              pack     rule        var    id value                  name</span></span>
<span id="cb14-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##             &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;                 &lt;chr&gt;</span></span>
<span id="cb14-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 dbl_not_outlier isnt_out     height    19 FALSE                  Yoda</span></span>
<span id="cb14-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 dbl_not_outlier isnt_out       mass    16 FALSE Jabba Desilijic Tiure</span></span>
<span id="cb14-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 dbl_not_outlier isnt_out birth_year    16 FALSE Jabba Desilijic Tiure</span></span>
<span id="cb14-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 dbl_not_outlier isnt_out birth_year    19 FALSE                  Yoda</span></span></code></pre></div>
<ul>
<li>4 non-<code>NA</code> numeric cells appear to be an outlier within their column.</li>
</ul>
</section>
</section>
<section id="expose-data-to-rules" class="level1">
<h1>Expose data to rules</h1>
<p>■ <em>Do groups defined by <code>species</code>, <code>gender</code> and <code>eye_color</code> (3 different checks) have appropriate size?</em></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(</span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_packs</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">isnt_many =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb15-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.group_vars =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>)</span>
<span id="cb15-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(</span>
<span id="cb15-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_packs</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(gender) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">isnt_many =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>),</span>
<span id="cb15-8">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.group_vars =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>),</span>
<span id="cb15-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.remove_obeyers =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb15-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough_eye_color =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(eye_color) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-12">           <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">isnt_many =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_exposure</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_report =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>)</span>
<span id="cb15-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Exposure</span></span>
<span id="cb15-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb15-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Packs info:</span></span>
<span id="cb15-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 x 4</span></span>
<span id="cb15-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                  name       type              fun remove_obeyers</span></span>
<span id="cb15-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                 &lt;chr&gt;      &lt;chr&gt;           &lt;list&gt;          &lt;lgl&gt;</span></span>
<span id="cb15-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1       group_pack..1 group_pack &lt;S3: group_pack&gt;           TRUE</span></span>
<span id="cb15-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2       group_pack..2 group_pack &lt;S3: group_pack&gt;          FALSE</span></span>
<span id="cb15-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 is_enough_eye_color group_pack &lt;S3: group_pack&gt;           TRUE</span></span>
<span id="cb15-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb15-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb15-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 5</span></span>
<span id="cb15-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                  pack      rule           var    id value</span></span>
<span id="cb15-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                 &lt;chr&gt;     &lt;chr&gt;         &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb15-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1       group_pack..1 isnt_many         Human     0 FALSE</span></span>
<span id="cb15-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2       group_pack..2 isnt_many        female     0  TRUE</span></span>
<span id="cb15-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3       group_pack..2 isnt_many hermaphrodite     0  TRUE</span></span>
<span id="cb15-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4       group_pack..2 isnt_many          male     0 FALSE</span></span>
<span id="cb15-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5       group_pack..2 isnt_many          none     0  TRUE</span></span>
<span id="cb15-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6       group_pack..2 isnt_many            NA     0  TRUE</span></span>
<span id="cb15-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 7 is_enough_eye_color isnt_many         brown     0 FALSE</span></span></code></pre></div>
<ul>
<li><code>expose()</code> can be applied sequentially which results into updating existing <code>exposure</code> with new information.</li>
<li><code>expose()</code> imputes names of supplied unnamed rule packs based on the present rule packs for the same data unit type.</li>
<li><code>expose()</code> by default removes obeyers (rows with data units that obey respective rules) from validation report. To stop doing that use <code>.remove_obeyers = FALSE</code> during <code>expose()</code> call.</li>
<li><code>expose()</code> by default guesses the type of the supplied rule pack based only on its output. This has some annoying edge cases but is suitable for interactive usage. To turn this feature off use <code>.guess = FALSE</code> as an argument for <code>expose()</code>. Also, to avoid edge cases create rule packs with appropriate wrappers.</li>
</ul>
<p>■ <em>Perform some previous checks with one <code>expose()</code>.</em></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">my_packs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(check_data_dims, is_short_droid, cell_isnt_outlier)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(my_packs)</span>
<span id="cb16-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## List of 3</span></span>
<span id="cb16-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ :List of 1</span></span>
<span id="cb16-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ check_dims:function (value)</span></span>
<span id="cb16-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..- attr(*, "class")= chr [1:4] "data_pack" "rule_pack" "fseq" "function"</span></span>
<span id="cb16-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ :List of 1</span></span>
<span id="cb16-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ is_short_droid:function (value)</span></span>
<span id="cb16-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..- attr(*, "class")= chr [1:4] "row_pack" "rule_pack" "fseq" "function"</span></span>
<span id="cb16-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  $ :List of 1</span></span>
<span id="cb16-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   ..$ dbl_not_outlier:function (value)</span></span>
<span id="cb16-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   .. ..- attr(*, "class")= chr [1:4] "cell_pack" "rule_pack" "fseq" "function"</span></span>
<span id="cb16-14"></span>
<span id="cb16-15">starwars_exposed_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(my_packs)</span>
<span id="cb16-17"></span>
<span id="cb16-18">starwars_exposed_arguments <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(check_data_dims, is_short_droid, cell_isnt_outlier)</span>
<span id="cb16-20"></span>
<span id="cb16-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(starwars_exposed_list, starwars_exposed_arguments)</span>
<span id="cb16-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] TRUE</span></span></code></pre></div>
<ul>
<li><code>expose()</code> can have for rule pack argument a list of lists [of lists, of lists, …] with functions at any depth. This enables creating a list of rule packs wrapped with <code>*_packs()</code> functions (which all return a list of functions).</li>
<li><code>expose()</code> can have multiple rule packs as separate arguments.</li>
</ul>
</section>
<section id="act-after-exposure" class="level1">
<h1>Act after exposure</h1>
<p>■ <em>Throw an error if any non-<code>NA</code> value of <code>mass</code> is more than 1000.</em></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(</span>
<span id="cb17-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_packs</span>(</span>
<span id="cb17-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">low_mass =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_at</span>(</span>
<span id="cb17-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mass =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mass"</span>),</span>
<span id="cb17-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_small_mass =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb17-7">      )</span>
<span id="cb17-8">    )</span>
<span id="cb17-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb17-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_any_breaker</span>()</span>
<span id="cb17-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Breakers report</span></span>
<span id="cb17-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb17-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 5</span></span>
<span id="cb17-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       pack          rule   var    id value</span></span>
<span id="cb17-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb17-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 low_mass is_small_mass  mass     0 FALSE</span></span>
<span id="cb17-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Error: assert_any_breaker: Some breakers found in exposure.</span></span></code></pre></div>
<ul>
<li><code>assert_any_breaker()</code> is used to assert presence of at least one breaker in validation report.</li>
</ul>
<p>However, offered solution via column pack doesn’t show rows which break the rule. To do that one can use cell pack:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(</span>
<span id="cb18-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cell_packs</span>(</span>
<span id="cb18-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">low_mass =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute_at</span>(</span>
<span id="cb18-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mass =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mass"</span>),</span>
<span id="cb18-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_small_mass =</span> (. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.))</span>
<span id="cb18-7">      )</span>
<span id="cb18-8">    )</span>
<span id="cb18-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_any_breaker</span>()</span>
<span id="cb18-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Breakers report</span></span>
<span id="cb18-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb18-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 5</span></span>
<span id="cb18-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##       pack          rule   var    id value</span></span>
<span id="cb18-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb18-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 low_mass is_small_mass  mass    16 FALSE</span></span>
<span id="cb18-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Error: assert_any_breaker: Some breakers found in exposure.</span></span></code></pre></div>
<p>■ <em>Remove numeric columns with mean value below certain threshold.</em> To achieve that one should formulate rule as “column mean should be <strong>above</strong> threshold”, identify breakers and act upon this information.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">remove_bad_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(.tbl) {</span>
<span id="cb19-2">  bad_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_report</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(var) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>()</span>
<span id="cb19-6"></span>
<span id="cb19-7">  .tbl[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(.tbl), bad_cols)]</span>
<span id="cb19-8">}</span>
<span id="cb19-9"></span>
<span id="cb19-10">starwars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(</span>
<span id="cb19-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_packs</span>(</span>
<span id="cb19-13">      . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_if</span>(is.numeric, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb19-14">    )</span>
<span id="cb19-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">act_after_exposure</span>(</span>
<span id="cb19-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.trigger =</span> any_breaker,</span>
<span id="cb19-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.actor =</span> remove_bad_cols</span>
<span id="cb19-19">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_exposure</span>()</span>
<span id="cb19-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 87 x 11</span></span>
<span id="cb19-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##             name height hair_color  skin_color eye_color gender homeworld</span></span>
<span id="cb19-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##            &lt;chr&gt;  &lt;int&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;</span></span>
<span id="cb19-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 Luke Skywalker    172      blond        fair      blue   male  Tatooine</span></span>
<span id="cb19-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2          C-3PO    167       &lt;NA&gt;        gold    yellow   &lt;NA&gt;  Tatooine</span></span>
<span id="cb19-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3          R2-D2     96       &lt;NA&gt; white, blue       red   &lt;NA&gt;     Naboo</span></span>
<span id="cb19-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4    Darth Vader    202       none       white    yellow   male  Tatooine</span></span>
<span id="cb19-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5    Leia Organa    150      brown       light     brown female  Alderaan</span></span>
<span id="cb19-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 82 more rows, and 4 more variables: species &lt;chr&gt;,</span></span>
<span id="cb19-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;</span></span></code></pre></div>
<ul>
<li><a href="https://echasnovski.github.io/ruler/reference/act_after_exposure.html">act_after_exposure</a> is a wrapper for performing actions after exposing. It takes <code>.trigger</code> function to trigger action and <code>.actor</code> function to perform action and return its result.</li>
<li><code>any_breaker</code> is a function which return <code>TRUE</code> if tidy validation report attached to it has any breaker and <code>FALSE</code> otherwise.</li>
</ul>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>Yoda and Jabba the Hutt are outliers among other “Star Wars” characters: Yoda is by height and birth year, Jabba is by mass and also birth year.</li>
<li>There are less than 10 “Star Wars” films yet.</li>
<li><code>ruler</code> offers flexible and extendable functionality for common validation tasks. Validation can be done for data [as a whole], group of rows [as a whole], column [as a whole], row [as a whole] and cell. After exposing data frame of interest to rules and obtaining tidy validation report, one can perform any action based on this information: explore report, throw error, impute input data frame, etc.</li>
</ul>


</section>

 ]]></description>
  <category>rstats</category>
  <category>ruler</category>
  <category>questionflow</category>
  <guid>https://echasnovski.com/blog/2017-12-04-usage-of-ruler-package.html</guid>
  <pubDate>Mon, 04 Dec 2017 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Rule Your Data with Tidy Validation Reports. Design</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2017-11-28-rule-your-data-with-tidy-validation-reports-design.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Some time ago I had a task to write data validation code. As for most R practitioners, this led to exploration of present solutions. I was looking for a package with the following features:</p>
<ul>
<li>Relatively small amount of time should be spent learning before comfortable usage. Preferably, it should be built with <a href="https://www.tidyverse.org/">tidyverse</a> in mind.</li>
<li>It should be quite flexible in terms of types of validation rules.</li>
<li>Package should offer functionality for both validations (with relatively simple output format) and assertions (with relatively flexible behaviour).</li>
<li><a href="http://magrittr.tidyverse.org/reference/pipe.html">Pipe</a>-friendliness.</li>
<li>Validating only data frames would be enough.</li>
</ul>
<p>After devoting couple of days to research, I didn’t find any package fully (subjectively) meeting my needs (for a composed list look <a href="https://echasnovski.github.io/ruler/#other-packages-for-validation-and-assertions">here</a>). So I decided to write one myself. More precisely, it turned out into not one but two packages: <a href="https://echasnovski.github.io/ruler/">ruler</a> and <a href="https://echasnovski.github.io/keyholder/">keyholder</a>, which powers some of <code>ruler</code>’s functionality.</p>
<p>This post is a <em>rather long</em> story about key moments in the journey of <code>ruler</code>’s design process. To learn other aspects see its <a href="https://echasnovski.github.io/ruler/">README</a> (for relatively brief introduction) or <a href="https://echasnovski.github.io/ruler/articles/">vignettes</a> (for more thorough description of package capabilities).</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>In my mind, the whole process of data validation should be performed in the following steps:</p>
<ul>
<li>Create conditions (rules) for data to meet.</li>
<li>Expose data to them and obtain some kind of unified report as a result.</li>
<li>Act based on the report.</li>
</ul>
<p>The design process went through a little different sequence of definition steps:</p>
<ul>
<li>Validation result</li>
<li>Rules definition</li>
<li>Exposing process</li>
<li>Act after exposure</li>
</ul>
<p>Of course, there was switching between these items in order to ensure they would work well together, but I feel this order was decisive for the end result.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr))</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr))</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ruler)</span></code></pre></div>
</section>
<section id="validation-result" class="level1">
<h1>Validation result</h1>
<section id="dplyr-data-units" class="level2">
<h2 class="anchored" data-anchor-id="dplyr-data-units">Dplyr data units</h2>
<p>I started with an attempt of simple and clear formulation of <strong>validation</strong>: it is a process of checking whether <em>something satisfies certain conditions</em>. As it was enough to be only validating data frames, <em>something</em> should be thought of as <em>parts of data frame</em> which I will call <strong>data units</strong>. <em>Certain conditions</em> might be represented as functions, which I will call <strong>rules</strong>, associated with some data unit and which return <code>TRUE</code>, if condition <em>is satisfied</em>, and <code>FALSE</code> otherwise.</p>
<p>I decided to make <a href="http://dplyr.tidyverse.org/">dplyr</a> package a default tool for creating rules. The reason is, basically, because it satisfies most conditions I had in mind. Also I tend to use it for interactive validation of data frames, as, I am sure, many more R users. Its pipe-friendliness creates another important feature: interactive code can be transformed into a function just by replacing the initial data frame variable by a dot <code>.</code>. This will create a <em>functional sequence</em>, “a function which applies the entire chain of right-hand sides in turn to its input.”.</p>
<p><code>dplyr</code> offers a set of tools for operating with the following data units (see comments):</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">is_integerish <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(x))}</span>
<span id="cb2-2">z_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x)}</span>
<span id="cb2-3"></span>
<span id="cb2-4">mtcars_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data frame as a whole</span></span>
<span id="cb2-7">validate_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow_low =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb2-8">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow_up =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-9">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_data</span>()</span>
<span id="cb2-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 2</span></span>
<span id="cb2-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   nrow_low nrow_up</span></span>
<span id="cb2-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      &lt;lgl&gt;   &lt;lgl&gt;</span></span>
<span id="cb2-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     TRUE   FALSE</span></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group as a whole</span></span>
<span id="cb2-16">validate_groups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(vs, am) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vs_am_low =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb2-19">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_groups</span>()</span>
<span id="cb2-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 4 x 3</span></span>
<span id="cb2-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      vs    am vs_am_low</span></span>
<span id="cb2-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt;     &lt;lgl&gt;</span></span>
<span id="cb2-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     0     0      TRUE</span></span>
<span id="cb2-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     0     1     FALSE</span></span>
<span id="cb2-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     1     0      TRUE</span></span>
<span id="cb2-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4     1     1      TRUE</span></span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column as a whole</span></span>
<span id="cb2-29">validate_columns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_if</span>(is_integerish, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough_sum =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>))</span>
<span id="cb2-31">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_columns</span>()</span>
<span id="cb2-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 6</span></span>
<span id="cb2-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   cyl_is_enough_sum hp_is_enough_sum vs_is_enough_sum am_is_enough_sum</span></span>
<span id="cb2-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##               &lt;lgl&gt;            &lt;lgl&gt;            &lt;lgl&gt;            &lt;lgl&gt;</span></span>
<span id="cb2-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1              TRUE             TRUE             TRUE            FALSE</span></span>
<span id="cb2-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 2 more variables: gear_is_enough_sum &lt;lgl&gt;,</span></span>
<span id="cb2-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   carb_is_enough_sum &lt;lgl&gt;</span></span>
<span id="cb2-38"></span>
<span id="cb2-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row as a whole</span></span>
<span id="cb2-40">validate_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough_sum =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb2-42">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_rows</span>()</span>
<span id="cb2-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 14 x 1</span></span>
<span id="cb2-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   is_enough_sum</span></span>
<span id="cb2-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##           &lt;lgl&gt;</span></span>
<span id="cb2-46"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1          TRUE</span></span>
<span id="cb2-47"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2          TRUE</span></span>
<span id="cb2-48"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3          TRUE</span></span>
<span id="cb2-49"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4          TRUE</span></span>
<span id="cb2-50"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5          TRUE</span></span>
<span id="cb2-51"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 9 more rows</span></span>
<span id="cb2-52"></span>
<span id="cb2-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cell</span></span>
<span id="cb2-54">validate_cells <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-55">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute_if</span>(is.numeric, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_out =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">z_score</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb2-57">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_cells</span>()</span>
<span id="cb2-58"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 27 x 11</span></span>
<span id="cb2-59"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   mpg_is_out cyl_is_out disp_is_out hp_is_out drat_is_out wt_is_out</span></span>
<span id="cb2-60"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        &lt;lgl&gt;      &lt;lgl&gt;       &lt;lgl&gt;     &lt;lgl&gt;       &lt;lgl&gt;     &lt;lgl&gt;</span></span>
<span id="cb2-61"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1      FALSE      FALSE       FALSE     FALSE        TRUE     FALSE</span></span>
<span id="cb2-62"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2      FALSE       TRUE        TRUE      TRUE       FALSE     FALSE</span></span>
<span id="cb2-63"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3      FALSE       TRUE       FALSE      TRUE       FALSE     FALSE</span></span>
<span id="cb2-64"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4      FALSE       TRUE       FALSE     FALSE       FALSE     FALSE</span></span>
<span id="cb2-65"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5      FALSE      FALSE       FALSE     FALSE       FALSE     FALSE</span></span>
<span id="cb2-66"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 22 more rows, and 5 more variables: qsec_is_out &lt;lgl&gt;,</span></span>
<span id="cb2-67"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   vs_is_out &lt;lgl&gt;, am_is_out &lt;lgl&gt;, gear_is_out &lt;lgl&gt;, carb_is_out &lt;lgl&gt;</span></span></code></pre></div>
</section>
<section id="tidy-data-validation-report" class="level2">
<h2 class="anchored" data-anchor-id="tidy-data-validation-report">Tidy data validation report</h2>
<p>After realizing this type of <code>dplyr</code> structure, I noticed the following points.</p>
<p>In order to use <code>dplyr</code> as tool for creating rules, there should be one extra level of abstraction for the whole functional sequence. It is not a rule but rather a several rules. In other words, it is a function that answers multiple questions about one type of data unit. I decided to call this <strong>rule pack</strong> or simply <strong>pack</strong>.</p>
<p>In order to identify, whether some data unit obeys some rule, one needs to describe that data unit, rule and result of validation. Descriptions of last two are simple: for rule it is a combination of <strong>pack</strong> and <strong>rule</strong> names (which should always be defined) and for validation result it is <strong>value</strong> <code>TRUE</code> or <code>FALSE</code>.</p>
<p>Description of data unit is trickier. After some thought, I decided that the most balanced way to do it is with two variables:</p>
<ul>
<li><strong>var</strong> (character) which represents the variable name of data unit:
<ul>
<li>Value “.all” is reserved for “all columns as a whole”.</li>
<li>Value equal to some column name indicates column of data unit.</li>
<li>Value not equal to some column name indicates the name of group: it is created by uniting (with delimiter) group levels of grouping columns.</li>
</ul></li>
<li><strong>id</strong> (integer) which represents the row index of data unit:
<ul>
<li>Value 0 is reserved for “all rows as a whole”.</li>
<li>Value not equal to 0 indicates the row index of data unit.</li>
</ul></li>
</ul>
<p>Combinations of these variables describe all mentioned data units:</p>
<ul>
<li><code>var == '.all'</code> and <code>id == 0</code>: Data as a whole.</li>
<li><code>var != '.all'</code> and <code>id == 0</code>: Group (<code>var</code> shouldn’t be an actual column name) or column (<code>var</code> should be an actual column name) as a whole.</li>
<li><code>var == '.all'</code> and <code>id != 0</code>: Row as a whole.</li>
<li><code>var != '.all'</code> and <code>id != 0</code>: Described cell.</li>
</ul>
<p>With this knowledge in mind, I decided that the <strong>tidy data validation report</strong> should be a <a href="http://tibble.tidyverse.org/">tibble</a> with the following columns:</p>
<ul>
<li><code>pack</code> &lt;chr&gt; : Pack name.</li>
<li><code>rule</code> &lt;chr&gt; : Rule name inside pack.</li>
<li><code>var</code> &lt;chr&gt; : Variable name of data unit.</li>
<li><code>id</code> &lt;int&gt; : Row index of data unit.</li>
<li><code>value</code> &lt;lgl&gt; : Whether the described data unit obeys the rule.</li>
</ul>
</section>
<section id="exposure" class="level2">
<h2 class="anchored" data-anchor-id="exposure">Exposure</h2>
<p>Using only described report as validation output is possible if only information about breakers (data units which do not obey respective rules) is interesting. However, <em>reproducibility</em> is a great deal in R community, and keeping information about call can be helpful for future use.</p>
<p>This idea led to creation of another object in <code>ruler</code> called <strong>packs info</strong>. It is also a <em>tibble</em> which contains all information about exposure call:</p>
<ul>
<li><em>name</em> &lt;chr&gt; : Name of the rule pack. This column is used to match column <code>pack</code> in tidy report.</li>
<li><em>type</em> &lt;chr&gt; : Name of pack type. Indicates which data unit pack checks.</li>
<li><em>fun</em> &lt;list&gt; : List of actually used rule pack functions.</li>
<li><em>remove_obeyers</em> &lt;lgl&gt; : Value of convenience argument of the future <code>expose</code> function. It indicates whether rows about obeyers (data units that obey certain rule) were removed from report after applying pack.</li>
</ul>
<p>To fully represent validation, described two tibbles should be returned together. So the actual validation result is decided to be <strong>exposure</strong> which is basically an S3 class list with two tibbles <code>packs_info</code> and <code>report</code>. This data structure is fairly easy to understand and use. For example, exposures can be <a href="https://echasnovski.github.io/ruler/reference/bind_exposures.html">binded</a> together which is useful for combining several validation results. Also its elements are regular tibbles which can be filtered, summarised, joined, etc.</p>
</section>
</section>
<section id="rules-definition" class="level1">
<h1>Rules definition</h1>
<section id="interpretation-of-dplyr-output" class="level2">
<h2 class="anchored" data-anchor-id="interpretation-of-dplyr-output">Interpretation of dplyr output</h2>
<p>I was willing to use pure <code>dplyr</code> in creating rule packs, i.e.&nbsp;without extra knowledge of data unit to be validated. However, I found it impossible to do without experiencing annoying edge cases. Problem with this approach is that all of <code>dplyr</code> outputs are tibbles with similar structures. The only differentiating features are:</p>
<ul>
<li><code>summarise</code> without grouping returns tibble with one row and user-defined column names.</li>
<li><code>summarise</code> with grouping returns tibble with number of rows equal to number of summarised groups. Columns consist from grouping and user-defined ones.</li>
<li><code>transmute</code> returns tibble with number of rows as in input data frame and user-defined column names.</li>
<li>Scoped variants of <code>summarise</code> and <code>transmute</code> differ from regular ones in another mechanism of creating columns. They apply all supplied functions to all chosen columns. Resulting names are “the shortest … needed to uniquely identify the output”. It means that:
<ul>
<li>In case of one function they are column names.</li>
<li>In case of more than one function and one column they are function names.</li>
<li>In case of more than one column and function they are combinations of column and function names, pasted with character <code>_</code> (which, unfortunately, is hardcoded). To force this behaviour in previous cases <strong>both</strong> columns and functions should be named inside of helper functions <a href="http://dplyr.tidyverse.org/reference/vars.html">vars</a> and <a href="http://dplyr.tidyverse.org/reference/funs.html">funs</a>. To match output columns with combination of validated column and rule, this option is preferred. However, there is a need of different separator between column and function names, as character <code>_</code> is frequently used in column names.</li>
</ul></li>
</ul>
<p>The first attempt was to use the following algorithm to interpret (identify validated data unit) the output:</p>
<ul>
<li>If there is at least one non-logical column then groups are validated. The reason is that in most cases grouping columns are character or factor ones. This already introduces edge case with logical grouping columns.</li>
<li>Combination of whether number of rows equals 1 (<code>n_rows_one</code>) and presence of name separator in all column names (<code>all_contain_sep</code>) is used to make interpretation:
<ul>
<li>If <code>n_rows_one == TRUE</code> and <code>all_contain_sep == FALSE</code> then data is validated.</li>
<li>If <code>n_rows_one == TRUE</code> and <code>all_contain_sep == TRUE</code> then columns are validated.</li>
<li>If <code>n_rows_one == FALSE</code> and <code>all_contain_sep == FALSE</code> then rows are validated. This introduces an edge case when output has one row which is intended to be validated. It will be interpreted as ‘data as a whole’.</li>
<li>If <code>n_rows_one == FALSE</code> and <code>all_contain_sep == TRUE</code> then cells are validated. This also has edge case when output has one row in which cells are intended to be validated. It will be interpreted as ‘columns as a whole’.</li>
</ul></li>
</ul>
<p>Despite of having edge cases, this algorithm is good for guessing the validated data unit, which can be useful for interactive use. Its important prerequisite is to have a simple way of forcing extended naming in scoped <code>dplyr</code> verbs with custom rarely used separator.</p>
</section>
<section id="pack-creation" class="level2">
<h2 class="anchored" data-anchor-id="pack-creation">Pack creation</h2>
<p>Research of pure dplyr-style way of creating rule packs left no choice but to create a mechanism of supplying information about data unit of interest along with pack functions. It consists of following important principles.</p>
<p><strong>Use <code>ruler</code>’s function <code>rules()</code> instead of <code>funs()</code></strong>. Its goals are to force usage of full naming in scoped <code>dplyr</code> verbs as much as possible and impute missing rule names (as every rule should be named for validation report). <code>rules</code> is just a wrapper for <code>funs</code> but with extra functionality of naming its every output element and adding prefix to that names (which will be used as a part of separator between column and rule name). By default prefix is a string <code>._.</code>. It is chosen for its, hopefully, rare usage inside column names and symbolism (it is the Morse code of letter ‘R’).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(mean, sd)</span>
<span id="cb3-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;fun_calls&gt;</span></span>
<span id="cb3-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ mean: mean(.)</span></span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ sd  : sd(.)</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(mean, sd)</span>
<span id="cb3-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;fun_calls&gt;</span></span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ._.rule..1: mean(.)</span></span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ._.rule..2: sd(.)</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(mean, sd, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.prefix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"___"</span>)</span>
<span id="cb3-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;fun_calls&gt;</span></span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ___rule..1: mean(.)</span></span>
<span id="cb3-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ___rule..2: sd(.)</span></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn_1 =</span> mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn_2 =</span> sd)</span>
<span id="cb3-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;fun_calls&gt;</span></span>
<span id="cb3-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ._.fn_1: mean(.)</span></span>
<span id="cb3-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $ ._.fn_2: sd(.)</span></span></code></pre></div>
<p><strong>Note</strong> that in case of using only one column in scoped verb it should be named within <code>dplyr::vars</code> in order to force full naming.</p>
<p><strong>Use functions supported by <code>keyholder</code> to build rule packs</strong>. One of the main features I was going to implement is a possibility of validating only a subset of all possible data units. For example, validation of only last two rows (or columns) of data frame. There is no problem with columns: they can be specified with <code>summarise_at</code>. However, the default way of specifying rows is by subsetting data frame, after which all information about original row position is lost. To solve this, I needed a mechanism of tracking rows as invisibly for user as possible. This led to creation of <a href="https://echasnovski.github.io/keyholder/">keyholder</a> package (which is also on CRAN now). To learn details about it go to its site or read my <a href="../blog/2017-11-20-store-data-about-rows.html">previous post</a>.</p>
<p><strong>Use specific rule pack wrappers for certain data units</strong>. Their goal is to create S3 classes for rule packs in order to carry information about data unit of interest through exposing process. All of them always return a list with supplied functions but with changed attribute <code>class</code> (with additional <code>group_vars</code> and <code>group_sep</code> for <code>group_packs()</code>). <strong>Note</strong> that packs might be named inside these functions, which is recommended. If not, names will be imputed during exposing process. Also <strong>note</strong> that supplied functions are not checked to be correct in terms of validating specified data unit. This is done during exposure (exposing process).</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data unit. Rule pack is manually named 'my_data'</span></span>
<span id="cb4-2">my_data_packs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data_packs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">my_data =</span> validate_data)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(my_data_packs, class)</span>
<span id="cb4-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $my_data</span></span>
<span id="cb4-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "data_pack" "rule_pack" "fseq"      "function"</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group unit. Need to supply grouping variables explicitly</span></span>
<span id="cb4-8">my_group_packs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_packs</span>(validate_groups, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.group_vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vs"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"am"</span>))</span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(my_group_packs, class)</span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[1]]</span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "group_pack" "rule_pack"  "fseq"       "function"</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column unit. Need to be rewritten using `rules`</span></span>
<span id="cb4-14">my_col_packs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_packs</span>(</span>
<span id="cb4-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">my_col =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_if</span>(is_integerish, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_enough_sum =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>))</span>
<span id="cb4-17">)</span>
<span id="cb4-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(my_col_packs, class)</span>
<span id="cb4-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $my_col</span></span>
<span id="cb4-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "col_pack"  "rule_pack" "fseq"      "function"</span></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row unit. One can supply several rule packs</span></span>
<span id="cb4-23">my_row_packs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_packs</span>(</span>
<span id="cb4-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">my_row_1 =</span> validate_rows,</span>
<span id="cb4-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">my_row_2 =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_vs_one =</span> vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-26">)</span>
<span id="cb4-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(my_row_packs, class)</span>
<span id="cb4-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $my_row_1</span></span>
<span id="cb4-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "row_pack"  "rule_pack" "fseq"      "function"</span></span>
<span id="cb4-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb4-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $my_row_2</span></span>
<span id="cb4-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "row_pack"  "rule_pack" "fseq"      "function"</span></span>
<span id="cb4-33"></span>
<span id="cb4-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cell unit. Also needs to be rewritten using `rules`.</span></span>
<span id="cb4-35">my_cell_packs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cell_packs</span>(</span>
<span id="cb4-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">my_cell =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute_if</span>(is.numeric, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rules</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_out =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">z_score</span>(.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb4-39">)</span>
<span id="cb4-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(my_cell_packs, class)</span>
<span id="cb4-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $my_cell</span></span>
<span id="cb4-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "cell_pack" "rule_pack" "fseq"      "function"</span></span></code></pre></div>
</section>
</section>
<section id="exposing-process" class="level1">
<h1>Exposing process</h1>
<p>After sorting things out with formats of validation result and rule packs it was time to combine them in the main <code>ruler</code>’s function: <code>expose()</code>. I had the following requirements:</p>
<ul>
<li>It should be insertable inside common <code>%&gt;%</code> pipelines as smoothly and flexibly as possible. Two main examples are validating data frame before performing some operations with it and actually obtaining results of validation.</li>
<li>There should be possibility of sequential apply of <code>expose</code> with different rule packs. In this case exposure (validation report) after first call should be updated with new exposure. In other words, the result should be as if those rule packs were both supplied in <code>expose</code> by one call.</li>
</ul>
<p>These requirements led to the following main design property of <code>expose</code>: <strong>it never modifies content of input data frame but possibly creates or updates attribute <code>exposure</code> with validation report</strong>. To access validation data there are wrappers <code>get_exposure()</code>, <code>get_report()</code> and <code>get_packs_info()</code>. The whole exposing process can be described as follows:</p>
<ul>
<li>Apply all supplied rule packs to keyed with <code>keyholder::use_id</code> version of input data frame.</li>
<li>Impute names of rule packs based on possible present exposure (from previous use of <code>expose</code>) and validated data units.</li>
<li>Bind possible present exposure with new ones and create/update attribute <code>exposure</code> with it.</li>
</ul>
<p>Also it was decided (for flexibility and convenience) to add following arguments to <code>expose</code>:</p>
<ul>
<li><code>.rule_sep</code>. It is a regular expression used to delimit column and function names in the output of scoped <code>dplyr</code> verbs. By default it is a string <code>._.</code> possibly surrounded by punctuation characters. This is done to account of <code>dplyr</code>’s hardcoded use of <code>_</code> in scoped verbs. <strong>Note</strong> that <code>.rule_sep</code> should take into account separator used in <code>rules()</code>.</li>
<li><code>.remove_obeyers</code>. It is a logical argument indicating whether to automatically remove elements, which obey rules, from tidy validation report. It can be very useful because the usual result of validation is a handful of rule breakers. Without possibility of setting <code>.remove_obeyers</code> to <code>TRUE</code> (which is default) validation report will grow unnecessary big.</li>
<li><code>.guess</code>. By default <code>expose</code> guesses the type of unsupported rule pack type with algorithm described before. In order to write strict and robust code this can be set to <code>FALSE</code> in which case error will be thrown after detecting unfamiliar pack type.</li>
</ul>
<p>Some examples:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(my_data_packs, my_col_packs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_exposure</span>()</span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Exposure</span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Packs info:</span></span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2 x 4</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      name      type             fun remove_obeyers</span></span>
<span id="cb5-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;chr&gt;     &lt;chr&gt;          &lt;list&gt;          &lt;lgl&gt;</span></span>
<span id="cb5-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 my_data data_pack &lt;S3: data_pack&gt;           TRUE</span></span>
<span id="cb5-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  my_col  col_pack  &lt;S3: col_pack&gt;           TRUE</span></span>
<span id="cb5-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb5-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2 x 5</span></span>
<span id="cb5-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      pack          rule   var    id value</span></span>
<span id="cb5-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb5-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 my_data       nrow_up  .all     0 FALSE</span></span>
<span id="cb5-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  my_col is_enough_sum    am     0 FALSE</span></span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note that `id` starts from 6 as rows 1:5 were removed from validating</span></span>
<span id="cb5-21">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(my_cell_packs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.remove_obeyers =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_exposure</span>()</span>
<span id="cb5-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Exposure</span></span>
<span id="cb5-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb5-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Packs info:</span></span>
<span id="cb5-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 4</span></span>
<span id="cb5-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      name      type             fun remove_obeyers</span></span>
<span id="cb5-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;chr&gt;     &lt;chr&gt;          &lt;list&gt;          &lt;lgl&gt;</span></span>
<span id="cb5-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 my_cell cell_pack &lt;S3: cell_pack&gt;          FALSE</span></span>
<span id="cb5-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb5-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb5-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 297 x 5</span></span>
<span id="cb5-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      pack   rule   var    id value</span></span>
<span id="cb5-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb5-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 my_cell is_out   mpg     6 FALSE</span></span>
<span id="cb5-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 my_cell is_out   mpg     7 FALSE</span></span>
<span id="cb5-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 my_cell is_out   mpg     8 FALSE</span></span>
<span id="cb5-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 my_cell is_out   mpg     9 FALSE</span></span>
<span id="cb5-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 my_cell is_out   mpg    10 FALSE</span></span>
<span id="cb5-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 292 more rows</span></span>
<span id="cb5-42"></span>
<span id="cb5-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note name imputation and guessing</span></span>
<span id="cb5-44">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(my_data_packs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.remove_obeyers =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(validate_rows) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-47">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_exposure</span>()</span>
<span id="cb5-48"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Exposure</span></span>
<span id="cb5-49"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb5-50"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Packs info:</span></span>
<span id="cb5-51"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2 x 4</span></span>
<span id="cb5-52"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          name      type             fun remove_obeyers</span></span>
<span id="cb5-53"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         &lt;chr&gt;     &lt;chr&gt;          &lt;list&gt;          &lt;lgl&gt;</span></span>
<span id="cb5-54"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     my_data data_pack &lt;S3: data_pack&gt;          FALSE</span></span>
<span id="cb5-55"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 row_pack..1  row_pack  &lt;S3: row_pack&gt;           TRUE</span></span>
<span id="cb5-56"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb5-57"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb5-58"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 x 5</span></span>
<span id="cb5-59"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          pack          rule   var    id value</span></span>
<span id="cb5-60"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb5-61"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     my_data      nrow_low  .all     0  TRUE</span></span>
<span id="cb5-62"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     my_data       nrow_up  .all     0 FALSE</span></span>
<span id="cb5-63"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 row_pack..1 is_enough_sum  .all    19 FALSE</span></span></code></pre></div>
</section>
<section id="act-after-exposure" class="level1">
<h1>Act after exposure</h1>
<p>After creating data frame with attribute <code>exposure</code>, it is pretty straightforward to design how to perform any action. It is implemented in function <code>act_after_exposure</code> with the following arguments:</p>
<ul>
<li><code>.tbl</code> which should be the result of using <code>expose()</code>.</li>
<li><code>.trigger</code>: function which takes <code>.tbl</code> as argument and returns TRUE if some action needs to be performed.</li>
<li><code>actor</code>: function which takes <code>.tbl</code> as argument and performs the action.</li>
</ul>
<p>Basically act_after_exposure() is doing the following:</p>
<ul>
<li>Check that <code>.tbl</code> has a proper exposure attribute.</li>
<li>Compute whether to perform intended action by computing <code>.trigger(.tbl)</code>.</li>
<li>If trigger results in <code>TRUE</code> then <code>.actor(.tbl)</code> is returned. In other case <code>.tbl</code> is returned.</li>
</ul>
<p>It is a good idea that .actor should be doing one of two things:</p>
<ul>
<li><strong>Making side effects</strong>. For example throwing an error (if condition in <code>.trigger</code> is met), printing some information and so on. In this case it should return <code>.tbl</code> to be used properly inside a pipe.</li>
<li><strong>Changing <code>.tbl</code> based on exposure information</strong>. In this case it should return the imputed version of <code>.tbl</code>.</li>
</ul>
<p>As a main use case, <code>ruler</code> has function <code>assert_any_breaker</code>. It is a wrapper for <code>act_after_exposure</code> with <code>.trigger</code> checking presence of any breaker in exposure and <code>.actor</code> being notifier about it.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expose</span>(my_data_packs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_any_breaker</span>()</span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   Breakers report</span></span>
<span id="cb6-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tidy data validation report:</span></span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 x 5</span></span>
<span id="cb6-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      pack    rule   var    id value</span></span>
<span id="cb6-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;lgl&gt;</span></span>
<span id="cb6-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 my_data nrow_up  .all     0 FALSE</span></span>
<span id="cb6-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Error: assert_any_breaker: Some breakers found in exposure.</span></span></code></pre></div>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>Design process of a package deserves its own story.</li>
<li>Package <a href="https://echasnovski.github.io/ruler/">ruler</a> offers tools for dplyr-style exploration and validation of data frame like objects. With its help validation is done with 3 commands/steps each designed for specific purpose.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.2 (2017-09-28)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] bindrcpp_0.2 ruler_0.1.0  purrr_0.2.4  dplyr_0.7.4
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.13     knitr_1.17       bindr_0.1        magrittr_1.5
##  [5] tidyselect_0.2.3 R6_2.2.2         rlang_0.1.4      stringr_1.2.0
##  [9] tools_3.4.2      htmltools_0.3.6  yaml_2.1.14      rprojroot_1.2
## [13] digest_0.6.12    assertthat_0.2.0 tibble_1.3.4     bookdown_0.5
## [17] tidyr_0.7.2      glue_1.2.0       evaluate_0.10.1  rmarkdown_1.7
## [21] blogdown_0.2     stringi_1.1.5    compiler_3.4.2   keyholder_0.1.1
## [25] backports_1.1.1  pkgconfig_2.0.1</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>ruler</category>
  <category>questionflow</category>
  <guid>https://echasnovski.com/blog/2017-11-28-rule-your-data-with-tidy-validation-reports-design.html</guid>
  <pubDate>Mon, 27 Nov 2017 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Store Data About Rows</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2017-11-20-store-data-about-rows.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>During development of my other R package (<a href="https://github.com/echasnovski/ruler">ruler</a>), I encountered the following problem: how to track rows of data frame after application of some <strong>user defined</strong> function? It is assumed that this function takes data frame as input, subsets it (with possible creation of new columns, but not rows) and returns the result. The typical example using <a href="http://dplyr.tidyverse.org/">dplyr</a> and <a href="http://magrittr.tidyverse.org/">magrittr</a>’s pipe:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr))</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom `mtcars` for more clear explanation</span></span>
<span id="cb1-4">mtcars_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(mpg, vs, am) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A handy way of creating function with one argument</span></span>
<span id="cb1-9">modify <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vs_am =</span> vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> am) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(vs_am <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(mpg))</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The question is: which rows of `mtcars_tbl` are returned?</span></span>
<span id="cb1-15">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify</span>()</span>
<span id="cb1-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 7 x 4</span></span>
<span id="cb1-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    vs    am vs_am</span></span>
<span id="cb1-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb1-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  33.9     1     1     1</span></span>
<span id="cb1-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  32.4     1     1     1</span></span>
<span id="cb1-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  30.4     1     1     1</span></span>
<span id="cb1-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  30.4     1     1     1</span></span>
<span id="cb1-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  27.3     1     1     1</span></span>
<span id="cb1-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 2 more rows</span></span></code></pre></div>
<p>To solve this problem I ended up creating package <a href="https://echasnovski.github.io/keyholder">keyholder</a>, which became my first CRAN release. You can install its stable version with :</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keyholder"</span>)</span></code></pre></div>
<p>This post describes basis of design and main use cases of <code>keyholder</code>. For more information see its vignette <a href="https://echasnovski.github.io/keyholder/articles/introduction.html">Introduction to keyholder</a>.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(keyholder))</span></code></pre></div>
<p>The main idea of package is to create S3 class <code>keyed_df</code>, which indicates that original data frame (or tibble) should have attribute <code>keys</code>. “Key” is <strong>any vector</strong> (even list) of the same length as number of rows in data frame. Keys are stored as tibble in attribute <code>keys</code> and so one data frame can have multiple keys. In other words, keys can be considered as <strong>columns of data frame which are hidden from subsetting functions but are updated according to them</strong>.</p>
<p>To achieve that, those functions should be generic and have method for <code>keyed_df</code> implemented. Look <a href="https://echasnovski.github.io/keyholder/reference/keyholder-supported-funs.html">here</a> for the list of functions supported by <code>keyholder</code>. As for version <code>0.1.1</code> they are all one- and two-table <code>dplyr</code> verbs for local data frames and <code>[</code> function.</p>
</section>
<section id="create-and-manipulate-keys" class="level1">
<h1>Create and manipulate keys</h1>
<p>There are two distinct ways of creating keys: by assigning and by using existing columns:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By assigning</span></span>
<span id="cb4-2">mtcars_tbl_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_tbl</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keys</span>(mtcars_tbl_1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rev_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mtcars_tbl_1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-4">mtcars_tbl_1</span>
<span id="cb4-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A keyed object. Keys: rev_id</span></span>
<span id="cb4-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 3</span></span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    vs    am</span></span>
<span id="cb4-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## * &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb4-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  21.0     0     1</span></span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  21.0     0     1</span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  22.8     1     1</span></span>
<span id="cb4-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  21.4     1     0</span></span>
<span id="cb4-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  18.7     0     0</span></span>
<span id="cb4-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># By using existing columns</span></span>
<span id="cb4-17">mtcars_keyed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key_by</span>(vs)</span>
<span id="cb4-18">mtcars_keyed</span>
<span id="cb4-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A keyed object. Keys: vs</span></span>
<span id="cb4-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 3</span></span>
<span id="cb4-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    vs    am</span></span>
<span id="cb4-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## * &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb4-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  21.0     0     1</span></span>
<span id="cb4-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  21.0     0     1</span></span>
<span id="cb4-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  22.8     1     1</span></span>
<span id="cb4-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  21.4     1     0</span></span>
<span id="cb4-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  18.7     0     0</span></span>
<span id="cb4-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span></code></pre></div>
<p>To get keys use <code>keys()</code> (which always returns tibble) or <code>pull_key()</code> (similar to <code>dplyr::pull()</code> but for keys):</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mtcars_keyed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keys</span>()</span>
<span id="cb5-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 1</span></span>
<span id="cb5-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      vs</span></span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## * &lt;dbl&gt;</span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     0</span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     0</span></span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     1</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4     1</span></span>
<span id="cb5-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5     0</span></span>
<span id="cb5-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">mtcars_keyed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_key</span>(vs)</span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1</span></span></code></pre></div>
<p>To restore keys (create respective columns in data frame) use <code>restore_keys()</code>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column `vs` didn't change in output because it was restored from keys</span></span>
<span id="cb6-2">mtcars_keyed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vs =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore_keys</span>(vs)</span>
<span id="cb6-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A keyed object. Keys: vs</span></span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 3</span></span>
<span id="cb6-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    vs    am</span></span>
<span id="cb6-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb6-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  21.0     0     1</span></span>
<span id="cb6-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  21.0     0     1</span></span>
<span id="cb6-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  22.8     1     1</span></span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  21.4     1     0</span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  18.7     0     0</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span></code></pre></div>
<p>To end having keys use <code>unkey()</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">mtcars_keyed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unkey</span>()</span>
<span id="cb7-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 3</span></span>
<span id="cb7-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    vs    am</span></span>
<span id="cb7-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## * &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb7-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  21.0     0     1</span></span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  21.0     0     1</span></span>
<span id="cb7-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  22.8     1     1</span></span>
<span id="cb7-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  21.4     1     0</span></span>
<span id="cb7-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  18.7     0     0</span></span>
<span id="cb7-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span></code></pre></div>
</section>
<section id="use-cases" class="level1">
<h1>Use cases</h1>
<section id="track-rows" class="level2">
<h2 class="anchored" data-anchor-id="track-rows">Track rows</h2>
<p>To track rows after application of user defined function one can create key with row number as values. <code>keyholder</code> has a wrapper <code>use_id()</code> for this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `use_id()` removes all existing keys and creates key ".id"</span></span>
<span id="cb8-2">mtcars_track <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_id</span>()</span>
<span id="cb8-4"></span>
<span id="cb8-5">mtcars_track <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_key</span>(.id)</span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [24] 24 25 26 27 28 29 30 31 32</span></span></code></pre></div>
<p>Now rows are tracked:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">mtcars_track <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull_key</span>(.id)</span>
<span id="cb9-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 20 18 19 28 26  3 32</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure of correct result</span></span>
<span id="cb9-7">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(id)</span>
<span id="cb9-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 20 18 19 28 26  3 32</span></span></code></pre></div>
<p>The reason for using “key id” instead of “column id” is that <code>modify()</code> hypothetically can perform differently depending on columns of its input. For example, it can use <code>dplyr</code>’s <a href="http://dplyr.tidyverse.org/reference/scoped.html">scoped variants</a> of verbs or simply check input’s column structure.</p>
</section>
<section id="restore-information" class="level2">
<h2 class="anchored" data-anchor-id="restore-information">Restore information</h2>
<p>During development of tools for data analysis one can have a need to ensure that certain columns don’t change after application of some function. This can be achieved by keying those columns and restoring them later (<strong>note</strong> that this can change the order of columns.):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">weird_modify <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_col =</span> vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> am)</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Suppose there is a need for all columns to stay untouched in the output</span></span>
<span id="cb10-4">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key_by</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">weird_modify</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This can be replaced by its scoped variant: restore_keys_all()</span></span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore_keys</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unkey</span>()</span>
<span id="cb10-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 4</span></span>
<span id="cb10-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   new_col   mpg    vs    am</span></span>
<span id="cb10-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb10-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1       2  21.0     0     1</span></span>
<span id="cb10-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2       2  21.0     0     1</span></span>
<span id="cb10-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3       3  22.8     1     1</span></span>
<span id="cb10-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4       1  21.4     1     0</span></span>
<span id="cb10-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5       0  18.7     0     0</span></span>
<span id="cb10-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span></code></pre></div>
</section>
<section id="hide-columns" class="level2">
<h2 class="anchored" data-anchor-id="hide-columns">Hide columns</h2>
<p>In actual data analysis the following situation can happen: one should modify all but handful of columns with <code>dplyr::mutate_if()</code>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">is_integerish <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(x))}</span>
<span id="cb11-2"></span>
<span id="cb11-3">if_modify <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_if</span>(is_integerish, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_modify</span>()</span>
<span id="cb11-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 3</span></span>
<span id="cb11-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    vs    am</span></span>
<span id="cb11-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb11-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  21.0     0    10</span></span>
<span id="cb11-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  21.0     0    10</span></span>
<span id="cb11-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  22.8    10    10</span></span>
<span id="cb11-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  21.4    10     0</span></span>
<span id="cb11-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  18.7     0     0</span></span>
<span id="cb11-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span></code></pre></div>
<p>Suppose column <code>vs</code> should appear unchanged in the output. This can be achieved in several ways, which differ slightly but significantly. The first one is to key by <code>vs</code>, apply function and restore <code>vs</code> from keys.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key_by</span>(vs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_modify</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore_keys</span>(vs)</span>
<span id="cb12-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A keyed object. Keys: vs</span></span>
<span id="cb12-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 3</span></span>
<span id="cb12-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    vs    am</span></span>
<span id="cb12-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb12-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  21.0     0    10</span></span>
<span id="cb12-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  21.0     0    10</span></span>
<span id="cb12-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  22.8     1    10</span></span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  21.4     1     0</span></span>
<span id="cb12-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  18.7     0     0</span></span>
<span id="cb12-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span></code></pre></div>
<p>The advantage is that it doesn’t change the order of columns. The disadvantage is that it actually applies modification function to column, which can be undesirable in some cases.</p>
<p>The second approach is similar, but after keying by <code>vs</code> one can remove this column from data frame. This way column <code>vs</code> is moved to last column.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">mtcars_hidden_vs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key_by</span>(vs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.exclude =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb13-2"></span>
<span id="cb13-3">mtcars_hidden_vs</span>
<span id="cb13-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A keyed object. Keys: vs</span></span>
<span id="cb13-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 2</span></span>
<span id="cb13-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    am</span></span>
<span id="cb13-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## * &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb13-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  21.0     1</span></span>
<span id="cb13-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  21.0     1</span></span>
<span id="cb13-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  22.8     1</span></span>
<span id="cb13-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  21.4     0</span></span>
<span id="cb13-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  18.7     0</span></span>
<span id="cb13-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span>
<span id="cb13-14"></span>
<span id="cb13-15">mtcars_hidden_vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_modify</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore_keys</span>(vs)</span>
<span id="cb13-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A keyed object. Keys: vs</span></span>
<span id="cb13-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 32 x 3</span></span>
<span id="cb13-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg    am    vs</span></span>
<span id="cb13-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb13-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  21.0    10     0</span></span>
<span id="cb13-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  21.0    10     0</span></span>
<span id="cb13-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  22.8    10     1</span></span>
<span id="cb13-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  21.4     0     1</span></span>
<span id="cb13-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  18.7     0     0</span></span>
<span id="cb13-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 27 more rows</span></span></code></pre></div>
</section>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>It might be a good idea to extract some package functionality into separate package, as this can lead to one more useful tool.</li>
<li>Package <code>keyholder</code> offers functionality for keeping track of arbitrary data about rows after application of some <strong>user defined</strong> function. This is done by creating special attribute “keys” which is updated after every change in rows (subsetting, ordering, etc.).</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.2 (2017-09-28)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
## [1] keyholder_0.1.1 bindrcpp_0.2    dplyr_0.7.4
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.13     bookdown_0.5     assertthat_0.2.0 digest_0.6.12
##  [5] rprojroot_1.2    R6_2.2.2         backports_1.1.1  magrittr_1.5
##  [9] evaluate_0.10.1  blogdown_0.2     rlang_0.1.4      stringi_1.1.5
## [13] rmarkdown_1.7    tools_3.4.2      stringr_1.2.0    glue_1.2.0
## [17] yaml_2.1.14      compiler_3.4.2   pkgconfig_2.0.1  htmltools_0.3.6
## [21] bindr_0.1        knitr_1.17       tibble_1.3.4</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>keyholder</category>
  <category>questionflow</category>
  <guid>https://echasnovski.com/blog/2017-11-20-store-data-about-rows.html</guid>
  <pubDate>Sun, 19 Nov 2017 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Mythical Generic Overhead</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2017-11-05-mythical-generic-overhead.html</link>
  <description><![CDATA[ 





<!-- ```r -->
<!-- # Actual computation is done in ".R" file with the same name -->
<!-- load("2017-11-05-mythical-generic-overhead_data.RData") -->
<!-- ``` -->
<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>Earlier this week I came across <a href="https://x.com/thomasp85/status/924933249285214209">this tweet</a> from <a href="https://twitter.com/thomasp85">Thomas</a> (author of many useful and powerful R packages). “Generic+methods” approach is considered better for many reasons, which can be summarised as “easier code maintenance, extensibility and understandability”. <a href="https://x.com/hadleywickham/status/924970634064613378">Hadley’s ruthless answer</a> confirms this.</p>
<p>However, I was curious about looking for possible pros of “if-else” approach. The most legitimate point (in some circumstances) I was able to produce was “… method dispatch can be slower on microseconds level. But it rarely has any practical impacts”. This thought inspired me to make some analysis of possible computational overhead of using “generic+methods” approach over “if-else” and “switch” (which seems just a slight enhancement of “if-else”).</p>
<p><strong>Note</strong> that, regardless of this analysis outcome, using S3 methods is better choice over “if-else” sequence and “switch” statement in almost all practical cases.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>Brainstorm about possible nature of performance led to the following experimental design features:</p>
<ul>
<li>Evaluation should be done for different number of possible classes.</li>
<li>Evaluation should be done for different classes inside “if-else” chain, to account for its sequential nature.</li>
<li>Action performed by every function should be the same for all three considered methods.</li>
</ul>
<section id="experiment" class="level2">
<h2 class="anchored" data-anchor-id="experiment">Experiment</h2>
<ul>
<li>Take range of possible classes number (<code>n_class</code>) as <code>1:20</code>.</li>
<li>For every value of <code>n_class</code> generate functions for “if-else” (<code>if_get_true</code>), “switch” (<code>switch_get_true</code>) and “generic+methods” (<code>gen_get_true</code>) approaches. Each of this function will take one argument <code>x</code>. They will check the class of <code>x</code> and perform <code>return(TRUE)</code> action (regardless of class).</li>
<li>Measure for particular <code>n_class</code> (with package <a href="https://cran.r-project.org/web/packages/microbenchmark/index.html">microbenchmark</a>) computation time of all possible <code>*_get_true(x)</code>:
<ul>
<li><code>*</code> can be <code>if</code>, <code>switch</code> and <code>gen</code>.</li>
<li><code>x</code> is constructed independently from <code>*</code> and is a numeric value <code>1</code> with class equals to one of <code>class1</code>, …, <code>class{n_class}</code> (total <code>n_class</code> possibilities).</li>
<li>Argument <code>times</code> of <code>microbenchmark</code> (actual number of times to evaluate the expression) should be quite big. As preliminary tests showed, computation time differs in microseconds, and big number of actual evaluations is needed to remove the statistical noise. In this analysis it is taken as <img src="https://latex.codecogs.com/png.latex?1000000">.</li>
<li>The final benchmark of computation time is <strong>median</strong> of all actual evaluation times (in microseconds).</li>
</ul></li>
<li>Totally there should be <img src="https://latex.codecogs.com/png.latex?(1%20+%202%20+%20...%20+%2020)%20%5Ccdot%203%20=%20630"> measurements.</li>
</ul>
</section>
<section id="hypotheses" class="level2">
<h2 class="anchored" data-anchor-id="hypotheses">Hypotheses</h2>
<ol type="1">
<li><em>“Generic+methods” benchmark correlates with number of classes</em>. Search of appropriate method in bigger set should take more time.</li>
<li><em>“Generic+methods” benchmark doesn’t correlate with class value</em>. Just a guess.</li>
<li><em>“If-else” benchmark positively correlates with class value</em>. The later class is in “if-else” sequence the more time it should take to get to it.</li>
<li><em>“If-else” and “switch” benchmarks are better than “generic+methods” with small number of classes but the opposite is true with bigger ones</em>. This is just the initial guess which led to this analysis.</li>
</ol>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse))</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang))</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(microbenchmark))</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1105</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7">ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>())</span></code></pre></div>
</section>
</section>
<section id="creating-data" class="level1">
<h1>Creating Data</h1>
<p>General approach for computing benchmarks:</p>
<ul>
<li>Create separate environment for every value of <code>n_class</code>.</li>
<li>Create in every environment the set of needed functions.</li>
<li>Compute benchmarks for every <code>n_class</code>, class id (which is a class’s number in sequence of “if-else”s) and approach.</li>
</ul>
<section id="function-generators" class="level2">
<h2 class="anchored" data-anchor-id="function-generators">Function Generators</h2>
<p>Function <code>new_get_true_all()</code> takes number of possible classes <code>n_class</code> and target environment <code>env</code> (by default, it is the environment from which function is called). It creates all necessary functions in <code>env</code> and returns it for cleaner use inside <a href="http://dplyr.tidyverse.org">dplyr</a>’s <code>mutate</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrapper for creating function with one argument `x` in environment `env`</span></span>
<span id="cb2-2">new_f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(name, body, env) {</span>
<span id="cb2-3">  fun <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_function</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">alist</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> ), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(body), env)</span>
<span id="cb2-4"></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> fun, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> env)</span>
<span id="cb2-6">}</span>
<span id="cb2-7"></span>
<span id="cb2-8">new_if_get_true <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb2-9">  body <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb2-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'if (class(x) == "class'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n_class), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'") { return(TRUE) }'</span>,</span>
<span id="cb2-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" else "</span></span>
<span id="cb2-12">  )</span>
<span id="cb2-13"></span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_f</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"if_get_true"</span>, body, env)</span>
<span id="cb2-15">}</span>
<span id="cb2-16"></span>
<span id="cb2-17">new_switch_get_true <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb2-18">  body <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb2-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"switch(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">class(x),</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb2-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n_class), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" = return(TRUE)"</span>,</span>
<span id="cb2-21">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">",</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>),</span>
<span id="cb2-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb2-23">  )</span>
<span id="cb2-24"></span>
<span id="cb2-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_f</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"switch_get_true"</span>, body, env)</span>
<span id="cb2-26">}</span>
<span id="cb2-27"></span>
<span id="cb2-28">new_gen_get_true <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb2-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create generic</span></span>
<span id="cb2-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_f</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gen_get_true"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UseMethod("gen_get_true")'</span>, env)</span>
<span id="cb2-31"></span>
<span id="cb2-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create methods</span></span>
<span id="cb2-33">  method_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gen_get_true.class"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n_class))</span>
<span id="cb2-34"></span>
<span id="cb2-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(method_names, new_f, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">body =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"return(TRUE)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> env)</span>
<span id="cb2-36">}</span>
<span id="cb2-37"></span>
<span id="cb2-38">new_get_true_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb2-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_if_get_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> n_class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> env)</span>
<span id="cb2-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_switch_get_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> n_class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> env)</span>
<span id="cb2-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_gen_get_true</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> n_class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> env)</span>
<span id="cb2-42"></span>
<span id="cb2-43">  env</span>
<span id="cb2-44">}</span></code></pre></div>
<p>For example, the result of calling <code>new_get_true_all(n_class = 2)</code> from console is creation of the following functions in global environment (here <code>class1</code> has id 1, <code>class2</code> - 2 and so on):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_get_true_all</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;environment: R_GlobalEnv&gt;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">if_get_true</span>
<span id="cb3-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function (x)</span></span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## if (class(x) == "class1") {</span></span>
<span id="cb3-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     return(TRUE)</span></span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## } else if (class(x) == "class2") {</span></span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     return(TRUE)</span></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## }</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">switch_get_true</span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function (x)</span></span>
<span id="cb3-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## switch(class(x), class1 = return(TRUE), class2 = return(TRUE))</span></span>
<span id="cb3-15"></span>
<span id="cb3-16">gen_get_true</span>
<span id="cb3-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function (x)</span></span>
<span id="cb3-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## UseMethod("gen_get_true")</span></span>
<span id="cb3-19"></span>
<span id="cb3-20">gen_get_true.class1</span>
<span id="cb3-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function (x)</span></span>
<span id="cb3-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## return(TRUE)</span></span>
<span id="cb3-23"></span>
<span id="cb3-24">gen_get_true.class2</span>
<span id="cb3-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function (x)</span></span>
<span id="cb3-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## return(TRUE)</span></span></code></pre></div>
</section>
<section id="benchmark" class="level2">
<h2 class="anchored" data-anchor-id="benchmark">Benchmark</h2>
<p>Function for creating benchmarks for one value of <code>n_class</code> given already created environment <code>env</code> with all functions needed:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">bench_funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>) {</span>
<span id="cb4-2">  bench <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n_class), <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(class_id) {</span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>, class_id)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> env)</span>
<span id="cb4-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"times"</span>, times, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> env)</span>
<span id="cb4-5"></span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(</span>
<span id="cb4-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb4-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'if'</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_get_true</span>(x),</span>
<span id="cb4-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'switch'</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">switch_get_true</span>(x),</span>
<span id="cb4-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gen =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gen_get_true</span>(x),</span>
<span id="cb4-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> times</span>
<span id="cb4-12">      )),</span>
<span id="cb4-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> env</span>
<span id="cb4-14">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(expr) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-17">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Median computation time in microseconds</span></span>
<span id="cb4-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class_id =</span> class_id)</span>
<span id="cb4-20">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> expr)</span>
<span id="cb4-23"></span>
<span id="cb4-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"times"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> env)</span>
<span id="cb4-25"></span>
<span id="cb4-26">  bench</span>
<span id="cb4-27">}</span></code></pre></div>
<p>Computing benchmarks:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Takes considerable amount of time to run</span></span>
<span id="cb5-2">overhead_bench <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_class =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rerun</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">child_env</span>(.GlobalEnv)),</span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(n_class, env, new_get_true_all),</span>
<span id="cb5-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bench =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(n_class, env, bench_funs, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb5-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>env) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(bench) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(method)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(n_class, class_id, method, time)</span></code></pre></div>
<p>The result has the following structure:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">overhead_bench</span>
<span id="cb6-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 630 x 4</span></span>
<span id="cb6-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    n_class class_id method  time</span></span>
<span id="cb6-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      &lt;int&gt;    &lt;int&gt;  &lt;chr&gt; &lt;dbl&gt;</span></span>
<span id="cb6-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1       1        1     if 0.529</span></span>
<span id="cb6-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2       1        1 switch 0.381</span></span>
<span id="cb6-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3       1        1    gen 0.820</span></span>
<span id="cb6-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4       2        1     if 0.521</span></span>
<span id="cb6-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5       2        1 switch 0.396</span></span>
<span id="cb6-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6       2        1    gen 0.811</span></span>
<span id="cb6-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7       2        2     if 0.961</span></span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8       2        2 switch 0.544</span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9       2        2    gen 1.029</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10       3        1     if 0.554</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 620 more rows</span></span></code></pre></div>
</section>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>We are interested in analyzing benchmarks of class checking approaches in relation to two parameters: number of possible classes <code>n_class</code> and class id <code>class_id</code>. For benchmark we will again use the <strong>median</strong> of computation time, computed for every group defined by approach and parameter.</p>
<p>For analysis let’s visualize and compute correlation coefficients’ confidence interval (CI) for every approach and parameter. Based on this information we will make conclusions.</p>
<section id="plots" class="level2">
<h2 class="anchored" data-anchor-id="plots">Plots</h2>
<p>Let’s define function for plotting median computation time for every approach based on parameter <code>param</code> (which will be <code>n_class</code> and <code>class_id</code>).</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">plot_median_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(tbl, param) {</span>
<span id="cb7-2">  param_enquo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(param)</span>
<span id="cb7-3"></span>
<span id="cb7-4">  overhead_bench <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb7-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Method =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb7-7">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gen"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"generic+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">methods"</span>,</span>
<span id="cb7-8">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"if"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"if-else"</span>,</span>
<span id="cb7-9">        method <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"switch"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"switch"</span></span>
<span id="cb7-10">      )</span>
<span id="cb7-11">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Method, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">param =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UQ</span>(param_enquo)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(time)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(param, median_time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> Method, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> Method)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb7-18">}</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">overhead_bench <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_median_time</span>(n_class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb8-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Benchmarks for number of classes"</span>,</span>
<span id="cb8-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of possible classes"</span>,</span>
<span id="cb8-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median computation time (microseconds)"</span></span>
<span id="cb8-7">    )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2017-11-05-mythical-generic-overhead/median-time-for-n_class-1.png" class="img-fluid"></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">overhead_bench <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_median_time</span>(class_id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb9-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Benchmarks for class id"</span>,</span>
<span id="cb9-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class id (number in sequence of "if-else"s)'</span>,</span>
<span id="cb9-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median computation time (microseconds)"</span></span>
<span id="cb9-7">    )</span></code></pre></div>
<p><img src="https://echasnovski.com/blog/2017-11-05-mythical-generic-overhead/median-time-for-class_id-1.png" class="img-fluid"></p>
</section>
<section id="correlations" class="level2">
<h2 class="anchored" data-anchor-id="correlations">Correlations</h2>
<p>Similarly to plotting, let’s define a function for computing correlation coefficient CI for parameter benchmarks.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">extract_cor_ci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(cor_test) {</span>
<span id="cb10-2">  ci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(cor_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>conf.int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower =</span> ci[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upper =</span> ci[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb10-5">}</span>
<span id="cb10-6"></span>
<span id="cb10-7">compute_median_time_cor_ci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(tbl, param) {</span>
<span id="cb10-8">  param_enquo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enquo</span>(param)</span>
<span id="cb10-9"></span>
<span id="cb10-10">  tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(method, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UQ</span>(param_enquo)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(time)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cor_test =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor.test</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UQ</span>(param_enquo), median_time,</span>
<span id="cb10-14">                                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conf.level =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cor_ci =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(cor_test, extract_cor_ci)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cor_test) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(cor_ci)</span>
<span id="cb10-18">}</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_median_time_cor_ci</span>(overhead_bench, n_class)</span>
<span id="cb11-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 x 3</span></span>
<span id="cb11-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   method   lower  upper</span></span>
<span id="cb11-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt;</span></span>
<span id="cb11-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1    gen -0.4407 0.4444</span></span>
<span id="cb11-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     if  0.9264 0.9886</span></span>
<span id="cb11-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 switch  0.8297 0.9726</span></span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_median_time_cor_ci</span>(overhead_bench, class_id)</span>
<span id="cb12-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 x 3</span></span>
<span id="cb12-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   method   lower   upper</span></span>
<span id="cb12-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;</span></span>
<span id="cb12-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1    gen -0.8812 -0.4056</span></span>
<span id="cb12-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     if  0.9912  0.9987</span></span>
<span id="cb12-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 switch  0.9395  0.9907</span></span></code></pre></div>
</section>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>One shouldn’t be intimidated by necessity of operating with function generators and environments.</li>
<li>“Generic+methods” benchmark <strong>doesn’t correlate</strong> with number of classes (at least considering less then 20 classes).</li>
<li>“Generic+methods” benchmark <strong>seems to negatively correlate</strong> with class id. This result seems somewhat odd to me.</li>
<li>“If-else” and “switch” benchmarks <strong>positively correlate</strong> with both number of classes and class id. However, slopes for “switch” approach is rather gentle.</li>
<li>“If-else” approach is faster than “generic+methods” for number of classes less than 3 and slower for 4 and more. “Switch” is faster for less than 20 at which they almost equal.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.2 (2017-09-28)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## other attached packages:
##  [1] bindrcpp_0.2           microbenchmark_1.4-2.1 rlang_0.1.4
##  [4] forcats_0.2.0          stringr_1.2.0          dplyr_0.7.4
##  [7] purrr_0.2.4            readr_1.1.1            tidyr_0.7.2
## [10] tibble_1.3.4           ggplot2_2.2.1          tidyverse_1.2.0
##
## loaded via a namespace (and not attached):
##  [1] reshape2_1.4.2   haven_1.1.0      lattice_0.20-35  colorspace_1.3-2
##  [5] htmltools_0.3.6  yaml_2.1.14      foreign_0.8-69   glue_1.2.0
##  [9] modelr_0.1.1     readxl_1.0.0     bindr_0.1        plyr_1.8.4
## [13] munsell_0.4.3    blogdown_0.2     gtable_0.2.0     cellranger_1.1.0
## [17] rvest_0.3.2      psych_1.7.8      evaluate_0.10.1  labeling_0.3
## [21] knitr_1.17       parallel_3.4.2   broom_0.4.2      Rcpp_0.12.13
## [25] scales_0.5.0     backports_1.1.1  jsonlite_1.5     mnormt_1.5-5
## [29] hms_0.3          digest_0.6.12    stringi_1.1.5    bookdown_0.5
## [33] grid_3.4.2       rprojroot_1.2    cli_1.0.0        tools_3.4.2
## [37] magrittr_1.5     lazyeval_0.2.1   crayon_1.3.4     pkgconfig_2.0.1
## [41] xml2_1.1.1       lubridate_1.7.1  assertthat_0.2.0 rmarkdown_1.7
## [45] httr_1.3.1       rstudioapi_0.7   R6_2.2.2         nlme_3.1-131
## [49] compiler_3.4.2</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>questionflow</category>
  <guid>https://echasnovski.com/blog/2017-11-05-mythical-generic-overhead.html</guid>
  <pubDate>Sat, 04 Nov 2017 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Highlight the Pipe. Pkgdown</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2017-10-29-highlight-the-pipe-pkgdown.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>It felt really nice to achieve custom code highlighting on this site with <a href="https://highlightjs.org/">highlight.js</a> (see <a href="../blog/2017-10-20-highlight-the-pipe-highlight-js.html">this post</a>). After that, I found myself working with <a href="http://hadley.github.io/pkgdown/">pkgdown</a>, one of many great Hadley’s packages. It is “designed to make it quick and easy to build a website for your package”. It converts all package documentation into appropriate HTML pages. Naturally, I had the same question as before: is there an easy way to highlight <a href="http://magrittr.tidyverse.org/reference/pipe.html">pipe operator</a> <code>%&gt;%</code> separately? This time the best answer I was able to come up with was “Yes, if you don’t mind some hacking.”</p>
<p>This post is about adding custom rules for code highlighting for <strong>pkgdown</strong> site, taking string <code>%&gt;%</code> as an example.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>After looking into HTML code of site built with <code>pkgdown</code>, I noticed next key features of code highlighting:</p>
<ul>
<li>Text is already parsed with appropriate strings wrapped in <code>&lt;span&gt;&lt;/span&gt;</code>. This is done during building site with <code>pkgdown::build_site()</code>. Class attribute of <code>&lt;span&gt;</code> is used to customize highlighting.</li>
<li>Code from reference pages is processed differently. For example, function <code>mean</code> is wrapped as <code>&lt;span class="kw"&gt;mean&lt;/span&gt;</code> in Home page but <code>&lt;span class='fu'&gt;mean&lt;/span&gt;</code> in Reference.</li>
<li>The most valuable feature of code preprocessing is creating links to appropriate help pages for R functions. This is done with adding <code>&lt;a&gt;</code> tag inside <code>&lt;span&gt;</code> for certain function name.</li>
</ul>
<p>So the default method of customising code highlighting in <code>pkgdown</code> is to define CSS styles for present classes (which are essentially different across site).</p>
<p>To highlight certain strings, such as <code>%&gt;%</code>, one should parse HTML for certain <code>&lt;span&gt;</code> tags inside <code>&lt;pre&gt;</code> node (tag for preformatted text used for separate code blocks) and add appropriate class for further CSS customisation. This path is described in With adding tag class).</p>
<p>Although this method solves the problem of highlighting the <code>%&gt;%</code>, it is somewhat constrained: one can’t customize parsing rules. For example, there is no easy way to highlight <code>&lt;-</code> differently because it is not wrapped in <code>&lt;span&gt;</code>. I thought it would be better to reuse the existing solution with <strong>highlight.js</strong>, but I didn’t consider this path for some time because of preformatted nature of code (unlike my previous experience) and concerns about function links to disappear. However, after manually adding necessary JavaScript code, it worked! Well, kind of: reference pages were not highlighted. The good news was that links stayed in place. How to add appropriate JavaScript code to <code>pkgdown</code> site and deal with reference pages is described in With highlight.js.</p>
<p>All code and short version of how to use it is placed in my <a href="https://github.com/echasnovski/highdown">highdown</a> package.</p>
</section>
<section id="with-adding-tag-class" class="level1">
<h1>With adding tag class</h1>
<p>The plan is pretty straightforward:</p>
<ul>
<li>Find all HTML pages to add tag classes.</li>
<li>At each page find appropriate tags, i.e.&nbsp;<code>&lt;span&gt;</code> inside <code>&lt;pre&gt;</code> with text satisfying desired condition.</li>
<li>Add certain class to that tags.</li>
<li>Modify CSS file.</li>
</ul>
<section id="add-class" class="level2">
<h2 class="anchored" data-anchor-id="add-class">Add class</h2>
<p>The following functions do the job of adding class to appropriate tags. Package <a href="https://cran.r-project.org/web/packages/xml2/index.html">xml2</a> should be installed.</p>
<p>Main function arguments are:</p>
<ul>
<li><code>xpath</code> - String containing an xpath (1.0) expression (use <code>"//pre//span"</code> for code highlighting tags).</li>
<li><code>pattern</code> - Regular expression for tags’ text of interest.</li>
<li><code>new_class</code> - String for class to add.</li>
<li><code>path</code> - Path to folder with html files (default to “docs”).</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">xml_add_class_pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(xpath, pattern, new_class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docs"</span>) {</span>
<span id="cb1-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find HTML pages</span></span>
<span id="cb1-3">  html_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(</span>
<span id="cb1-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docs"</span>,</span>
<span id="cb1-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.html"</span>,</span>
<span id="cb1-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb1-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb1-8">  )</span>
<span id="cb1-9"></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(html_files, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(file) {</span>
<span id="cb1-11">    page <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_html</span>(file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">encoding =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">    matched_nodes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_find_all_patterns</span>(page, xpath, pattern)</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(matched_nodes) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb1-16">    }</span>
<span id="cb1-17"></span>
<span id="cb1-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_add_class</span>(matched_nodes, new_class)</span>
<span id="cb1-19"></span>
<span id="cb1-20">    xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_html</span>(page, file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-21">  })</span>
<span id="cb1-22"></span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(html_files)</span>
<span id="cb1-24">}</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add class `new_class` to nodes</span></span>
<span id="cb1-27">xml_add_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, new_class) {</span>
<span id="cb1-28">  output_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>), new_class)</span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapply</span>(xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>xml_set_attr, x, output_class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MoreArgs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">attr =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>))</span>
<span id="cb1-30"></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x)</span>
<span id="cb1-32">}</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find appropriate tags</span></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To find &lt;span&gt; inside &lt;pre&gt; use `xpath = "\\pre\\span"`.</span></span>
<span id="cb1-36">xml_find_all_patterns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, xpath, pattern, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ns =</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_ns</span>(x)) {</span>
<span id="cb1-37">  res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_find_all</span>(x, xpath, ns)</span>
<span id="cb1-38">  is_matched <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(pattern, xml2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_text</span>(res))</span>
<span id="cb1-39"></span>
<span id="cb1-40">  res[is_matched]</span>
<span id="cb1-41">}</span></code></pre></div>
<p>For convenience one can define function <code>high_pipe()</code> for adding class <code>pp</code> to all <code>&lt;span&gt;</code> inside <code>&lt;pre&gt;</code> with text containing <code>%&gt;%</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">high_pipe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docs"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pp"</span>) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xml_add_class_pattern</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//pre//span"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&gt;%"</span>, new_class, path)</span>
<span id="cb2-3">}</span></code></pre></div>
<p>So typical usage is as follows:</p>
<ul>
<li>Run <code>pkgdown::build_site()</code>.</li>
<li>Run <code>highdown::high_pipe()</code> (with working directory being package root).</li>
</ul>
</section>
<section id="add-custom-css-rules" class="level2">
<h2 class="anchored" data-anchor-id="add-custom-css-rules">Add custom CSS rules</h2>
<p>For adding custom CSS rules in <code>pkgdown</code> site create file <code>pkgdown/extra.css</code> in package root and edit it. For example, to make <code>%&gt;%</code> bold write the following:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.pp</span> {<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-weight</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bold</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>}</span></code></pre></div>
</section>
</section>
<section id="with-highlight.js" class="level1">
<h1>With highlight.js</h1>
<p><strong>Highlight.js</strong> enables more flexible code highlighting. For its overview and customization see <a href="../blog/2017-10-20-highlight-the-pipe-highlight-js.html">my previous post</a>.</p>
<section id="add-custom-javascript" class="level2">
<h2 class="anchored" data-anchor-id="add-custom-javascript">Add custom JavaScript</h2>
<p>To add custom JavaScript code to <code>pkgdown</code> site one should create and modify file <code>pkgdown/extra.js</code> in package root. Go <a href="https://github.com/echasnovski/highdown/blob/master/inst/extra.js">here</a> for code that initializes <strong>highlight.js</strong> and registers default R language parsing rules.</p>
</section>
<section id="tweak-reference-page" class="level2">
<h2 class="anchored" data-anchor-id="tweak-reference-page">Tweak reference page</h2>
<p>For <strong>highlight.js</strong> to work, code should be wrapped in <code>&lt;pre&gt;&lt;span class="r"&gt;</code> tags. However, reference pages use only <code>&lt;pre&gt;</code>. To tweak these pages use the following function (with working directory being package root):</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">tweak_ref_pages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb4-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all reference pages</span></span>
<span id="cb4-3">  ref_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docs/reference/"</span>,</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.html"</span>,</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-8">  )</span>
<span id="cb4-9"></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(ref_files, add_code_node)</span>
<span id="cb4-11"></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(ref_files)</span>
<span id="cb4-13">}</span>
<span id="cb4-14"></span>
<span id="cb4-15">add_code_node <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb4-16">  page <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-17"></span>
<span id="cb4-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Regular expression magic for adding &lt;code class = "r"&gt;&lt;/code&gt;</span></span>
<span id="cb4-19">  page <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(&lt;pre.*?&gt;)'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1&lt;code class = "r"&gt;'</span>, page)</span>
<span id="cb4-20">  page <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/pre&gt;'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/code&gt;&lt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/pre&gt;'</span>, page)</span>
<span id="cb4-21"></span>
<span id="cb4-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(page, x))</span>
<span id="cb4-23">}</span></code></pre></div>
<p><strong>Note</strong> that as for 2017-10-27 this still can cause incorrect highlighting if some actual code is placed just after comment.</p>
</section>
<section id="add-highlight.js-css-rules" class="level2">
<h2 class="anchored" data-anchor-id="add-highlight.js-css-rules">Add highlight.js CSS rules</h2>
<p>Edit <code>pkgdown/extra.css</code> for <strong>highlight.js</strong> classes. For template with <a href="https://github.com/isagalaev/highlight.js/blob/master/src/styles/idea.css">Idea</a> style along with R default classes look <a href="https://github.com/echasnovski/highdown/blob/master/inst/extra.css">here</a>.</p>
</section>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>It is confirmed that asking questions about seemingly simple task can lead to the long journey of code exploration and hacking.</li>
<li>At first try to find a way to reuse existing solutions, if they satisfy your needs. It can save considerable amount of time in the future.</li>
<li>With <a href="https://github.com/echasnovski/highdown">highdown</a> it is straightforward to customise code highlighting of <code>pkgdown</code> sites.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.2 (2017-09-28)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## loaded via a namespace (and not attached):
##  [1] compiler_3.4.2  backports_1.1.1 bookdown_0.5    magrittr_1.5
##  [5] rprojroot_1.2   tools_3.4.2     htmltools_0.3.6 yaml_2.1.14
##  [9] Rcpp_0.12.13    stringi_1.1.5   rmarkdown_1.7   blogdown_0.2
## [13] knitr_1.17      stringr_1.2.0   digest_0.6.12   evaluate_0.10.1</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>pkgdown</category>
  <category>questionflow</category>
  <guid>https://echasnovski.com/blog/2017-10-29-highlight-the-pipe-pkgdown.html</guid>
  <pubDate>Sat, 28 Oct 2017 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Highlight the Pipe. Highlight.js</title>
  <dc:creator>Evgeni Chasnovski</dc:creator>
  <link>https://echasnovski.com/blog/2017-10-20-highlight-the-pipe-highlight-js.html</link>
  <description><![CDATA[ 





<section id="prologue" class="level1">
<h1>Prologue</h1>
<p>While creating this site I had to encounter the topic of highlighting code on web pages. I decided to do that with the help of <a href="https://highlightjs.org/">highlight.js</a> functionality. After <a href="https://highlightjs.org/static/demo/">picking a style</a> with R in mind, I arrived to the following question: is there an easy way to highlight <a href="http://magrittr.tidyverse.org/reference/pipe.html">pipe operator</a> <code>%&gt;%</code> separately? As it turned out, the answer is “Yes”, but the journey through unexplored world of JavaScript was bumpy with a pleasant moment of meeting familiar name.</p>
<p>So this post is about adding custom rules for code highlighting in <strong>highlight.js</strong>, taking string <code>%&gt;%</code> as an example.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>The “Getting Started” part of <a href="https://highlightjs.org/usage/">Usage</a> page says that to start using <strong>highlight.js</strong> on a web page the following code should be executed:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">link</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> rel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stylesheet"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> href</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/styles/default.css"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/to/highlight.pack.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>hljs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initHighlightingOnLoad</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>The description is “This will find and highlight code inside of <code>&lt;pre&gt;&lt;code&gt;</code> tags; it tries to detect the language automatically. If automatic detection doesn’t work for you, you can specify the language in the class attribute:”</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pre</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">code</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> class</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>...<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">code</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pre</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>So basically the process of highlighting the text inside <code>&lt;pre&gt;&lt;code&gt;...&lt;/code&gt;&lt;/pre&gt;</code> is the following:</p>
<ul>
<li>Detect language (either automatically or with <code>class</code> attribute inside <code>&lt;pre&gt;</code> or <code>&lt;code&gt;</code> tag).</li>
<li>Apply some complicated parsing with functionality sourced from “/path/to/highlight.pack.js”. This will, based on predefined rules, wrap some parts of text with <code>&lt;span&gt;&lt;/span&gt;</code> tags and appropriate class.</li>
<li>Apply CSS customization based on “/path/to/styles/default.css” file and classes of <code>&lt;span&gt;</code> tags created in the previous step.</li>
</ul>
<p>To be more specific with code, this site uses at the time of writing this post (with help of <a href="https://gohugo.io">Hugo</a> and <a href="https://github.com/calintat/minimal">Minimal theme</a>) the following code:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">link</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> rel</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stylesheet"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> href</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/idea.min.css"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/languages/yaml.min.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/languages/html.min.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/languages/javascript.min.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span>hljs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">initHighlightingOnLoad</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>The first block loads CSS code for “Idea” style, the second - JavaScript code for general <strong>highlight.js</strong> functionality, the third - code for parsing rules for specific languages (YAML and HTML) and the fourth initializes <strong>highlight.js</strong>. Basically, files <code>yaml.min.js</code>, <code>html.min.js</code> and <code>javascript.min.js</code> contain information about actual rules of code parsing.</p>
</section>
<section id="custom-parsing-rules" class="level1">
<h1>Custom parsing rules</h1>
<p>The similar file but for R, with my custom indentation, looks like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1">hljs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerLanguage</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e){</span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([a-zA-Z]|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.[a-zA-Z.])[a-zA-Z0-9._]*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>{</span>
<span id="cb4-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">c</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>[e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">HCM</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-6">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">l</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">k</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-7">          {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">keyword</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function if in break next repeat else for return switch while try tryCatch stop warning require library attach detach source setMethod setGeneric setGroupGeneric setClass ..."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">literal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10"</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-9">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-10">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0[xX][0-9a-fA-F]+[Li]?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-11">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?:[eE][+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-]?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d*)?L</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-12">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.(?!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d)(?:i</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b)?"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-13">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d*)?(?:[eE][+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-]?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d*)?i?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-14">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?:[eE][+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-]?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d*)?i?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-15">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">e</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-16">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">c</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>[e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">BE</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">v</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>[{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">e</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">e</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>}]}</span>
<span id="cb4-17">      ]</span>
<span id="cb4-18">    }</span>
<span id="cb4-19">  }</span>
<span id="cb4-20">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>After first seeing this without indentation, as one string, I was a little bit intimidated. Fortunately, after some internet searching I found <a href="https://github.com/isagalaev/highlight.js/">highlight.js github repository</a> with very useful <code>src</code> directory. It contains subdirectories <code>languages</code> (for JavaScript rules like mentioned above) and <code>styles</code> (for styles’ CSS code).</p>
<p>The file for parsing R code is <a href="https://github.com/isagalaev/highlight.js/blob/master/src/languages/r.js">src/languages/r.js</a>. Its core was written in the spring of 2012 by <a href="https://github.com/jcheng5">Joe Cheng</a>, creator of the <a href="https://shiny.rstudio.com/">Shiny</a> framework. Seeing familiar name during rough JavaScript journey somewhat cheered me up. After studying the code, many questions were answered:</p>
<ul>
<li>By default the following pieces of code can be manually highlighted: comment, string, number, keyword, literal (<code>TRUE</code>, <code>FALSE</code>, <code>NULL</code>, <code>NA</code>, etc.).</li>
<li>Those one- and two-letter variables in code are just short versions of more understandable <code>className</code>, <code>begin</code>, <code>end</code>, <code>relevance</code>, etc.</li>
<li>To add custom piece of code to highlight one should add appropriate class in the parsing rules. There is a thorough <a href="http://highlightjs.readthedocs.io/en/latest/index.html">highlight.js documentation</a> if you want to master the logic behind these rules. The most easy and understandable way of creating the rule is specifying regular expressions for beginning and ending of desired class. <strong>Note</strong> that if ending is omitted then it is just the regex for the class. For example:</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb5-1">{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">className</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pipe"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">begin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&gt;%"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">relevance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}</span></code></pre></div>
<p>This code finds string <code>%&gt;%</code> and wraps it as <code>&lt;span class="hljs-pipe"&gt;%&gt;%&lt;/span&gt;</code> (note prefix “hljs-”). About <code>relevance</code> argument one can read <a href="http://highlightjs.readthedocs.io/en/latest/language-guide.html#relevance">here</a>, as it is not very important for the current topic.</p>
<p>With this knowledge one can create other interesting rules:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function parameters with good style as 'variable' + 'space' + '=' + 'space'</span></span>
<span id="cb6-2">{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">className</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fun-param"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">begin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([a-zA-Z]|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.[a-zA-Z.])[a-zA-Z0-9._]*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">relevance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign operator with good style</span></span>
<span id="cb6-5">{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">className</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assign"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">begin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" &lt;- "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">relevance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Adding to class 'keyword' the explicit use of function's package</span></span>
<span id="cb6-8">{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">className</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keyword"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">begin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([a-zA-Z]|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.[a-zA-Z.])[a-zA-Z0-9._]*::"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">relevance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Class for basic dplyr words with their scoped variants</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Not included in this site highlighting rules</span></span>
<span id="cb6-12">{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">className</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">begin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tibble|mutate|select|filter|summari[sz]e|arrange|group_by"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">end</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-zA-Z0-9._]*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">relevance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}</span></code></pre></div>
<p>It is important to add these rules in the appropriate places, because they are processed sequentially, so order matters. The final version of this site’s rules for R looks like this (click to unfold the spoiler):</p>
<div class="callout callout-style-default callout-note callout-titled" title="custom.r.min.js">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
custom.r.min.js
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb7-1">hljs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerLanguage</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e){</span>
<span id="cb7-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([a-zA-Z]|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.[a-zA-Z.])[a-zA-Z0-9._]*"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>{</span>
<span id="cb7-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">c</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>[e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">HCM</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-6">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fun-param"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([a-zA-Z]|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.[a-zA-Z.])[a-zA-Z0-9._]*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-7">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pipe"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&gt;%"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-8">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assign"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" &lt;- "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-9">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keyword"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([a-zA-Z]|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.[a-zA-Z.])[a-zA-Z0-9._]*::"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//      {cN:"dplyr",b:"tibble|mutate|select|filter|summari[sz]e|arrange|group_by",e:"[a-zA-Z0-9._]*",r:0},</span></span>
<span id="cb7-11">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">l</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">k</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-12">          {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">keyword</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function if in break next repeat else for return switch while try tryCatch stop warning require library attach detach source setMethod setGeneric setGroupGeneric setClass ..."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-13">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">literal</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10"</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-14">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-15">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0[xX][0-9a-fA-F]+[Li]?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-16">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?:[eE][+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-]?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d*)?L</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-17">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.(?!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d)(?:i</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b)?"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-18">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d*)?(?:[eE][+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-]?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d*)?i?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-19">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?:[eE][+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-]?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d*)?i?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-20">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">e</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">r</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-21">        {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cN</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">c</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>[e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">BE</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">v</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>[{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">e</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>{<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">e</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>}]}</span>
<span id="cb7-22">      ]</span>
<span id="cb7-23">    }</span>
<span id="cb7-24">  }</span>
<span id="cb7-25">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
</div>
</div>
<p>This code should be sourced on every page with highlighting. For this to be done with Hugo:</p>
<ul>
<li>Save this code into file <code>static/js/custom.r.min.js</code>.</li>
<li>Add the following line to the head of every web page (usually by modifying partial template for page’s header):</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/js/custom.r.min.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</section>
<section id="custom-style" class="level1">
<h1>Custom style</h1>
<p>Styling of the parsed code is done with CSS, so some knowledge of it is needed. This is done by properly adding CSS rules to every page with highlighting. For example, this site’s CSS rules for specifically R code highlighting look like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Set colour for function parameters */</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.hljs-fun-param</span> {</span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#ff4000</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-4">}</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Make the pipe and assign operator bold */</span></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.hljs-pipe</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.hljs-assign</span> {</span>
<span id="cb9-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-weight</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bold</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-9">}</span></code></pre></div>
<p>The result looks like this:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># R comment with %&gt;% and &lt;- .</span></span>
<span id="cb10-2">iris_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-4">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">meanSepalLength =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(Sepal.Length))</span>
<span id="cb10-5"></span>
<span id="cb10-6">starts_with_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" %&gt;% "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" &lt;- "</span>)) {</span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starts with"</span>, x)</span>
<span id="cb10-8">}</span></code></pre></div>
<p>Notice the following:</p>
<ul>
<li>Strings <code>%&gt;%</code> and <code>&lt;-</code> are not specially highlighted inside comment or string.</li>
<li>Use of <code>dplyr::</code> is highlighted the same as keyword <code>function</code>.</li>
<li>Strings <code>=</code> (in function parameters) and <code>&lt;-</code> should be surrounded by spaces (for which styling is also applied) to be correctly highlighted. This encourages <a href="http://style.tidyverse.org/syntax.html#spacing">tidyverse style guide</a>.</li>
</ul>
</section>
<section id="conclusions" class="level1">
<h1>Conclusions</h1>
<ul>
<li>Asking questions about seemingly simple task can lead to the long journey of code exploration.</li>
<li>Meeting familiar names during times of trouble can be inspiring.</li>
<li>Creating custom rules for code highlighting with <strong>highlight.js</strong> is pretty straightforward for R people (after some JavaScript and CSS adjusting).</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled" title="sessionInfo()">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
sessionInfo()
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>## R version 3.4.2 (2017-09-28)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 16.04.3 LTS
##
## Matrix products: default
## BLAS: /usr/lib/openblas-base/libblas.so.3
## LAPACK: /usr/lib/libopenblasp-r0.2.18.so
##
## locale:
##  [1] LC_CTYPE=ru_UA.UTF-8       LC_NUMERIC=C
##  [3] LC_TIME=ru_UA.UTF-8        LC_COLLATE=ru_UA.UTF-8
##  [5] LC_MONETARY=ru_UA.UTF-8    LC_MESSAGES=ru_UA.UTF-8
##  [7] LC_PAPER=ru_UA.UTF-8       LC_NAME=C
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C
## [11] LC_MEASUREMENT=ru_UA.UTF-8 LC_IDENTIFICATION=C
##
## attached base packages:
## [1] methods   stats     graphics  grDevices utils     datasets  base
##
## loaded via a namespace (and not attached):
##  [1] compiler_3.4.2  backports_1.1.1 bookdown_0.5    magrittr_1.5
##  [5] rprojroot_1.2   tools_3.4.2     htmltools_0.3.6 yaml_2.1.14
##  [9] Rcpp_0.12.13    stringi_1.1.5   rmarkdown_1.7   blogdown_0.2
## [13] knitr_1.17      stringr_1.2.0   digest_0.6.12   evaluate_0.10.1</code></pre>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>rstats</category>
  <category>highlighting</category>
  <category>questionflow</category>
  <guid>https://echasnovski.com/blog/2017-10-20-highlight-the-pipe-highlight-js.html</guid>
  <pubDate>Thu, 19 Oct 2017 21:00:00 GMT</pubDate>
</item>
</channel>
</rss>
